#!/usr/bin/env python

# Copyright (C) 2011 Atsushi Togo
#
# This file is part of phonopy.
#
# Phonopy is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Phonopy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with phonopy.  If not, see <http://www.gnu.org/licenses/>.

# Thermal displacement plot (tdplot)
#
# Usage:
#   tdplot -i "1 2, 4 5" -o "td.pdf"
#
# The axis resolved thermal displacements are averaged by root mean
# square with the successive indices separated by ",". In this
# example, values at a temperature with the indices 1 and 2, 3 and 4
# are averaged by root mean square respectively as follwos:
#   sqrt( ( x_1 ** 2 + x_2 ** 2 + x_3 ** 2 + x_4 ** 2 ) / 4 ),
# and then they are ploted as a function of temperature.
#
# The definition is that indices correspond to those as follows:
# 1 2 3 : X Y Z of the 1st atom,
# 4 5 6 : X Y Z of the 2nd atom,
# ...

import sys
import numpy as np
import matplotlib.pyplot as plt

try:
    import yaml
except ImportError:
    print "You need to install python-yaml."
    exit(1)
    
try:
    from yaml import CLoader as Loader
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

# Parse options
from optparse import OptionParser
parser = OptionParser()
parser.set_defaults( output_filename = None,
                     factor = 1.0,
                     td_indices = None,
                     show_legend = False,
                     is_distance = False,
                     is_gnuplot = False,
                     ymax = None,
                     ymin = None,
                     tmax = None,
                     tmin = None )
parser.add_option("-i", "--indices", dest="td_indices",
                  action="store", type="string",
                  help="Indices like 1 2, 3 4 5 6...")
parser.add_option("--factor", dest="factor", type="float",
                  help="Conversion factor of energy unit to internal electronic energy")
parser.add_option("--ymax", dest="ymax", type="float",
                  help="Maximum value of y axis")
parser.add_option("--ymin", dest="ymin", type="float",
                  help="Minimum value of y axis")
parser.add_option("--tmax", dest="tmax", type="float",
                  help="Maximum value of temperature")
parser.add_option("--tmin", dest="tmin", type="float",
                  help="Minimum value of temperature")
parser.add_option("-o", "--output", dest="output_filename",
                  action="store", type="string",
                  help="Output filename")
parser.add_option("-l", "--legend", dest="show_legend",
                  action="store_true",
                  help="Show legend")
parser.add_option("--distance", dest="is_distance",
                  action="store_true",
                  help="Plot thermal distance")
(options, args) = parser.parse_args()


if not options.is_distance:
    if len( args ) == 0:
        filename = 'thermal_displacements.yaml'
    else:
        filename = args[0]
    yamldata = yaml.load( open( filename ).read(), Loader=Loader )

    td = yamldata['thermal_displacements']
    temperatures = [ v['temperature'] for v in td ]
    displacements = [ v['displacements'] for v in td ]
    displacements = np.array( displacements ).reshape( len( temperatures ), -1 )
else:
    if len( args ) == 0:
        filename = 'thermal_distances.yaml'
    else:
        filename = args[0]
    yamldata = yaml.load( open( filename ).read(), Loader=Loader )

    td = yamldata['thermal_distances']
    temperatures = [ v['temperature'] for v in td ]
    distances = [ v['distance'] for v in td ]
    for t, dists in zip( temperatures, distances ):
        print t,
        for d in dists:
            print d,
        print
    print
    print
    sys.exit(0)

        

# Set temperature range
tmin_index = 0
tmax_index = len( temperatures )
if not options.tmin == None:
    for i, t in enumerate( temperatures ):
        if t > options.tmin - ( temperatures[1] - temperatures[0] ) * 0.1:
            tmin_index = i
            break

if not options.tmax == None:
    for i, t in enumerate( temperatures ):
        if t > options.tmax + ( temperatures[1] - temperatures[0] ) * 0.1:
            tmax_index = i
            break

# Extract indices
set_of_indices = []
if options.td_indices == None:
    set_of_indices.append( range( 1, displacements.shape[1]+1 ) )
else:
    for v in options.td_indices.split(','):
        set_of_indices.append([ int(x) for x in v.split() ])

print set_of_indices

# Plot
plots = []
for indices in set_of_indices:
    d = np.zeros( len( temperatures ), dtype=float )
    for i in indices:
        d += displacements[:, i-1]
    plots.append( plt.plot( temperatures[tmin_index:tmax_index],
                            d[tmin_index:tmax_index] / len( indices ) ) )

# Set y range
if ( not options.ymin == None ) and ( not options.ymax == None ):
    plt.ylim( options.ymin, options.ymax )
elif options.ymin == None and ( not options.ymax == None ):
    plt.ylim( ymax=options.ymax )
elif ( not options.ymin == None ) and options.ymax == None:
    plt.ylim( ymin=options.ymin )

if options.show_legend:
    plt.legend( plots, set_of_indices, loc='upper left' )

# Set output device and show
if not options.output_filename == None:
    plt.rcParams['pdf.fonttype'] = 42
    plt.rcParams['font.family'] = 'serif'
    plt.savefig(options.output_filename)
else:
    plt.show()
