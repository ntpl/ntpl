#!/opt/python/python-2.6.5/bin/python

# Copyright (C) 2011 Atsushi Togo
#
# This file is part of phonopy.
#
# Phonopy is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Phonopy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with phonopy.  If not, see <http://www.gnu.org/licenses/>.

import numpy as np
import sys

EV = 1.60217733e-19 # [J]
Avogadro = 6.02214179e23
EVAngstromToGPa = EV * 1e21

TOLERANCE = 1e-5

try:
    from scipy.optimize import leastsq
except ImportError:
    print "You need to install python-scipy."
    exit(1)

# Third-order Birch-Murnaghan EOS
def residuals_birch_murnaghan(p, v, e):  
    return birch_murnaghan(p, v) - e
 
def birch_murnaghan(p, v):
    """
    p[0] = E_0
    p[1] = B_0
    p[2] = B'_0
    p[3] = V_0
    """
    return p[0]+9.0/16*p[3]*p[1]*( ( (p[3]/v)**(2.0/3)-1 )**3*p[2]+
                                   ( (p[3]/v)**(2.0/3)-1 )**2*
                                   ( 6-4*(p[3]/v)**(2.0/3) ) )

# Murnaghan EOS
def residuals_murnaghan(p, v, e):  
    return murnaghan(p, v) - e
 
def murnaghan(p, v):
    """
    p[0] = E_0
    p[1] = B_0
    p[2] = B'_0
    p[3] = V_0
    """
    return p[0]+p[1]*v/p[2]*((p[3]/v)**p[2]/(p[2]-1)+1)-p[1]*p[3]/(p[2]-1)


# Vinet EOS
def residuals_vinet(p, v, e):  
    return vinet(p, v) - e

def vinet(p, v):
    """
    p[0] = E_0
    p[1] = B_0
    p[2] = B'_0
    p[3] = V_0
    """
    x = ( v / p[3] ) ** ( 1.0 / 3 )
    xi = 3.0 / 2 * ( p[2] - 1 )
    return p[0] + 9 * p[1] * p[3] / ( xi**2 ) * ( 1 + ( xi * ( 1 - x ) - 1 ) * np.exp( xi * ( 1 - x ) ) )


# Data parser
def parse_data( filename ):
    data = []
    for line in open( filename ):
        if line.strip()[0] == '#' or line.strip()[0] == '':
            continue
        if '#' in line:
            data.append( [ float(x) for x in line.split('#')[0].split() ] )
        else:
            data.append( [ float(x) for x in line.split() ] )
    return np.array( data ).transpose()

# Parse heat capacity
def parse_cp( filename ):
    return parse_data( filename )


# Parse volume expansion
def parse_ve( filename ):
    return parse_data( filename )

# Read 'thermal_properties.yaml'
def read_thermal_properties_yaml( filenames ):
    thermal_properties = []
    for filename in filenames:
        thermal_properties.append(
            yaml.load(open(filename).read(), Loader=Loader)['thermal_properties'])
    return thermal_properties

def read_v_e( filename, factor, volume_factor, pressure=0.0 ):
    volumes, electronic_energies = [ v for v in parse_data( filename ) ]
    volumes *= volume_factor * factor
    electronic_energies *= factor
    electronic_energies += volumes * pressure / EVAngstromToGPa
    
    return volumes, electronic_energies

def read_data_from_thermal_properties( filenames, factor ):
    thermal_properties = read_thermal_properties_yaml( filenames )
    temperatures = [ v['temperature'] for v in thermal_properties[0] ]
    temp = []
    cv = []
    entropy = []
    fe_phonon = []
    for i in range(len(volumes)):
        temp.append([ v['temperature'] for v in thermal_properties[i] ])
        cv.append([ v['heat_capacity'] for v in thermal_properties[i] ])
        entropy.append([ v['entropy'] for v in thermal_properties[i] ])
        fe_phonon.append([ v['free_energy'] for v in thermal_properties[i] ])


    if is_temperatures_match( temp ):
        cv = np.array(cv).transpose() * options.factor
        entropy = np.array(entropy).transpose() * options.factor
        fe_phonon = np.array(fe_phonon).transpose() * options.energy_factor * options.factor
    else:
        print
        print "Check your input files"
        print "Disagreement of temperature range or step"
        for t, fname in zip( temp, filenames ):
            print "%s: Range [ %d, %d ], Step %f" % ( fname, int(t[0]), int(t[-1]), t[1] - t[0] )
        print
        print "Stop phonopy-qha"
        sys.exit(1)

    return temperatures, cv, entropy, fe_phonon

def is_temperatures_match( temperatures ):
    for t in temperatures:
        if not len( t ) == len( temperatures[0] ):
            return False
        if ( abs( t[0] - temperatures[0][0] ) > TOLERANCE or
             abs( t[-1] - temperatures[0][-1] ) > TOLERANCE ):
            return False

    return True
    

class EOSFit:
    def __init__(self, volume, energy, residuals=None):
        self.energy = np.array(energy)
        self.volume = np.array(volume)
        if residuals==None:
            self.residuals = residuals_vinet
        else:
            self.residuals = residuals

    def run(self, initial_parameter):
        result = leastsq(self.residuals, initial_parameter[:],
                         args=(self.volume, self.energy), full_output=1)
        self.parameters = result[0]
#         self.parameters = [ result[0][0],                         # Energy
#                             result[0][1] * self.pressure_factor,  # Bulk modulus
#                             result[0][2],                         # Pressure derivative of Bulk modules
#                             result[0][3] ]                        # Volume
#         covar = result[1]
#         print np.sum(self.residuals(result[0], self.volume, self.energy) ** 2)/self.volume.shape[0]
#         print ("%14.6f"*4) % tuple( result[0] )
#         print "error              :", ("%14.6f"*4) % tuple( np.sqrt( np.diag(covar) ) )

    def get_energy(self):
        return self.parameters[0]

    def get_volume(self):
        return self.parameters[3]

    def get_bulk_modulus(self):
        return self.parameters[1]

    def get_parameters(self):
        return self.parameters

def fit_to_eos( volumes, fe, residuals=None ):
    fit = EOSFit( volumes, fe, residuals )
    fit.run([ fe[len(fe)/2], 1.0, 4.0, volumes[len(volumes)/2] ])
    ev = fit.get_volume()
    ee = fit.get_energy()
    eb = fit.get_bulk_modulus()
    ep = fit.get_parameters()
    return ev, ee, eb, ep

def run_fitting( volumes,
                 electronic_energies,
                 temperatures,
                 cv,
                 entropy,
                 fe_phonon,
                 max_t_index,
                 pressure_factor=1.0,
                 residuals=None ):
    equiv_volumes = []
    equiv_energies = []
    equiv_bulk_modulus = []
    equiv_parameters = []
    free_energies = []
    print ("#%11s" + "%14s"*4) % ( "T", "E_0", "B_0", "B'_0", "V_0" )
    for i, t in enumerate(temperatures):
        fe = []
        for j, e in enumerate(electronic_energies):
            fe.append( e + fe_phonon[i][j] )

        ev, ee, eb, ep = fit_to_eos( volumes, fe, residuals )
        equiv_volumes.append( ev )
        equiv_energies.append( ee )
        equiv_bulk_modulus.append( eb )
        equiv_parameters.append( ep )
        free_energies.append( fe )
        print "%14.6f"*5 % ( t, ep[0],
                             ep[1] * pressure_factor,
                             ep[2],
                             ep[3] )
        if i > max_t_index:
            break

    return equiv_volumes, equiv_energies, \
        equiv_bulk_modulus, equiv_parameters, free_energies

def helmholtz_volume( temperatures,
                      volumes,
                      free_energies, 
                      equiv_volumes,
                      equiv_energies, 
                      equiv_parameters,
                      max_t_index,
                      is_graph_plot,
                      is_graph_save,
                      eos=None,
                      thin_number=10 ):

    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.25
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 4, 6

    w = open('helmholtz-volume.dat', 'w')
    for i, t in enumerate(temperatures[:max_t_index]):
        w.write("# Temperature: %f\n" % t)
        w.write("# Parameters: %f %f %f %f\n" % tuple( equiv_parameters[i] ) )
        for j, v in enumerate(volumes):
            w.write("%20.15f %25.15f\n" % ( v, free_energies[i][j] ))
        w.write("\n\n")
    w.close()

    if is_graph_plot or is_graph_save:
        volume_points = np.linspace(min(volumes), max(volumes), 201)
        selected_volumes = []
        selected_energies = []
    
        for i, t in enumerate(temperatures[:max_t_index]):
            if i % thin_number == 0:
                selected_volumes.append(equiv_volumes[i])
                selected_energies.append(equiv_energies[i])
                plt.plot(volumes, free_energies[i], 'bo', markersize=4)
                if eos==None:
                    plt.plot(volume_points, vinet(equiv_parameters[i], volume_points), 'b-')
                else:
                    plt.plot(volume_points, eos(equiv_parameters[i], volume_points), 'b-')

        plt.plot(selected_volumes, selected_energies, 'rx-', markersize=8)
        plt.xlabel(r'Volume [$\AA^3$]')
        plt.ylabel('Free energy')

    if is_graph_save:
        plt.savefig('helmholtz-volume.pdf')
        plt.close()


# Volume vs Temperature
def volume_temperature( temperatures,
                        equiv_volumes,
                        max_t_index,
                        is_graph_plot,
                        is_graph_save,
                        data=None ):

    w = open('volume-temperature.dat', 'w')
    for v, t in zip(equiv_volumes[:max_t_index], temperatures[:max_t_index]):
        w.write("%25.15f %25.15f\n" % ( t, v ) )
    w.close()
        
    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6

    
    if is_graph_plot or is_graph_save:
        plt.xlabel('Temperature [K]')
        plt.ylabel(r'Volume [$\AA^3$]')
        plt.plot(temperatures[:max_t_index], equiv_volumes[:max_t_index], 'b-')
        # exp
        if not data==None:
            plt.plot( exp_data[0], exp_data[1], 'ro' )

    if is_graph_save:
        plt.savefig('volume-temperature.pdf')
        plt.close()


# Thermal expansion coefficient
def thermal_expansion_coefficient( temperatures,
                                   equiv_volumes,
                                   is_graph_plot,
                                   is_graph_save,
                                   max_t_index ):
    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6

    beta = [0.]
    
    dt = temperatures[1] - temperatures[0]
    for i, t in enumerate(temperatures[1:max_t_index]):
        beta.append((equiv_volumes[i+2]-equiv_volumes[i])/(2*dt)/equiv_volumes[i+1])

    w = open('thermal_expansion.dat', 'w')
    for v, t in zip(beta[:max_t_index], temperatures[:max_t_index]):
        w.write("%25.15f %25.15f\n" % ( t, v ) )
    w.close()


    if is_graph_plot or is_graph_save:
        plt.plot(temperatures[:len(beta)], np.array(beta)*1e6, 'b-')
        plt.xlabel('Temperature [K]')
        plt.ylabel('Thermal expansion x 1.0e6 [K^-1]')

    if is_graph_save:
        plt.savefig('thermal_expansion.pdf')
        plt.close()


# Volume expansion
def volume_expansion(temperatures, equiv_volumes, is_graph_save, max_t_index, data=None, symbol='o'):
    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 3
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6

    l = np.array(equiv_volumes[:max_t_index]) ** (1.0/3)
    for i, t in enumerate(temperatures):
        if abs( t - 300 ) < ( temperatures[1] - temperatures[0] ) / 10:
            l0 = (equiv_volumes[i]) ** (1.0/3)
            break

    w = open('volume_expansion.dat', 'w')
    for i in range(max_t_index):
        w.write("%20.15f %25.15f\n" % (temperatures[i], l[i]/l0 - 1))
    w.close()

    if is_graph_save:
        plt.plot(temperatures[:max_t_index], l / l0 - 1, 'b-')

        # exp
        if not data==None:
            plt.plot( exp_data[0], (exp_data[1] / exp_data[1][0])**(1.0/3) - 1, symbol )

        plt.xlabel('Temperature [K]')
        plt.ylabel(r'Volume expansion $\Delta L/L_0 \, (L=V^{\,1/3})$')
        plt.xlim( temperatures[0], temperatures[max_t_index] )
        plt.savefig('volume_expansion.pdf')
        plt.close()

# G vs T
def gibbs_temperature( temperatures, equiv_energies, max_t_index, is_graph_save ):
    w = open('gibbs-temperature.dat', 'w')
    for i in range(max_t_index):
        w.write("%20.15f %25.15f\n" % (temperatures[i], equiv_energies[i]))
    w.close()

    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6
        plt.xlabel('Temperature [K]')
        plt.ylabel('Gibbs free energy')
        plt.plot(temperatures[:max_t_index], equiv_energies[:max_t_index], 'b-')
        plt.savefig('gibbs-temperature.pdf')
        plt.close()

# Bulk modulus vs Temperature
def bulk_modulus_temperature( temperatures, equiv_bulk_modulus, max_t_index, is_graph_save ):
    w = open('bulk_modulus-temperature.dat', 'w')
    for i in range(max_t_index):
        w.write("%20.15f %25.15f\n" % (temperatures[i], equiv_bulk_modulus[i]))
    w.close()

    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6
        plt.xlabel('Temperature [K]')
        plt.ylabel('Bulk modulus')
        plt.plot(temperatures[:max_t_index], equiv_bulk_modulus[:max_t_index], 'b-')
        plt.savefig('bulk_modulus-temperature.pdf')
        plt.close()

# C_P vs T (numerical derivative)
def heat_capacity_P_numerical( temperatures, equiv_energies, is_graph_save,
                               max_t_index, data=None ):

    cp = []
    g = equiv_energies
    cp.append(0.0)
    cp.append(0.0)
    dt = temperatures[1] - temperatures[0]
    for i in range( 2, max_t_index ):
        cp.append( -(g[i+2] - 2*g[i] + g[i-2])/(dt**2)/4 * temperatures[i] ) 

    w = open('Cp-temperature.dat', 'w')
    for t, val in zip( temperatures[:max_t_index], cp ):
        w.write("%20.15f %20.15f\n" % ( t, val ))
    w.close()

    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6
        plt.xlabel('Temperature [K]')
        plt.ylabel(r'$\mathrm{C_P [J/mol\cdot K]}$')
        plt.plot(temperatures[:max_t_index], np.array(cp[:max_t_index]), 'b-')

        # exp
        if not data==None:
            plt.plot( data[0], data[1], 'ro' )
                
        plt.savefig('Cp-temperature.pdf')
        plt.close()


# C_P vs Temperature (poly fit)
def heat_capacity_P_polyfit( temperatures, volumes, cv, entropy,
                             equiv_volumes, is_graph_save,
                             max_t_index, data=None ):
    
    cp = [0.0]
    dsdv = [0.0]
    wve = open('entropy-volume.dat', 'w')
    wvcv = open('Cv-volume.dat', 'w')
    
    dt = temperatures[1] - temperatures[0]
    for i, t in enumerate(temperatures[1:max_t_index]):
        j = i + 1
        x = equiv_volumes[j]

        parameters = np.polyfit(volumes, cv[j], 4)
        wvcv.write("# temperature %20.15f\n" % (t) )
        wvcv.write("# %20.15f %20.15f %20.15f %20.15f %20.15f\n" % tuple(parameters) )
        cv_p = np.dot(parameters, np.array([x**4, x**3, x**2, x, 1]))

        parameters = np.polyfit(volumes, entropy[j], 4)
        wve.write("# temperature %20.15f\n" % (t) )
        wve.write("# %20.15f %20.15f %20.15f %20.15f %20.15f\n" % tuple(parameters) )
        dsdv_t = np.dot(parameters[:4], np.array([4*x**3, 3*x**2, 2*x, 1]))

        dvdt = (equiv_volumes[j+1] - equiv_volumes[j-1]) / dt / 2

        cp.append(cv_p + t * dvdt * dsdv_t)
        dsdv.append( dsdv_t )

        ve = np.array( [ volumes, cv[j] ] ).transpose()
        vcv = np.array( [ volumes, entropy[j] ] ).transpose()
        for k in range( len( volumes ) ):
            wve.write("%20.15f %20.15f\n" % tuple( ve[k] ))
            wvcv.write("%20.15f %20.15f\n" % tuple( vcv[k] ))
        wve.write("\n\n")
        wvcv.write("\n\n")
        
    wve.close()
    wvcv.close()

    w = open('Cp-temperature_polyfit.dat', 'w')
    for t, val in zip( temperatures[:max_t_index], cp ):
        w.write("%20.15f %20.15f\n" % ( t, val ))
    w.close()

    w = open('dsdv-temperature.dat', 'w') # GPa
    for t, val in zip( temperatures[:max_t_index], dsdv ):
        w.write("%20.15f %20.15f\n" % ( t, val * 1e21 / Avogadro ))
    w.close()

    if is_graph_save:
        plt.rcParams['backend'] = 'PDF'
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.rcParams['axes.labelsize'] = 18
        plt.rcParams['figure.subplot.left'] = 0.15
        plt.rcParams['figure.subplot.bottom'] = 0.15
        plt.rcParams['figure.figsize'] = 8, 6
        plt.xlabel('Temperature [K]')
        plt.ylabel(r'$\mathrm{C_P [J/mol\cdot K]}$')
        plt.plot(temperatures[:max_t_index], np.array(cp))

        # exp
        if not data==None:
            plt.plot( data[0], data[1], 'ro' )

        plt.savefig('Cp-temperature_polyfit.pdf')
        plt.close()
        

from phonopy.units import *
import yaml
try:
    from yaml import CLoader as Loader
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

# Parse options
from optparse import OptionParser
parser = OptionParser()
parser.set_defaults( factor = 1.0,
                     energy_factor = 1.0 / EvTokJmol,
                     volume_factor = 1.0,
                     pressure = 0.0,
                     pressure_factor = EVAngstromToGPa,
                     is_graph_plot = False,
                     is_graph_save = False,
                     is_bulk_modulus_only = False,
                     eos = "vinet",
                     symbol = 'o',
                     cp_filename = None,
                     ve_filename = None,
                     thin_number = 10,
                     t_max = 1000.0 )
parser.add_option("-b", dest="is_bulk_modulus_only",
                  action="store_true",
                  help="Just show Bulk modulus from v-e data")
parser.add_option("--cp", "--heat_capacity", dest="cp_filename", type="string",
                  help="Experimental data for heat capacity Cv", metavar="FILE")
parser.add_option("--factor", dest="factor", type="float",
                  help="Conversion factor that is multiplied with all extensive variables")
parser.add_option("--ef", dest="energy_factor", type="float",
                  help="Conversion factor of energy unit to internal electronic energy")
parser.add_option("--eos", dest="eos",
                  action="store", type="string",
                  help="Choise of EOS among vinet, birch_murnaghan, and murnaghan" )
parser.add_option("-p", "--plot", dest="is_graph_plot",
                  action="store_true",
                  help="Plot data")
parser.add_option("--pf", "--pressure_factor", dest="pressure_factor", type="float",
                  help="Conversion factor of pressure to GPa")
parser.add_option("--pressure", dest="pressure", type="float",
                  help="Pressure in GPa")
parser.add_option("-s", "--save", dest="is_graph_save",
                  action="store_true",
                  help="Save plot data in pdf")
parser.add_option("--symbol", dest="symbol",
                  action="store", type="string",
                  help="Symbol used to plot experiment points" )
parser.add_option("--sparse", dest="thin_number", type="int",
                  help="Thin out the F-V plots of temperature. The value is used as deviser of number of temperature points.")
parser.add_option("--tmax", dest="t_max", type="float",
                  help="Maximum calculated temperature")
parser.add_option("--ve", "--volume_expansion", dest="ve_filename", type="string",
                  help="Experimental data for volume expansion", metavar="FILE")
parser.add_option("--vf", "--volume_factor", dest="volume_factor", type="float",
                  help="Conversion factor of volume to A^3")
(options, args) = parser.parse_args()

####################
# Data preparation #
####################

if options.is_graph_save or options.is_graph_plot:
    import matplotlib.pyplot as plt

# read data from files
volumes, electronic_energies = \
    read_v_e( args[0],
              options.factor,
              options.volume_factor,
              options.pressure )

# Choose EOS
if options.eos == "birch_murnaghan":
    print "# Third-order Birch-Murnaghan EOS"
    eos = birch_murnaghan
    residuals = residuals_birch_murnaghan
elif options.eos == "murnaghan":
    print "# Murnaghan EOS"
    eos = murnaghan
    residuals = residuals_murnaghan
else:
    print "# Vinet EOS"
    eos = vinet
    residuals = residuals_vinet

# Show bulk modulus of v-e data
if options.is_bulk_modulus_only:
    ev, ee, eb, ep = fit_to_eos( volumes, electronic_energies,
                                 residuals )
    print "Volume: ", ev
    print "Energy: ", ee
    print "Bulk modulus: ", eb * options.pressure_factor
    print "Parameters: %f %f %f %f" % tuple( ep )
    if options.is_graph_plot:
        plt.plot(volumes, electronic_energies, 'bo', markersize=4)
        volume_points = np.linspace(min(volumes), max(volumes), 201)
        plt.plot(volume_points, eos(ep, volume_points), 'b-')
        plt.show()
    sys.exit(0)

# Check number of files
if not len( volumes ) == len( args[1:] ):
    print "The umber of thermal_properites.yaml files (%d) is inconsisten with" % len(args[1:])
    print "the number of e-v data (%d)." % len( volumes )
    sys.exit(1)

# read data from thermal_properties
temperatures, cv, entropy, fe_phonon = \
    read_data_from_thermal_properties( args[1:(len(volumes)+1)],
                                       options.factor )

##########################
# Analyzing and plotting #
##########################

# Index the maximum temperature
max_t_index = len( temperatures ) - 2    
for i, t in enumerate( temperatures ): 
    if t > options.t_max + 1e-5:
        max_t_index = i
        if max_t_index > len( temperatures ) - 2:
            print "At least two more temperature points in thermal_properties.yaml"
            print "have to exist in higher temperatures than tmax."
            sys.exit(1)
        break
    
####################
# Do fitting       #
####################
equiv_volumes, equiv_energies, equiv_bulk_modulus, \
    equiv_parameters, free_energies = run_fitting( volumes,
                                                   electronic_energies,
                                                   temperatures,
                                                   cv,
                                                   entropy,
                                                   fe_phonon,
                                                   max_t_index,
                                                   options.pressure_factor,
                                                   residuals )


# Volume vs Helmholts free energy
if options.is_graph_plot and ( not options.is_graph_save ):
    plt.subplot(1, 3, 1)

helmholtz_volume( temperatures,
                  volumes,
                  free_energies,
                  equiv_volumes,
                  equiv_energies,
                  equiv_parameters,
                  max_t_index,
                  options.is_graph_plot,
                  options.is_graph_save,
                  eos=eos,
                  thin_number=options.thin_number )

# Volume vs Temperature
if options.is_graph_plot and ( not options.is_graph_save ):
    plt.subplot(1, 3, 2)

if options.ve_filename == None:
    exp_data = None
else:
    exp_data = parse_ve( options.ve_filename )

volume_temperature( temperatures,
                    equiv_volumes,
                    max_t_index,
                    options.is_graph_plot,
                    options.is_graph_save,
                    exp_data )

# Thermal expansion coefficient
if options.is_graph_plot and ( not options.is_graph_save ):
    plt.subplot(1, 3, 3)

thermal_expansion_coefficient( temperatures,
                               equiv_volumes,
                               options.is_graph_plot,
                               options.is_graph_save,
                               max_t_index )

# Plot on display
# - Volume vs Helmholtz free energy
# - Volume vs Temperature
# - Thermal expansion coefficient
if options.is_graph_plot and ( not options.is_graph_save ):
    plt.show()

# Volume expansion
if options.ve_filename == None:
    exp_data = None
else:
    exp_data = parse_ve( options.ve_filename )
volume_expansion( temperatures,
                  equiv_volumes,
                  options.is_graph_save,
                  max_t_index,
                  exp_data,
                  options.symbol )

# G vs Temperature
gibbs_temperature( temperatures,
                   equiv_energies,
                   max_t_index,
                   options.is_graph_save )

# C_P vs Temperature
if options.cp_filename == None:
    exp_data = None
else:
    exp_data = parse_cp( options.cp_filename )

heat_capacity_P_numerical( temperatures,
                           np.array( equiv_energies ) / options.energy_factor * 1000,
                           options.is_graph_save,
                           max_t_index,
                           exp_data )

# C_P vs Temperature (poly fit)
if options.cp_filename == None:
    exp_data = None
else:
    exp_data = parse_cp( options.cp_filename )
            
heat_capacity_P_polyfit( temperatures,
                         volumes,
                         cv,
                         entropy,
                         equiv_volumes,
                         options.is_graph_save,
                         max_t_index,
                         exp_data )

# Bulk modulus vs Temperature
bulk_modulus_temperature( temperatures,
                          np.array( equiv_bulk_modulus ) * options.pressure_factor,
                          max_t_index,
                          options.is_graph_save )
