#!/opt/python/python-2.6.5/bin/python

# Copyright (C) 2011 Atsushi Togo
#
# This file is part of phonopy.
#
# Phonopy is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Phonopy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with phonopy.  If not, see <http://www.gnu.org/licenses/>.

import numpy as np

try:
    import yaml
except ImportError:
    print "You need to install python-yaml."
    exit(1)
    
try:
    from yaml import CLoader as Loader
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

from phonopy.units import VaspToTHz



def get_plot_data( data ):
    segment_positions = []
    frequencies = []
    distances = []
    npoints = data['nqpoint'] / data['npath']

    for j, v in enumerate( data['phonon'] ):
        frequencies.append( [ f['frequency'] for f in v['band']  ] )
        distances.append( v['distance'] )
        
        if j % npoints == 0:
            segment_positions.append( v['distance'] )

    return distances, frequencies, segment_positions



# Parse options
from optparse import OptionParser
parser = OptionParser()
parser.set_defaults( factor = 1.0,
                     is_vertial_line = False,
                     is_gnuplot = False,
                     output_filename = None,
                     show_legend = False,
                     title = None,
                     f_max = None, 
                     f_min = None )
parser.add_option("--factor", dest="factor", type="float",
    		help="Conversion factor to favorite frequency unit")
parser.add_option("--line", "-l", dest="is_vertial_line",
                  action="store_true",
                  help="Vertial line is drawn at between paths")
parser.add_option("--gnuplot", dest="is_gnuplot",
                  action="store_true",
                  help="Output in gnuplot data style")
parser.add_option("-o", "--output", dest="output_filename",
                  action="store", type="string",
                  help="Output filename of PDF plot")
parser.add_option("-t", "--title", dest="title",
                  action="store", type="string",
                  help="Title of plot")
parser.add_option("--fmax", dest="f_max", type="float",
                  help="Maximum frequency plotted")
parser.add_option("--fmin", dest="f_min", type="float",
                  help="Minimum frequency plotted")
parser.add_option("--legend", dest="show_legend",
                  action="store_true",
                  help="Show legend")
(options, args) = parser.parse_args()

if not options.is_gnuplot:
    import matplotlib.pyplot as plt


colors = ['b-', 'g-', 'r-', 'c-', 'm-', 'y-', 'k-', 'b--', 'g--', 'r--', 'c--', 'm--', 'y--', 'k--']
count = 0

if len( args ) == 0:
    filenames = ['band.yaml']
else:
    filenames = args

if options.is_gnuplot:
    print "# distance  frequency (bands are separated by blank lines)"

for i, filename in enumerate( filenames ):

    string = open(filename).read()
    data = yaml.load(string, Loader=Loader)

    distances, frequencies, segment_positions = get_plot_data( data )

    if options.is_gnuplot:
        print "# segments:",
        for v in segment_positions:
            print "%10.8f" % v,
        print "%10.8f" % distances[-1]
        
    elif options.is_vertial_line and len( filenames ) == 1:
        for v in segment_positions[1:]:
            plt.axvline( x=v, linewidth=0.5, color='b' )


    for j, freqs in enumerate( np.array(frequencies).transpose() ):
        if options.is_gnuplot:
            for d, f in zip( distances, freqs * options.factor ):
                print d,f
            print
        else:
            if j==0:
                plt.plot(distances, freqs * options.factor, colors[i], label=filename)
            else:
                plt.plot(distances, freqs * options.factor, colors[i])

    if options.is_gnuplot:
        print

    
if not options.is_gnuplot:
    plt.ylabel('Frequency')
    plt.xlabel('Wave vector')
    plt.xlim( distances[0], distances[-1] )
    if not options.f_max == None:
        plt.ylim( ymax = options.f_max )
    if not options.f_min == None:
        plt.ylim( ymin = options.f_min )
    plt.axhline(y=0, linestyle=':', linewidth=0.5, color='b')
    plt.xticks( [] )
    
    if not options.title == None:
        plt.title( options.title )

    if options.show_legend:
        plt.legend()
    
    if not options.output_filename == None:
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['font.family'] = 'serif'
        plt.savefig(options.output_filename)
    else:
        plt.show()
    

