@@decimal_only
Topic   : decimal_only
Type    : Keyword
Default : Use fractions in output where appropriate.
Use     : Specifying this keyword suppresses the use of fractions in 
        : output from GULP.
@@maths
Topic   : maths
Type    : Option
Format  : maths <eispack/lapack> <nodivide>
Units   : none
Default : lapack with divide and conquer
Use     : Selects whether to use the Eispack or Lapack maths libraries
        : for finding the eigenvectors/eigenvalues of the dynamical
        : matrix. When compiled from source the Eispack library appears
        : to be significantly faster than straight Lapack, but if an
        : optimised maths library is linked instead of lapack.o/blas.o
        : then this may not be the case. However, the divide and conquer
        : form of Lapack is faster than Eispack and so this is now the
        : default. There is the chance of some loss of precision, and so
        : the other options are there for validation purposes.
See also: phonon
@@plumed
Topic   : plumed
Type    : Option
Format  : plumed <plumed_file_name> 
Units   : none
Default : plumed_file_name = plumed.dat
Use     : By specifying this option GULP tried to use the plumed
        : plug-in with the input for this coming from an external 
        : file.
@@hideshells
Topic   : hideshells
Type    : Keyword
Default : Show shell coordinates and other details in the output.
Use     : Causes the output of details of the shells to be suppressed in the output.
See also: noaddshells
@@noaddshells
Topic   : noaddshells
Type    : Keyword
Default : Add shells where they are missing in the input.
Use     : If specified then no shells will be added.
See also: hideshells
@@cosmo
Topic   : cosmo
Type    : Keyword
Use     : Causes a solvation energy calculation to be performed
        : using the COSMO model. For details of the method see:
        :
        : A. Klamt and G. Schueuermann, JCS Perkin Trans 2, 799 (1993)
        :
        : Here the system is immersed in an effective continuum
        : solvent with a user-specified dielectric constant and
        : solvent molecule radius. A solvent-accessible surface 
        : is then constructed around the molecule/surface where
        : charges are induced that interact with the underlying
        : material.
See also: pointsperatom, segmentsperatom, solventepsilon, 
        : solventradius, solventrmax, vdw, nosasinitevery,
        : cosmoframe, cosmoshape, rangeforsmooth, qsas,
        : sasparticles, qiterative, cwolf, pureQ, cosmic
@@cosmic
Topic   : cosmic
Type    : Keyword
Use     : Invokes a modified form of the COSMO algorithm that
        : imposes the constraint of an Integral Charge (normally
        : zero) on the system. This is important for periodic
        : systems where charge neutral is a requirement for a
        : converged lattice sum.
See also: pointsperatom, segmentsperatom, solventepsilon,
        : solventradius, solventrmax, vdw, nosasinitevery,
        : cosmoframe, cosmoshape, rangeforsmooth, qsas,
        : sasparticles, qiterative, cwolf, pureQ, cosmo
@@cwolf
Topic   : cwolf
Type    : Option
Format  : cwolf <eta> <rmax>
Units   : eta in inverse Angstroms and rmax in Angstroms
Default : none
Use     : The particle - particle Coulomb interaction matrix for
        : the COSMO/COSMIC method is determined using the Wolf
        : sum in real space. This option controls the eta value
        : and cutoff for this summation. Small eta and large
        : cutoff leads to convergence towards the Ewald / Parry
        : result for periodic systems.
See also: cosmo, cosmic, pureQ
@@pureQ
Topic   : pureQ
Type    : Keyword
Use     : By default, a Wolf sum is used to evaluate the Coulomb
        : potential in periodic systems when applied to the SAS
        : - SAS interaction matrix (A) in COSMO/COSMIC. For 
        : consistency, this is retained in 0-D where it is not
        : necessary. This keyword causes a pure 1/r Coulomb
        : potential to be used instead.
See also: cosmo, cosmic, cwolf
@@sasparticles
Topic   : sasparticles
Type    : Option
Format  : sasparticles <cores_only/both_cores_and_shells>
Default : cores_only
Use     : In all calculations the cores define the position of the
        : solvent accessible surface. This option controls whether
        : the potential is determined by the sum of the core and
        : shell charges at the core position (cores_only) or by 
        : the explicit potential due to both the core and shell 
        : (both)
See also: cosmo, sasexclude
@@sasexclude
Topic   : sasexclude
Type    : Option
Format  : sasexclude natom_min <natom_max>
Default : Include all particles as specified by sasparticles option
Use     : Allows the user to specifically exclude a range of atoms 
        : from being involved in determining the solvent accessible
        : surface.
        :
        : e.g.  
        : sasexclude 10
        :
        : would exclude atom 10 from contributing to the SAS, while
        : 
        : sasexclude 10 20
        :
        : would exclude atoms from 10 to 20 from the SAS. Note that 
        : the atom numbers are those in the full cell rather than 
        : the asymmetric unit.
See also: sasparticles
@@qiterative
Topic   : qiterative
Type    : Keyword
Use     : Invokes the use of an iterative method to solve for charges in a
        : variable charge scheme, rather than matrix inversion. This applies
        : both COSMO/COSMIC calculations, where the charge is induced on the
        : solvent accessible surface, and to ReaxFF. This algorithm is usually
        : superior for large systems, especially in the case of ReaxFF where
        : it offers linear-scaling. For parallel calculations this option should
        : definitely be used.
        : NB: To obtain precise second derivatives by finite differences then
        : it is best NOT to use this keyword since it will generate more numerical
        : noise. 
See also: cosmo, cosmic, reaxff_mu, reaxff_chi, reaxff_gamma
@@rangeforsmooth
Topic   : rangeforsmooth
Type    : Option
Format  : rangeforsmooth <range>
Units   : Angstroms
Default : 0.0
Use     : Smooths the inclusion of points on the solvent-accessible
        : surface to make the energy surface more continuous.
See also: cosmo, pointsperatom, segmentsperatom
@@cosmoshape
Topic   : cosmoshape
Type    : Option
Format  : cosmoshape <octahedron/dodecahedron>
Units   : none
Default : octahedron
Use     : Specifies the basic polyhedron used to construct the SAS
        : used in COSMO. The original approach used a dodecahedron
        : but an octahedron is more symmetric.
See also: cosmoframe, pointsperatom, segmentsperatom
@@cosmoframe
Topic   : cosmoframe
Type    : Option
Format  : cosmoframe
        : M(1,1) M(2,1) M(3,1)
        : M(1,2) M(2,2) M(3,2)
        : M(1,3) M(2,3) M(3,3)
Units   : none
Default : Current local frame 
Use     : Specifies the local frame for the system as used in a
        : previous run so that a job can be restarted consistently.
See also: cosmo
@@qsas
Topic   : qsas
Type    : Keyword
Use     : Causes the charges on the segments of the solvent 
        : accessible surface to be output, as well as the total
        : charge and dipole(s).
See also: cosmo
@@nosasinitevery
Topic   : nosasinitevery
Type    : Keyword
Use     : Causes the SAS calculation not to be reinitialised at
        : every step of the calculation. It is generally recommended
        : to reinitialise to ensure that calculation results are
        : independent of the starting point. It also avoids potential
        : energy surface discontinuities due to the history of segment
        : creation.
See also: cosmo
@@pointsperatom
Topic   : pointsperatom
Type    : Option
Format  : pointsperatom <no. of points per atom>
Default : 1082 (for dodecahedron) / (974 for octahedron)
Units   : None
Use     : Specifies the number of points per atom for the basic
        : sphere used to construct the solvent-accessible surface
        : in a COSMO calculation. The value must conform to the
        : following formula :
        :
        : Dodecahedron
        :
        : pointsperatom = 10*(3**k)*(4**l)+2
        :
        : Octahedron
        :
        : pointsperatom = 4*(3**k)*(4**l)+2
        :
        : where k and l are integers. The larger the value of 
        : this parameter, the more precise and expensive the
        : calculation will be.
See also: cosmo, segmentsperatom, solventepsilon, solventradius, 
        : solventrmax, vdw, cosmoshape, rangeforsmooth
@@segmentsperatom
Topic   : segmentsperatom
Type    : Option
Format  : segmentsperatom <no. of segments per atom> <no. per H atom>
Default : 92 (dodecahedron) / 110 (octahedron)
Units   : None
Use     : Specifies the number of segments per atom for the 
        : solvent-accessible surface in a COSMO calculation. 
        : The points per atom are grouped together to form 
        : the segments. Note it is possible to specify a
        : different value for H. However, if this is omitted
        : then it defaults to the same value as for other atoms.
See also: cosmo, pointsperatom, solventepsilon, solventradius, 
        : solventrmax, vdw, cosmoshape, rangeforsmooth
@@solventepsilon
Topic   : solventepsilon
Type    : Option
Format  : solventepsilon <dielectric constant OR solvent_name>
Default : 1.0
Units   : None
Use     : Specifies the dielectric constant of the solvent to
        : be used in a COSMO solvation energy calculation. Note
        : that values must be greater than 1.0! 
        : The values of the dielectric constant for use in
        : COSMO are known for the following solvents :
        :
        : solvent_name               dielectric_constant
        : ------------               -------------------
        :
        :  water                            78.400
        :  acetone                          20.700
        :  benzene                           2.274
        :  chlorobenzene                     5.621
        :  chloroform                        4.806
        :  cyclohexane                       2.015
        :  ethylether                        4.335
        :  methanol                         32.630
        :  tetrachloromethane                2.228
        :  conductor                      1000.000
        :
See also: cosmo, pointsperatom, segmentsperatom, solventradius, 
        : solventrmax, vdw
@@solventradius
Topic   : solventradius
Type    : Option
Format  : solventradius <Rsolv> <deltaRsolv>
Defaults: 1.0 / 0.1 Angstroms
Units   : Angstroms
Use     : Specifies the radius of the solvent molecule, Rsolv, 
        : and the distance of the screening centre from the
        : molecular centre, deltaRsolv, for use in a COSMO
        : screening calculation. Note that these two values
        : are the parameters for each solvent that must be
        : determined in order to obtain accurate solvation
        : energies.
See also: cosmo, pointsperatom, segmentsperatom, solventepsilon, 
        : solventrmax, vdw
@@solventrmax
Topic   : solventrmax
Type    : Option
Format  : solventrmax <maximum distance> <smoothing range>
Defaults: 10.0 / 1.0 Angstroms 
Units   : Angstroms
Use     : Maximum distance parameter used by COSMO solvation 
        : model. Below this value, elements of the A matrix
        : are evaluated at the level of sub-points, while
        : beyond this they are evaluated between segments,
        : which is more approximate. The smoothing range
        : is used to taper the two sides of the cut-off 
        : together continuously to avoid problems during
        : optimisation.
See also: cosmo, pointsperatom, segmentsperatom, solventepsilon, 
        : solventradius, vdw
@@numerical
Topic   : numerical
Type    : Keyword
Use     : Forces the use of numerical second derivatives for property evaluation 
        : even when analytic second derivatives are available. This is only needed
        : for debugging purposes.
See also: property, sfinite, pfinite
@@sfinite
Topic   : sfinite
Type    : Option
Format  : sfinite deltaC deltaS
Default : 0.00001 / 0.00001
Units   : Angstroms and none for deltaC and deltaS, respectively.
Use     : Sets the finite difference intervals to be used for the numerical
        : evaluation of properties by central finite differencing of the
        : analytic first derivatives. deltaC is used for the Cartesian
        : displacements while deltaS controls the change in strain.
See also: numerical, pfinite
@@pfinite
Topic   : pfinite
Type    : Option
Format  : pfinite delta
Default : 0.00001 
Units   : Angstroms 
Use     : Sets the finite difference intervals to be used for the numerical
        : evaluation of phonons by central finite differencing of the
        : analytic first derivatives. 
See also: numerical, sfinite
@@reaxfftol
Topic   : reaxfftol
Type    : Option
Format  : reaxfftol bomin <anglemin> <angleprod> <hbondmin> <hbonddist> <torsionprod>
Use     : This command sets a number of tolerances that control the behaviour of ReaxFF.
        :
        : bomin      - the general threshold for bond orders in pairwise terms
        : anglemin   - the threshold for bond orders in valence, penalty and 3-body conjugation
        : angleprod  - a threshold for the product of bond orders (1-2 x 2-3, where 2 = pivot)
        :              Hard coded in original program to 0.001, but this leads to discontinuities
        : hbondmin   - threshold for A-H bond order in a hydrogen bond. Hard coded to 0.01 in 
        :              original code.
        : hbonddist  - threshold for A...B distance in A-H...B hydrogen bond. Hard coded to 
        :              7.5 Ang in original code.
        : torsionprod- a threshold for the product of bond orders (1-2 x 2-3 x 3-4) for torsion
        :              interactions.
        :
See also: reaxffcutoff
@@norxQ
Topic   : norxQ
Type    : Keyword
Use     : If specified then this turns off the calculation of charges within ReaxFF
See also: reaxff_chi, reaxff_mu, reaxff_gamma, qiterative
@@reaxff0_bond
Topic   : reaxff0_bond
Type    : Option
Format  : reaxff0_bond p_boc1 p_boc2 <2 x flags>
@@reaxff0_over
Topic   : reaxff0_over
Type    : Option
Format  : reaxff0_over p_ovun3 p_ovun4 p_ovun6 p_ovun7 p_ovun8 <5 x flags>
@@reaxff0_valence
Topic   : reaxff0_valence
Type    : Option
Format  : reaxff0_valence p_val7 p_val8 p_val9 p_val10 <4 x flags>
@@reaxff0_penalty
Topic   : reaxff0_penalty
Type    : Option
Format  : reaxff0_penalty p_pen2 p_pen3 p_pen4 <3 x flags>
@@reaxff0_torsion
Topic   : reaxff0_torsion
Type    : Option
Format  : reaxff0_torsion p_tor2 p_tor3 p_tor4 p_cot2 <4 x flags>
@@reaxff0_vdw
Topic   : reaxff0_vdw
Type    : Option
Format  : reaxff0_vdw p_vdw1 <1 x flag>
@@reaxff0_lonepair
Topic   : reaxff0_lonepair
Type    : Option
Format  : reaxff0_lonepair p_lp1 <1 x flag>
@@reaxff1_radii
Topic   : reaxff1_radii
Type    : Option
Format  : reaxff1_radii
        : species <core/shell> r_sigma r_pi r_pipi <3 x flags>
Default : None
Use     : Specifies the radii for a species that are to be used in the ReaxFF bond order
        : calculation. Here the uncorrected bond order is given by:
        :
        : BO' = exp(p_bo1*(r/r_sigma)**p_bo2) + exp(p_bo3*(r/r_pi)**p_bo4) +
        :       exp(p_bo5*(r/r_pipi)**p_bo6) 
        :
        : The remaining parameters, p_bo1 - p_bo6, are input via the reaxff2_bo option.
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff2_bo
@@reaxff1_valence
Topic   : reaxff1_valence
Type    : Option
Format  : reaxff1_valence
        : species <core/shell> Val_normal Val_boc Val_lp Val_angle <4 x flags>
Default : None
Use     : Specifies the valence states for a species that are to be used in the ReaxFF 
        : calculation of delta values. The value of delta' (eqn 3a) is given by:
        :
        : delta'(i) = - Val_normal(i) + sum(j=1->neigh(i)) BO_ij'
        :
        : There is a second valence used for delta'_boc (eqn 3b):
        :
        : delta'_boc(i) = - Val_boc(i) + sum(j=1->neigh(i)) BO_ij'
        :
        : There is a third valence used for delta_e (eqn 7) as part of the lone pair
        : energy:
        :
        : delta_e(i) = - Val_lp(i) + sum(j=1->neigh(i)) BO_ij
        :
        : There is a fourth valence used for delta_angle (eqn 13e):
        :
        : delta_angle(i) = - Val_angle(i) + sum(j=1->neigh(i)) BO_ij
        :
See also: reaxff1_radii, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse
@@reaxff1_over
Topic   : reaxff1_over
Type    : Option
Format  : reaxff1_over
        : species <core/shell> p_boc3 p_boc4 p_boc5 p_ovun2 <4 x flags>
Default : None
Use     : Specifies the parameters for the species wise overcoordination parameters.
        : Parameters p_boc3, p_boc4, p_boc5 are used to compute the functions f4 & f5
        : that correct the bond order (eqns 4e & 4f). The final parameter, p_ovun2, is
        : part of the overcoordination energy (eqn 11a). 
See also: reaxff1_radii, reaxff1_valence, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse
@@reaxff1_under
Topic   : reaxff1_under
Type    : Option
Format  : reaxff1_under
        : species <core/shell> p_ovun5 <1 x flag>
Default : None
Use     : Specifies the parameter for the species-wise undercoordination parameters.
        : p_ovun5 scales the undercoordination energy (eqn 12).
See also: reaxff1_radii, reaxff1_valence, reaxff1_over, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_include_under
@@reaxff1_include_under
Topic   : reaxff1_include_under
Type    : Option
Format  : reaxff1_include_under
        : species <0/1>
Default : 1 (yes) for 1st row elements and 0 (no) for everything else
Use     : In the ReaxFF formalism the under coordination formalism due to pi bonding
        : is modified for elements with a mass greater than 21 amu. This option 
        : allows the user to select which form of the under coordination correction
        : is applied for each element. Here a value of 1 => first row formula and 0
        : implies the 2nd row form. No other values are allowed.
See also: reaxff1_under
@@reaxff1_lonepair
Topic   : reaxff1_lonepair
Type    : Option
Format  : reaxff1_lonepair
        : species <core/shell> n_lp_opt p_lp2 <2 x flags>
Default : None
Use     : Specifies the parameters for the species-wise lone pair energy parameters.
        : n_lp_opt is the optimal number of lone pairs used to construct delta_lp (eqn 9).
        : p_lp2 is the parameter that scales the lone pair energy for each atom (eqn 10).
See also: reaxff1_radii, reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_angle
        : reaxff1_morse
@@reaxff1_angle
Topic   : reaxff1_angle
Type    : Option
Format  : reaxff1_angle
        : species <core/shell> p_val3 p_val5 <2 x flags>
Default : None
Use     : Specifies the parameters for the species-wise angle parameters.
        : p_val3 is used in the calculation of the ReaxFF function f7 (eqn 13b).
        : p_val5 is used in the calculation of the ReaxFF function f8 (eqn 13c).
See also: reaxff1_radii, reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_morse
        : reaxff1_morse
@@reaxff1_morse
Topic   : reaxff1_morse
Type    : Option
Format  : reaxff1_morse <au/kcal/kjmol>
        : species <core/shell> alpha Dij rvdw gamma_w <4 x flags>
Default : None
Use     : Specifies the parameters for the species-wise morse parameters for the
        : VDW energy (eqns 21a and 21b). In the final morse potential,
        : Dij = sqrt(Dij(i)*Dij(j)), alpha_ij = sqrt(alpha(i)*alpha(j)),
        : r_vdw = 2*sqrt(rvdw(i)*rvdw(j))
See also: reaxff1_radii, reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_angle
        : reaxff2_bo, reaxff2_bond
@@reaxff_chi
Topic   : reaxff_chi
Type    : Option
Format  : reaxff_chi
        : species <core/shell> chi <1 x flag>
Default : None
Use     : Specifies the electronegativity for the species in the ReaxFF charge equilibration
        : scheme.
See also: reaxff_mu, reaxff_gamma, qiterative, reaxff_qshell, norxQ
@@reaxff_mu
Topic   : reaxff_mu
Type    : Option
Format  : reaxff_mu
        : species <core/shell> mu <1 x flag>
Default : None
Use     : Specifies the hardness for the species in the ReaxFF charge equilibration
        : scheme.
See also: reaxff_chi, reaxff_gamma, qiterative, reaxff_qshell, norxQ
@@reaxff_gamma
Topic   : reaxff_gamma
Type    : Option
Format  : reaxff_gamma
        : species <core/shell> gamma <1 x flag>
Default : None
Use     : Specifies the shielding parameter gamma for the species in the ReaxFF charge equilibration
        : scheme.
See also: reaxff_chi, reaxff_mu, qiterative, reaxff_qshell, norxQ
@@reaxff_r12
Topic   : reaxff_r12
Type    : Option
Format  : reaxff_r12
        : species <core/shell> r12 <1 x flag>
Default : None
Use     : Test modification option at present.
See also: reaxff_chi, reaxff_mu, qiterative, reaxff_qshell, reaxff_r12
@@qextrapolate
Topic   : qextrapolate
Type    : Keyword
Use     : Try to extrapolate the charges forward during MD with the reaxFF algorithm. Only works
        : when qiterative is also specified.
See also: reaxff_chi, reaxff_mu, reaxff_gamma, reaxff_qshell, qiterative
@@reaxff_qshell
Topic   : reaxff_qshell
Type    : Option
Format  : reaxff_qshell
        : species <core/shell> dMu Qs beta <3 x flags>
Default : dMu = 0.0, Qs & beta no default
Use     : Specifies the optional shell structure modifier for the ReaxFF charges.
        : This term adds an extra energy term to the electronegativity equalisation
        : scheme that suppresses charges above a value Qs. This can often occur due
        : to shell structure that breaks the validity of the harmonic charge expansion.
        : The energy penalty takes the form of a fourth-order polynomial:
        :
        : E_shell(q) = dMu*(q - Qs)**4 for q > Qs ; 0 for q < Qs
        :
See also: reaxff_chi, reaxff_mu, qiterative, reaxff_gamma
@@reaxff2_bo
Topic   : reaxff2_bo
Type    : Option
Format  : reaxff2_bo <over> <bo13>
        : species1 <core/shell> species2 <core/shell> p_bo1 p_bo2 p_bo3 p_bo4 p_bo5 p_bo6 <6xflags>
Default : None
Use     : Specifies the pairwise parameters between species that are to be used in the 
        : ReaxFF bond order calculation. Here the uncorrected bond order is given by:
        :
        : BO' = exp(p_bo1*(r/r_sigma)**p_bo2) + exp(p_bo3*(r/r_pi)**p_bo4) +
        :       exp(p_bo5*(r/r_pipi)**p_bo6) 
        :
        : The remaining parameters, r_sigma, r_pi, r_pipi, are input via the reaxff1_radii option.
        : The two sub-option words control if the bond order is corrected:
        :   reaxff2_bo over      => correct for overcoordination using f1
        :   reaxff2_bo bo13      => correct for 1-3 terms using f4 and f5
        :   reaxff2_bo over bo13 => correct for overcoordination using f1 and 1-3 terms using f4 and f5
        :
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bond, reaxff2_over, reaxff2_morse, reaxff2_pen
@@reaxff2_bond
Topic   : reaxff2_bond
Type    : Option
Format  : reaxff2_bond
        : species1 <core/shell> species2 <core/shell> De_sigma De_pi De_pipi p_be1 p_be2 <5xflags>
Default : None
Use     : Specifies the pairwise parameters between species that are to be used in the 
        : ReaxFF bond order energy. Here the bond order energy is given by:
        :
        : E_bond = - De_sigma*BO_sigma*exp(p_be1*(1-(BO_sigma)**p_be2)) - De_pi*BO_pi 
        :          - De_pipi*BO_pipi
        :
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_over, reaxff2_morse, reaxff2_pen
@@reaxff2_over
Topic   : reaxff2_over
Type    : Option
Format  : reaxff2_over
        : species1 <core/shell> species2 <core/shell> p_ovun1 <1 x flag>
Default : None
Use     : Specifies the pairwise parameters between species that are to be used in the 
        : ReaxFF overcoordination energy. Here the overcoordination energy is given by:
        :
        : E_over_i = (sum(j=>neigh(i)) p_ovun1(ij).De_sigma.BO_ij).delta_lpcorr(i)
        :            -------------------------------------------------------------
        :            (delta_lpcorr(i) + Val_i) * (1 + exp(p_ovun2*delta_lpcorr(i))
        :
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_morse, reaxff2_pen
@@reaxff2_morse
Topic   : reaxff2_morse
Type    : Option
Format  : reaxff2_morse
        : species1 <core/shell> species2 <core/shell> De alpha r0 r_sigma r_pi r_pipi <6 x flags>
Default : None
Use     : Specifies pairwise Morse potential parameters for ReaxFF
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff2_pen
@@reaxff2_pen
Topic   : reaxff2_pen
Type    : Option
Format  : reaxff2_pen
        : species1 <core/shell> species2 <core/shell> p_pen1 p_pen2 p_pen3 <3 x flags>
Default : None
Use     : Specifies pairwise penalty energy parameters for ReaxFF. The penalty energy is
        : given by: 
        :
        : Epen = sum [ p_pen1 * (BO_ij - delta_i - p_pen2*delta**4 - p_pen3)**2]
        :
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff2_morse
@@reaxff3_angle
Topic   : reaxff3_angle
Type    : Option
Format  : reaxff3_angle <au/kcal/kjmol>
        : species1 <core/shell> species2 <core/shell> species3 <core/shell> &
        :    theta_00 p_val1 p_val2 p_val4 p_val7 <p_val6> <6 x flags>
Default : None
Use     : Specifies the parameters that determine the angular valence energy that depend
        : on a triad of species in the ReaxFF force field. Here species1 is the pivot 
        : atom of the three-body like term. Here the valence energy is given by:
        : 
        : E_val = f7(BO_12)*f7(BO_13)*f8(delta(1))*p_val1*(1-exp(-p_val2*(theta_0 - theta)**2))
        :
        : The function f7 is given by:
        :
        : f7(BO) = 1 - exp(-p_val3*BO**p_val4)
        :
        : If not explicitly given, the value of p_val6 is taken from the global value.
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff3_pen
        : reaxff3_conjugation
@@reaxff3_pen
Topic   : reaxff3_pen
Type    : Option
Format  : reaxff3_pen <au/kcal/kjmol>
        : species1 <core/shell> species2 <core/shell> species3 <core/shell> p_pen1 <1 x flag>
Default : None
Use     : Specifies the parameter that determines the angular penalty energy that depends
        : on a triad of species in the ReaxFF force field (eqn 14a). Here species1 is the pivot 
        : atom of the three-body like term. 
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff3_angle
        : reaxff3_hbond, reaxff3_conjugation, reaxff4_torsion
@@reaxff3_conjugation
Topic   : reaxff3_conjugation
Type    : Option
Format  : reaxff3_conjugation <au/kcal/kjmol>
        : species1 <core/shell> species2 <core/shell> species3 <core/shell> &
        :    p_coa1 p_coa2 p_coa3 p_coa4 <4 x flags>
Default : None
Use     : Specifies the parameters that determine the three-body conjugation energy that depend
        : on a triad of species in the ReaxFF force field. Here species1 is the pivot 
        : atom of the three-body like term. Here the valence energy is given by:
        : 
        : E_val = p_coa1*(1/(1+exp(p_coa2*delta_1_val)))*
        :         exp(-p_coa3*(-BO_12 + sum(n=1->neighbours of 2) BO_2n))*
        :         exp(-p_coa3*(-BO_13 + sum(n=1->neighbours of 3) BO_3n))*
        :         exp(-p_coa4*(BO_12 - 1.5)**2)*exp(-p_coa4*(BO_13 - 1.5)**2)
        :
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff3_angle
        : reaxff3_hbond, reaxff3_angle, reaxff4_torsion
@@reaxff4_torsion
Topic   : reaxff4_torsion
Type    : Option
Format  : reaxff4_torsion <au/kcal/kjmol>
        : spec1 <core/shell> spec2 <core/shell> spec3 <core/shell> spec4 <core/shell> &
        :    V1  V2  V3  p_tor1 p_cot1 <5 x flags>
Default : None
Use     : Specifies the parameters that determine the torsional energy that depends
        : on a quartet of species in the ReaxFF force field (eqn 16a). Here the species
        : are connected 1-2-3-4 to yield the relevant torsional angle.
        : V1, V2, V3 are the barrier heights for different powers of the cosine of phi.
        : p_tor1 is a scaling factor for an exponent in the V2 contribution.
        : p_cot1 is a scaling factor for the conjugation energy (eqn 17a).
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff3_angle
        : reaxff3_pen, reaxff4_torsion
@@reaxff3_hbond
Topic   : reaxff3_hbond
Type    : Option
Format  : reaxff3_hbond <au/kcal/kjmol>
        : species1 <core/shell> species2 <core/shell> species3 <core/shell> r0_hb p_hb1 &
        :   p_hb2 p_hb3 <4 x flags>
Default : None
Use     : Specifies the parameter that determines the hydrogen bonding energy that depends
        : on a triad of species in the ReaxFF force field (eqn 18). Here species1 is the pivot 
        : atom of the three-body like term and is usually hydrogen. 
See also: reaxff1_valence, reaxff1_over, reaxff1_under, reaxff1_lonepair, reaxff1_angle
        : reaxff1_morse, reaxff1_radii, reaxff2_bo, reaxff2_bond, reaxff2_over, reaxff3_angle
        : reaxff3_pen, reaxff4_torsion
@@edip_accuracy
Topic   : edip_accuracy
Type    : Option
Format  : edip_accuracy accuracy1 accuracy2
Units   : None
Default : accuracy1 = 0.000001, accuracy2 = 0.0000000001
Use     : Controls the truncation of the exponential terms in the interaction energies of 
        : EDIP. The parameter accuracy1 controls where the taper starts, while accuracy2
        : controls where the taper ends. Therefore accuracy1 must be greater than accuracy2.
        : Although no taper is formally required, this option can reduce the cost of EDIP
        : with negligible effect on the accuracy.
See also: edip_coordination, edip_twobody, edip_threebody, edip_zmax
@@edip_zmax
Topic   : edip_zmax
Type    : Option
Format  : edip_zmax Zmax
Units   : None
Default : 6.0
Use     : In the EDIP method, the interactions are truncated according to the following term;
        :
        : exp(sigma/(r - a - a'*Z))
        :
        : where a and a' are parameters. Here the cut-off is dependent on the coordination
        : number, Z. While GULP iteratively tries to ensure that all atoms are found in the
        : neighbour list based on the current cut-off, the Z value is approximated by the
        : uncorrected value (i.e. no torsional corrections). In cases where discontinuities
        : are found (should be rare) then the value of Zmax should be increased manually. 
See also: edip_coordination, edip_twobody, edip_threebody, edip_accuracy
@@edip_coordination
Topic   : edip_coordination
Type    : Option
Format  : edip_coordination
        : species <core/shell> alpha flow fhigh Zdih Zrep c0 plow phigh <4 x flags>
Units   : flow, fhigh, plow, phigh, c0 in Angstroms
Default : None
Use     : Specifies the parameters for the EDIP model coordination number.
See also: edip_twobody, edip_threebody, edip_zmax, edip_accuracy
@@edip_twobody
Topic   : edip_twobody
Type    : Option
Format  : edip_twobody
        : species1 <core/shel> species2 <core/shel> epsilon B beta sigma a a' <6 x flags>
Default : None
Use     : Specifies the parameters for the EDIP model twobody contribution.
See also: edip_coordination, edip_threebody, edip_zmax, edip_accuracy
@@edip_threebody
Topic   : edip_threebody
Type    : Option
Format  : edip_threebody
        : species1 <core/shel> species2 <core/shel> species3 <core/shell> &
        :                      lambda0 lambda' Z0 gamma gamma' q kq <7 x flags>
Default : None
Use     : Specifies the parameters for the EDIP model threebody contribution.
        : NB: Here the convention of N.A. Marks, J. Phys. Cond. Matter, 14,
        : 2901-2927 (2002) is followed, where lambda0 = lambda0*gammap**2/q
        : relative to the form in the earlier PRB, 63, 035401 (2000) paper.
See also: edip_twobody, edip_coordination, edip_zmax, edip_accuracy
@@terse
Topic   : terse
Type    : Option
Format  : terse <in/out/inout> <cell/coordinates/structure/potentials/derivatives>
Default : All appropriate quantities are output in full.
Use     : Offers the user the option of making the output more terse - i.e. to not 
        : print out so much. The first word should control whether the sub-options
        : refer to the input information, the output information or both, while the
        : second refers to the quantity not to be printed:
        :
        : cell           => don't output the unit cell parameters for vectors
        : coordinates    => don't output the coordinates of the atoms
        : structure      => don't output the structure (i.e. cell & coordinates)
        : potentials     => don't output the interatomic potentials
        : derivatives    => don't output the final derivatives
        :
@@neb
Topic   : neb
Type    : Keyword
Use     : Invokes a Nudged Elastic Band run to map out the minimum energy
        : pathway between two structures. A limited memory BFGS run is used to 
        : converge the replicas to the path. See the papers of G. Henkelman
        : and H. Jonsson (e.g. J. Chem. Phys., 113, 9978 (2000)). By default
        : the Doubly Nudged Elastic Band form is used.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@nodneb
Topic   : nodneb
Type    : Keyword
Use     : Turns off the doubly nudged elastic band method and uses the singly
        : nudged formalism.
See also: nebspring, nebtolerance, neb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@nebreplica
Topic   : nebreplica
Type    : Option
Format  : nebreplica <nreplica>
Default : None
Use     : Specifics the number of replicas to be used during a nudged elastic
        : band run, including the initial and final structure. Must be 
        : greater than 2 and controls how accurately the reaction path is
        : discretised.
See also: neb, nebspring, nebtolerance, nodneb,
        : nebtangent, nebrandom, nebiterations, rcartesian, fcartesian,
        : rfractional, ffractional, rcell, fcell
@@nebspring
Topic   : nebspring
Type    : Option
Format  : nebspring <vary> <maxspring> <minspring>
Default : maxspring = 1.0 - no varying
Units   : eV/Angstroms**2
Use     : Specifies the spring constant between the replicas in the nudged
        : elastic band method. For a single spring value between all
        : replicas the input would be;
        :
        : nebspring 10.0
        : 
        : For a spring constant that varies between 10.0 and 1.0 the input
        : would be;
        : 
        : nebspring vary 10.0 1.0
        : 
See also: neb, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@nebtolerance
Topic   : nebtolerance
Type    : Option
Format  : nebtolerance <tolerance_value>
Default : 0.001
Use     : Specifies the convergence criteria for a nudged elastic band
        : run in terms of the residual force norm.
See also: nebspring, neb, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@nebtangent
Topic   : nebtangent
Type    : Option
Format  : nebtangent <option_number>
Default : 3
Use     : Specifies how the tangent to the reaction path is to be defined
        : in a nudged elastic band run. The following are valid options:
        :
        : 1 => central finite difference between replicas
        : 2 => bisect vectors
        : 3 => new algorithm favouring higher energy replica neighbour
        :
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, neb, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@nebrandom
Topic   : nebrandom
Type    : Option
Format  : nebrandom <random_weight>
Default : 0.0
Units   : Angstroms
Use     : In the case where the initial pathway in the nudged elastic
        : band (formed by linear interpolation between the initial and
        : final state) lies along a high symmetry direction it can be
        : necessary to displace the replicas from the symmetric path.
        : If this option is set to a non-zero value then a random
        : displacement is applied to the initial coordinates of each
        : replica. The input value is used to scale a random number
        : between 0 and 1.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, neb, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@nebiterations
Topic   : nebiterations
Type    : Option
Format  : nebiterations <maximum_number>
Default : 1000
Use     : Specifies the maximum number of iterations for minimization
        : of the force norm during the nudged elastic band run.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, neb, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, fcell
@@synctolerance
Topic   : synctolerance
Type    : Option
Format  : synctolerance <tolerance_value>
Default : 0.0001
Use     : Specifies the convergence criteria for a synchronous transit
        : run in terms of the residual force norm.
See also: neb, syncsteps, synciterations,
        : nebreplica, fcartesian, ffractional, fcell
@@synciterations
Topic   : synciterations
Type    : Option
Format  : synciterations <maximum_number>
Default : 1000
Use     : Specifies the maximum number of iterations for minimization
        : of the force norm during each step of a syncrhonous transit run.
See also: neb, syncsteps, synctolerance,
        : nebreplica, fcartesian, ffractional, fcell
@@syncsteps
Topic   : syncsteps
Type    : Option
Format  : syncsteps <maximum_number>
Default : 1000
Use     : Specifies the maximum number of steps during a syncrhonous
        : transit run. Each consists of a move of one image towards the other
        : followed by minimisation of that image while the force remains 
        : orthogonal to the vector between the images. 
See also: neb, syncsteps, synctolerance,
        : nebreplica, fcartesian, ffractional, fcell
@@rcartesian
Topic   : rcartesian
Type    : Option 
Format  : rcartesian replica_number
        : x1 y1 z1 <r1>
        : x2 y2 z2 <r2>
        : .. .. ..
        : xN yN zN <rN>
Units   : Angstroms
Default : None
Use     : Specifies the coordinates of a replica for the nudged elastic
        : band method. The number of coordinates must match the number
        : of atoms in the initial structure. This option is primarily
        : useful for restarting. If the coordinates of the replicas are
        : not given then the values are initialised based on a linear
        : interpolation between the initial and final states. The radii 
        : of the ions can be optionally given on the end of the line if
        : a breathing shell model is being used. If not specified then
        : they are assumed to be zero.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, neb,
        : fcartesian, rfractional, ffractional, rcell, fcell 
@@fcartesian
Topic   : fcartesian 
Type    : Option
Format  : fcartesian
        : x1 y1 z1 <r1>
        : x2 y2 z2 <r2>
        : .. .. ..
        : xN yN zN <rN>
Units   : Angstroms
Default : None
Use     : Specifies the coordinates of the final state for the nudged elastic
        : band method. The number of coordinates must match the number
        : of atoms in the initial structure.  The radii of the ions
        : can be optionally given on the end of the line if a breathing
        : shell model is being used. If not specified then they are
        : assumed to be zero.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : rfractional, ffractional, rcell, fcell, neb
@@rfractional
Topic   : rfractional
Type    : Option
Format  : rfractional replica_number
        : x1 y1 z1 <r1>
        : x2 y2 z2 <r2>
        : .. .. ..
        : xN yN zN <rN>
Units   : Fractional
Default : None
Use     : Specifies the fractional coordinates of a replica for the nudged 
        : elastic band method. The number of coordinates must match the number
        : of atoms in the initial structure. This option is primarily
        : useful for restarting. If the coordinates of the replicas are
        : not given then the values are initialised based on a linear
        : interpolation between the initial and final states. The radii 
        : of the ions can be optionally given on the end of the line if
        : a breathing shell model is being used. If not specified then
        : they are assumed to be zero.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, ffractional, rcell, fcell, neb
@@ffractional
Topic   : ffractional
Type    : Option
Format  : ffractional
        : x1 y1 z1 <r1>
        : x2 y2 z2 <r2>
        : .. .. ..
        : xN yN zN <rN>
Units   : Fractional
Default : None
Use     : Specifies the fractional coordinates of the final state for the 
        : nudged elastic band method. The number of coordinates must match
        : the number of atoms in the initial structure.  The radii of the
        : ions can be optionally given on the end of the line if a breathing
        : shell model is being used. If not specified then they are
        : assumed to be zero.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, rcell, fcell, neb
@@rcell
Topic   : rcell
Type    : Option
Format  : rcell replica_number
        : a b c alpha beta gamma (for 3-D)
        : a b   alpha            (for 2-D)
        : a                      (for 1-D)
Units   : Angstroms for a/b/c & degrees for alpha/beta/gamma
Default : None
Use     : Specifies the unit cell of a replica for the nudged elastic band
        : method. This option is primarily useful for restarting. If the
        : unit cells of the replicas are not given then the values are
        : initialised based on a linear interpolation between the initial
        : and final states. The number of cell parameters must match the
        : dimensionality of the initial system.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, fcell, neb
@@fcell 
Topic   : fcell
Type    : Option
Format  : fcell 
        : a b c alpha beta gamma
Units   : Angstroms for a/b/c & degrees for alpha/beta/gamma
Default : None
Use     : Specifies the final unit cell for the nudged elastic band method.
        : The number of cell parameters must match the dimensionality of the
        : initial system.
See also: nebspring, nebtolerance, nodneb,
        : nebreplica, nebtangent, nebrandom, nebiterations, rcartesian,
        : fcartesian, rfractional, ffractional, rcell, neb
@@oldunits
Topic   : oldunits
Type    : Keyword
Use     : The default units of elastic constants have now changed to GPa
        : in order to be consistent and modern. This keyword is included
        : to maintain backwards compatibility.
@@nomodcoord
Topic   : nomodcoord
Type    : Keyword
Use     : Prevents the use of mod on the input coordinates for most purposes. 
        : The mod function is used to place fractional coordinates into the
        : central unit cell. Note that this option applies to all steps of a
        : calculation.
@@brenner
Topic   : brenner
Type    : Option
Format  : brenner 
Use     : Specifies that the REBO forcefield of Brenner et al (2002 variant) be
        : included in the energy calculation. Note that this is only available 
        : for the elements C, H, and O. The parameters for O are from the work
        : of Ni, Lee and Sinnott (J. Phys.: Condens. Matter, 16, 7261 (2004), but
        : with some changes from the authors that lead to improvements. Parameters
        : are also available for F, but should not be used if oxygen is present.
        : The option REBO is a synonym for this option.
        : If the model number is given as 1 (i.e. "brenner 1") then the original
        : Brenner model will be used. This option has parameters for C, H and Si
        : using the extended parameter set given in Dyson and Smith, Surf. Sci.,
        : 355, 140 (1996)
See also: spatial
@@spatial
Topic   : spatial
Type    : Keyword
Use     : Requests that a spatial decomposition algorithm is used wherever
        : possible to try to achieve linear scaling with system size. 
See also: rcspatial
@@rcspatial
Topic   : rcspatial
Type    : Option
Format  : rcspatial rcspatial_value <rcspatial_BO_value>
        : rcspatial anisotropic rcspatial_x rcspatial_y rcspatial_z <rcspatial_BO_x rcspatial_BO_y rcspatial_BO_z>
Units   : Angstroms
Default : Set equal to the largest potential cutoff in real space.
Use     : Can be used to set the domain size in the spatial decomposition to make
        : it smaller than the potential cutoff. In this case looping over multiple
        : cells is needed. 
        : If the anisotropic suboption is used then a different domain size is applied along each axis.
See also: spatial
@@nomolecularinternalke
Topic   : nomolecularinternalke
Type    : Keyword
Use     : Causes the initial velocites of atoms within a molecule to
        : be initialised to the same average value thereby resulting
        : in no internal kinetic energy.
See also: md
@@plane_lj
Topic   : plane_lj
Type    : Option
Format  : plane_lj m n
        : atom1 plane zcoord A B rmin rmax <2xflags>
Units   : zcoord, rmin and rmax in Angstroms, A & B in
        : eV/Angstroms**m and eV/Angstroms**n, respectively.
Default : m = 10, n = 4
Use     : Specifies a Lennard-Jones potential between atom1 and a plane.
        : Because the method is only applicable to 2-D systems the plane
        : is assumed to be parallel to xy. The absolute position in z
        : is given by zcoord. For example to include an integrated L-J
        : 12-6 potential (which would give m=10 and n=4) that acts on carbon
        : positioned at -0.75 Ang the input would look like:
        :
        : plane_lj 10 4
        : C core -0.75 1000.0 14.0 0.0 12.0
        :
See also: lennard, einstein
@@einstein
Topic   : einstein
Type    : Option
Format  : einstein <cart>
        : atomnumber x y z k
Units   : x/y/z in fractional, unless "cart" specified, in which case 
        : Angstroms; k in eV/Ang**2
Default : k = 0 for all atoms
Use     : Specifies an Einstein model for the system. Here the atoms
        : are tied to lattice sites using a harmonic potential. In the
        : input it is necessary to specify the lattice site for the
        : atom and the force constant.
        : Note: This option must be used with a fixed unit cell.
See also: plane_lj
@@random
Topic   : random
Type    : Option
Format  : random ncall1 ncall2 ncall3 <G>
Units   : None
Default : ncall1 = ncall2 = ncall3 = 0
Use     : This option is used for consistent restarting of runs that utilise
        : random numbers by keeping track of how many calls were made during
        : the previous run so that the position in the sequence of numbers 
        : can be recreated on restart. There are three types of random number
        : generated in GULP at present and so the three numbers are to track the
        : number of calls for each generator. 
        : The optional letter G at the end indicates that the Gaussian number
        : generator was called last; this is important in obtaining the proper
        : sequence going forward in some cases.
        : NB: This option is not intended for user setting and is included to 
        :     explain why this line is present in the restart file.
See also: md
@@radial_force
Topic   : radial_force
Type    : Option
Format  : radial_force K x y z
Units   : K in eV/Ang, x, y, z in Ang
Default : No radial force
Use     : This option allows a radial harmonic force to be applied
        : to a system with a force constant K and origin of force
        : at (x,y,z). Because of the point nature of the force it
        : can only be applied to finite systems. The energy of the
        : contribution is given by:
        :
        : E = sum(i) 1/2 K*[(x_i - x)**2 + (y_i - y)**2 + (z_i - z)**2]
        :
        : where the sum is over all atoms, i. 
@@external_force
Topic   : external_force
Type    : Option
Format  : external_force
        : atomnumber force_X force_Y force_Z
Units   : eV/Angstrom
Default : 0.0 for all atoms and components
Use     : Specifies a constant external force for the atoms specified.
        : Note that the atom number refers to the asymmetric unit and
        : that the user must ensure that the force doesn't violate the
        : symmetry of the system, otherwise any optimisation will fail.
        : Example:
        : force
        : 1  0.2 0.0 0.0
        : 3 -0.2 0.0 0.0
See also: td_external_force
@@td_external_force
Topic   : td_external_force
Type    : Option
Format  : td_external_force
        : atomnumber direction forceA forceB forceC
Units   : forceA in eV/Angstrom, forceB in 1/seconds, & forceC in fraction
        : of 2*pi
Default : No time dependent force
Use     : Specifies that a time-dependent force is applied to selected
        : atoms during a molecular dynamics simulation. This force can
        : be specified separately for each Cartesian direction and takes
        : the form of;
        :
        : F = forceA*cos[2*pi*(t*forceB + forceC)]
        :
        : where t is the time within the simulation.
        : Example 1:
        : 1 z   3.5 0.5 0.5
        : 3 z   3.5 0.5 0.0
        : Example 2:
        : 1 z  -3.5 0.5 0.0
        : 3 z   3.5 0.5 0.0
        : Note: both of the other examples would cause the atoms to 
        : oscillate exactly out of phase with each other and are
        : equivalent. The maximum force experienced would be +/-
        : 3.5 eV/Angstrom
See also: external_force
@@mincell
Topic   : mincell
Type    : Option
Format  : mincell minimum_cell_parameter <au>
Units   : Angstroms
Default : 0.5 Angstroms
Use     : Stops an optimisation if the cell parameter falls below the
        : specified allowed value. This prevents the memory rapidly
        : increasing due to the number of reciprocal lattice vectors
        : tending to infinity as the cell parameter(s) go to zero.
See also: rspeed, optimise
@@ditto
Topic   : ditto
Type    : Option
Format  : ditto <option_word> <configuration_no>
Units   : none
Default : option_word = 'all' and configuration_no = last structure
Use     : Copies the data from the previous configuration to this one
        : before options overwrite it. The option_word parameter is a
        : string that states what is to be copied. Current valid words
        : are;
        :
        : all        - copy all of the below items
        : conditions - copy temperature / pressure data
        : md         - copy all molecular dynamics related parameters
        : solvent    - copy solvent related data
        : structure  - copy structure related data
        :
        : The parameter, configuration_no, gives the configuration number
        : to be copied when creating the present new structure. 
        : This option is useful when wanting to run a sequence of 
        : calculations on the same structure with different conditions.
        : Note: The coordinates cannot be presently overwritten.
@@omega
Topic   : omega
Type    : Option
Format  : omega frequency frequency_step no_of_steps
Units   : cm-1
Default : frequency = frequency_step = 0.0 no_of_steps = 0
Use     : Specifies that frequency dependent properties be calculated
        : over a given range. "frequency" represents the initial frequency
        : while "frequency_step" is the interval between calculations.
        :
        : Example:
        :
        : omega 500.0 100.0 5
        :
        : the above would calculate properties at a frequencies of 500,
        : 600, 700, 800, 900 and 1000 cm-1. A no_of_steps = 0 implies a
        : calculation at a single frequency.
        :
        : NOTE : This option only applies to a gamma point calculation
        :
See also: phonon, odirection, omega_damping
@@omega_damping
Topic   : omega_damping
Type    : Option
Format  : omega_damping damping_factor
Units   : cm-1
Default : 5.0 cm-1
Use     : Applies a damping factor to the frequency dependent optical
        : properties. This broads the peaks and prevents a singularity.
        : Note that the value is constrained to be greater than 1 x 10^-6
        : to ensure numerical stability.
See also: omega, odirection, phonon
@@odirection
Topic   : odirection
Type    : Option
Format  : odirection <frac> x_in y_in z_in x_out y_out z_out
Units   : dimensionless
Default : no directions
Use     : If the frequency dependent properties are required for a
        : particular in/out direction combination then this option
        : specifies the 2 directions.
        : 
        : NOTE : This option only applies to a gamma point calculation
        : 
        : By default the directions are assumed to be in Cartesian space
        : unless the "frac" sub-option is given in which case they will 
        : be taken relative to the crystal axes.
See also: phonon, omega, omega_damping
@@nononanal
Topic   : nononanal
Type    : Keyword
Use     : If present, then the non-analytic correction to the phonons at
        : the gamma point is excluded. This was always true for versions
        : of GULP prior to 1.4 and so this keyword allows backwards
        : compatability while leading to an incorrect LO/TO splitting.
        : Note: The Born effective charges are not presently available
        : with electronegativity equalisation and therefore this keyword
        : will automatically be set.
See also: phonon, gamma_direction_of_approach, gamma_angular_steps
@@gamma_direction_of_approach
Topic   : gamma_direction_of_approach
Type    : Option
Format  : gamma_direction_of_approach Kx Ky Kz
Units   : fractional
Default : 1.0 1.0 1.0
Use     : Specifies the direction of approach to the gamma point for the
        : calculation of the nonanalytic correction to the dynamical
        : matrix due to the LO/TO splitting resulting from the electric
        : field in the crystal. This option allows the frequencies to be
        : calculated for a particular crystal orientation. Only used if
        : gamma_angular_steps is set to zero. Note that the value is also
        : ignored if a point is part of a dispersion curve, where the
        : direction of the curve is taken.
See also: phonon, nononanal, gamma_angular_steps
@@gamma_angular_steps
Topic   : gamma_angular_steps
Type    : Option
Format  : gamma_angular_steps Nsteps
Units   : none
Default : 0
Use     : Specifies the number of angular points for theta and phi to
        : be used in averaging the nonanalytic correction to the 
        : dynamical matrix over all possible approach directions.
        : This leads to the polycrystalline powder average of the
        : gamma point frequencies due to the LO/TO splittings in all
        : directions. Note: the absolute magnitude does not matter -
        : only the direction.
See also: phonon, nononanal, gamma_direction_of_approach
@@zero_potential
Topic   : zero_potential
Type    : Keyword
Use     : Sets the average potential across all lattice sites to be
        : zero. This allows comparison of the site potentials to be
        : made more readily between the bulk and molecular/surface
        : situations.
See also: potential
@@montecarlo
Topic   : montecarlo
Type    : Keyword
Use     : Specifies that a Monte Carlo calculation is to be performed.
See also: mccreate, mcdestroy, mcmove, mcrotate, mctrial, mcoutfreq,
        : mcsample, gcmcspecies, gcmcmolecule, mcstrain, mcswap, nomcediff
@@nomcediff
Topic   : nomcediff
Type    : Keyword
Use     : Controls the algorithm used for calculating the energy difference
        : during a trial move. By default, GULP will try to use the energy
        : change associated only with the atoms that are affected by the 
        : trial step, where possible. Specifying this keyword forces the full
        : calculation of the total energy at each step, which is more expensive.
        : This option is mainly for debug checking.
See also: montecarlo
@@mccreate
Topic   : mccreate
Type    : Option
Format  : mccreate probability
Default : 0.0
Units   : None
Use     : Specifies the relative probability of an atom being created
        : during a Monte Carlo simulation. Note all probabilities are
        : renormalised at run time. A value of zero means that atoms
        : will not be created.
Example : mccreate 0.25
See also: mcdestroy, mcmove, mcrotate, mctrial, montecarlo, mcswap
@@mcdestroy
Topic   : mcdestroy
Type    : Option
Format  : mcdestroy probability
Default : 0.0
Units   : None
Use     : Specifies the relative probability of an atom being destroyed
        : during a Monte Carlo simulation. Note all probabilities are
        : renormalised at run time. A value of zero means that atoms
        : will not be destroyed. Note when an atom in a molecule is
        : destroyed, then so is the whole molecule.
Example : mcdestroy 0.25
See also: mccreate, mcmove, mcrotate, mcstrain, mctrial, montecarlo, mcswap
@@mcmove
Topic   : mcmove
Type    : Option
Format  : mcmove probability
Default : 1.0
Units   : None
Use     : Specifies the relative probability of an atom being translated
        : during a Monte Carlo simulation. Note all probabilities are
        : renormalised at run time. A value of zero means that atoms
        : will not be translated. When an atom in a molecule is chosen
        : for translation, then the whole molecule is translated.
Example : mcmove 0.25
See also: mccreate, mcdestroy, mcrotate, mctrial, montecarlo, mcstrain, mcswap
@@mcrotate
Topic   : mcrotate
Type    : Option
Format  : mcrotate <atom/line/centre> probability
Default : 0.0 / centre
Units   : None
Use     : Specifies the relative probability of a molecule being rotated
        : during a Monte Carlo simulation. Note all probabilities are
        : renormalised at run time. A value of zero means that molecules
        : will not be rotated.
        : The sub-options atom, line and centre control the point about
        : which the molecule will be rotated, and in the case of line the
        : axis direction. For the default mode, centre, the molecule is
        : rotated about the centre of the molecule based on the average 
        : coordinate. For atom, a random atom from within the molecule
        : is chosen and then the rotation attempted about this. For line,
        : two atoms are chosen at random and the rotation attempted about
        : this axis. If more than one word is specified then all types of
        : rotation specified will be tried according to a random choice.
Example : mcrotate 0.25
See also: mccreate, mcdestroy, mcmove, mctrial, mcmaxrotation, montecarlo,
        : mcstrain, mcswap
@@mcswap
Topic   : mcswap
Type    : Option
Format  : mcswap <any/only> probability <species list>
Default : 0.0 / any
Units   : None
Use     : Specifies the relative probability of ions being swapped during
        : a Monte Carlo simulation. Note all probabilities are renormalised
        : at run time. A value of zero means that no swapping will be attempted.
        : The suboptions control what species can be switched. If any is specified
        : then all atoms can be swapped. However, if only is specified a list of
        : species that can be swapped must be given. Note: Only swaps between 
        : different species will be considered since otherwise the energy is 
        : invariant. Furthermore, swaps involving atoms in molecules are not 
        : allowed. Swapping involving species with shells should also be avoided
        : for now since the core/shell pair may get split.
Example : mcswap 0.25
        : mcswap only 0.25 Mg Ca
See also: mccreate, mcdestroy, mcrotate, mctrial, montecarlo, mcmove,
        : mcmaxstrain, mcstrain
@@mcstrain
Topic   : mcstrain
Type    : Option
Format  : mcstrain probability
Default : 0.0
Units   : None
Use     : Specifies the relative probability of the cell being strained
        : during a Monte Carlo simulation. Note all probabilities are
        : renormalised at run time. A value of zero means that the cell
        : will not be strained. 
Example : mcstrain 0.25
See also: mccreate, mcdestroy, mcrotate, mctrial, montecarlo, mcmove,
        : mcmaxstrain, mcswap
@@mctrial
Topic   : mctrial
Type    : Option
Format  : mctrial number_of_trials
Default : 0
Units   : None
Use     : Specifies the total number of attempted trial operations in a
        : Monte Carlo simulation.
See also: montecarlo, mccreate, mcdestroy, mcmove, mcrotate, mcstep, mcswap
@@mcoutfreq
Topic   : mcoutfreq
Type    : Option
Format  : mcoutfreq
Default : 100
Units   : None
Use     : Specifies the frequency for printing the running averages to
        : the output. The value is specified as the number of trial
        : operations between outputs.
Example : mcoutfreq 1
See also: mcsample, montecarlo
@@mcsample
Topic   : mcsample
Type    : Option
Format  : mcsample <frequency> <filename> <lowest>
Default : 10 / gulp.gmc
Units   : None
Use     : Specifies the frequency for outputting configuration data to
        : a binary file for post-run analysis. The value is specified
        : as the number of accepted operations between writes. The
        : filename can be anything with up to 60 characters. The
        : extension ".gmc" is recommend as a convention.
        : 
        : The format of the file is as follows. Each configuration is
        : written as follows:
        :
        :      write(31)numat
        :      write(31)energy
        :      write(31)(atomicno(i),i=1,numat)
        :      write(31)(atomictype(i),i=1,numat)
        :      write(31)(xcoordinate(i),i=1,numat)
        :      write(31)(ycoordinate(i),i=1,numat)
        :      write(31)(zcoordinate(i),i=1,numat)
        : 
        : where the variables are as follows :
        : 
        : integer(i4) numat      = total number of atoms
        : integer(i4) atomicno   = atomic number of atom (1-maxele)
        : integer(i4) atomictype = atomic type of atom (0-9999)
        : real(dp) energy        = total energy of system (eV)
        : real(dp) xcoordinate   = Cartesian coord in X direction (Angs)
        : real(dp) ycoordinate   = Cartesian coord in Y direction (Angs)
        : real(dp) zcoordinate   = Cartesian coord in Z direction (Angs)
        : 
        : and the datatypes are given by :
        : 
        : integer, parameter :: i4  = selected_int_kind(9)
        : integer, parameter :: dp  = kind(1.0d0)
        : 
Example : mcsample 5 montesamples.gmc
See also: montecarlo, mcoutfreq
@@mcmaxdisplacement
Topic   : mcmaxdisplacement
Type    : Option
Format  : mcmaxdisplacement <maxdisplacement> <target ratio <frequency>>
Default : 0.05 / no target ratio
Units   : Angstroms
Use     : Specifies the maximum Cartesian displacement that can be applied
        : in a translation trial step. If the "target" suboption is used
        : then the maximum displacement is gradually adjusted to try to
        : achieve the specified acceptance ratio for translation. The
        : frequency of adjustment can also be specified. 
Examples: mcmaxdisplacement 0.1
        : mcmaxdisplacement 0.05 target 0.5 20
See also: mcmove, montecarlo
@@mcmaxstrain
Topic   : mcmaxstrain
Type    : Option
Format  : mcmaxstrain <maxstrain> <target ratio <frequency>>
Default : 0.1 / no target ratio
Units   : Dimensionless
Use     : Specifies the maximum strain that can be applied in a strain 
        : trial step. Note that a strain step of more than 1.0 is not allowed
        : since this would allow the cell to go to zero in a single step.
        : Small values are more sensible. If the "target" suboption is used
        : then the maximum strain is gradually adjusted to try to
        : achieve the specified acceptance ratio for strain. The
        : frequency of adjustment can also be specified.
Examples: mcmaxstrain 0.01
        : mcmaxstrain 0.15 target 0.5 30
See also: mcstrain, montecarlo
@@mcmaxrotation
Topic   : mcmaxrotation
Type    : Option
Format  : mcmaxrotation <maxrotation> <target ratio <frequency>>
Default : 180 / no target ratio
Units   : Degrees
Use     : Specifies the maximum angle of rotation that can be applied
        : in a trial step. If the "target" suboption is used
        : then the maximum rotation is gradually adjusted to try to
        : achieve the specified acceptance ratio for rotation. The
        : frequency of adjustment can also be specified. 
Examples: mcmaxrotation 90
        : mcmaxrotation 180 target 0.5 20
See also: mcrotate, montecarlo
@@mcchemicalpotential
Topic   : mcchemicalpotential
Type    : Option
Format  : mcchemicalpotential chemical_potential
Default : 0.0
Units   : eV
Use     : Specifies the target chemical potential of the system for
        : a Grand Canonical Monte Carlo run. Controls the probability
        : for creation and destruction moves being accepted.
Example : mcchemicalpotential -1.00 
See also: mccreate, mcdestroy, mctrial, montecarlo, gcmcspecies, mcvolume
@@mcvolume
Topic   : mcvolume
Type    : Option
Format  : mcvolume volume
Default : unit cell volume
Units   : Angstroms**3
Use     : Specifies the volume that is used in a Grand Canonical Monte
        : Carlo calculation to determine the creation/destruction
        : probability. If not specified, the volume of the unit cell is
        : used.
See also: montecarlo, mcchemicalpotential
@@gcmcspecies
Topic   : gcmcspecies
Type    : Option
Format  : gcmcspecies <number_of_species>
        : AtomicSymbol <core/shell> x <number_of_species>
Default : None
Units   : None
Use     : Specifies the species that can under go destruction/creation
        : operations in a trial MC step. Only used in GCMC calculations.
        : Note that specifying the number of species is optional.
Example : gcmcspecies 2
        : H core
        : O core
See also: mccreate, mcdestroy, montecarlo, gcmcmolecule
@@gcmcmolecule
Topic   : gcmcmolecule
Type    : Option
Format  : gcmcmolecule <number_of_atoms> <au>
        : AtomicSymbol <core/shell> x y z ( x number of atoms)
Default : None
Units   : Coordinates in Angstroms
Use     : Specifies the coordinates for molecules that can be created
        : during a GCMC calculation trial step. The molecule will be
        : inserted using the specified geometry at a random position
        : and with a random orientation. Only used in GCMC calculations.
        : Note that specifying the number of atoms is optional.
Example : gcmcmolecule 
        : N core 0.0 0.0 -0.6
        : N core 0.0 0.0  0.6
See also: mccreate, mcdestroy, montecarlo, gcmcspecies, gcmcexistingmolecules
@@gcmcexistingmolecules
Topic   : gcmcexistingmolecules
Type    : Option
Format  : gcmcexistingmolecules mol1 mol2 mol3 ...etc....
        : natmol1 atom1_1 atom1_2 atom1_3.... atom1_natmol1
        : natmol2 atom2_1 atom2_2 atom2_3.... atom2_natmol2
        : natmol3 atom3_1 atom3_2 atom3_3.... atom3_natmol3
        : etc...
Default : No existing GCMC molecules in existing structure
Units   : None
Use     : Allows molecules in the current structure that are related to GCMC
        : molecules to be identified. The purpose of this option is to facilitate
        : restarts of GCMC runs. For example, if a system contains 3 molecules
        : where molecule numbers 2 and 3 were inserted by GCMC, while molecule 1
        : is a fixed framework into which the molecules are inserted then the
        : input would be:
        : 
        : gcmcexistingmolecules 2 3
        : 2  5 6
        : 2  7 8
        :
        : Note that lines 2 and 3 identify that there are 2 atoms in molecule
        : 2 numbered 5 & 6, while molecule 3 also has 2 atoms that are numbers
        : 7 & 8 in the input for this structure.
        : 
        : Where there are many molecules a range can also be specified as follows:
        : 
        : gcmcexistingmolecules 4 to 8
        : 
See also: mccreate, mcdestroy, montecarlo, gcmcspecies, gcmcmolecules
@@mcstep
Topic   : mcstep
Type    : Option
Format  : mcstep first_step number_of_accepted_steps_so_far
Default : 1
Units   : None
Use     : Specifies the first step for a Monte Carlo restart and the
        : number of accepted steps so far. The former number must
        : be consistent with the mean properties given and the second
        : one must obviously be smaller than the first.
Example : mcstep 50 24
See also: mcmeans, mctrial, montecarlo, mclowest
@@mcmeans
Topic   : mcmeans
Type    : Option
Format  : mcmeans mean_energy mean_number_of_atoms
Default : None
Units   : mean_energy in eV
Use     : Specifies the running mean of the energy and number of
        : atoms. This must be consistent with the number of MC
        : steps so far given by mcstep and is used to restart a
        : Monte Carlo job.
Example : mcmeans -3.45155 4.059
See also: mcstep, mctrial, montecarlo, mclowest
@@mclowest
Topic   : mclowest
Type    : Option
Format  : mclowest lowest_energy
Default : None
Units   : lowest_energy in eV
Use     : Specifies the running lowest value of the energy encountered
        : so far in the run. This value is only for restarting purposes.
Example : mclowest -1140.6883129
See also: mcstep, mctrial, montecarlo, mcmeans
@@trajectory_format
Topic   : trajectory_format
Type    : Information

Written once only for each run :

        write(31)version
        write(31)numat,ndimensions

Written for every configuration :

  Version = 3.4:

        write(31)timesofar,ekin,fc,temp
        write(31)(xalat(i),i=1,numat)
        write(31)(yalat(i),i=1,numat)
        write(31)(zalat(i),i=1,numat)
        write(31)(velx(i),i=1,numat)
        write(31)(vely(i),i=1,numat)
        write(31)(velz(i),i=1,numat)
        if (lconp) then
          write(31)(xcell(i),i=1,9)
          write(31)(velc(i),i=1,nstrains)
        endif

  Version = 4.0 onwards:

        write(31)timesofar,ekin,fc,temp
        write(31)(xalat(i),i=1,numat)
        write(31)(yalat(i),i=1,numat)
        write(31)(zalat(i),i=1,numat)
        write(31)(velx(i),i=1,numat)
        write(31)(vely(i),i=1,numat)
        write(31)(velz(i),i=1,numat)
        write(31)(xdrv(i),i=1,numat)
        write(31)(ydrv(i),i=1,numat)
        write(31)(zdrv(i),i=1,numat)
        write(31)(esite(i),i=1,numat)
        if (lconp) then
          write(31)(xcell(i),i=1,9)
          write(31)(velc(i),i=1,nstrains)
        endif

Meaning of variables :

version (real*8)    = version number of GULP
numat   (integer*4) = total number of atoms including shells
timesofar (real*8)  = elapsed time of simulation for this frame (ps)
ekin    (real*8)    = kinetic energy for this frame (eV)
fc      (real*8)    = potential energy for this frame (eV)
temp    (real*8)    = temperature for this frame (Kelvin)
xalat   (real*8)    = x Cartesian coordinates of atoms (Angstroms)
yalat   (real*8)    = y Cartesian coordinates of atoms (Angstroms)
zalat   (real*8)    = z Cartesian coordinates of atoms (Angstroms)
velx    (real*8)    = x component of velocities (Angstroms/ps)
vely    (real*8)    = y component of velocities (Angstroms/ps)
velz    (real*8)    = z component of velocities (Angstroms/ps)
xdrv    (real*8)    = x component of first derivatives (eV/Angstroms) -> negative force
ydrv    (real*8)    = y component of first derivatives (eV/Angstroms) -> negative force
zdrv    (real*8)    = z component of first derivatives (eV/Angstroms) -> negative force
esite   (real*8)    = energy contribution of each atom (eV)
lconp   (logical)   = .true. for NPT calculation, otherwise .false.
xcell   (real*8)    = Cartesian components of cell vectors (Angstroms)
velc    (real*8)    = velocities of cell components (Angstroms)

@@scmaxsearch
Topic   : scmaxsearch
Type    : Option
Format  : scmaxsearch <value>
Units   : None
Default : 2.0
Use     : For free energy minimisation, this parameter sets the maximum
        : search range for pairs of atoms interacting via the same many
        : body term that gives a contribution to the third derivatives.
        : The value is a multiple of the density cut-off value for the
        : EAM model. In principle, the range can be up to 3 times the
        : density pairwise cut-off. However, this makes free energy
        : minimisation very expensive. In practice, a value of around
        : 2 will give almosts identical results, depending on the system,
        : with a dramatic increase in speed. However, if precise gradients
        : are needed then a value of 3.0 should be used to check
        : the influence. Negative values and values greater than 3.0 are
        : disallowed as being stupid!
See also: free, zsisa, manybody, eam_functional, eam_density
@@lowest_mode
Topic   : lowest_mode
Type    : Option
Format  : lowest_mode minimum_mode_number <maximum_mode_number>
Units   : None
Use     : Sets the lowest mode and optionally the highest mode
        : number to be used in the calculation of the free energy.
        : Allows the user to select a band of frequencies whose
        : value is to be used in the calculation of the vibrational
        : component of the free energy.
        :
        : e.g. lowest 4 9
        :
@@srefractive_index
Topic   : srefractive_index <n>
Type    : Option within "observables"
Format  : i static_refractive_index(i) <weight>
Units   : None
Default : No static refractive indices to be fitted
Use     : Specifies exptl static refractive indices for fitting
        : along principal axes.
See also: elastic, piezoelectric, sdlc, hfdlc, hfrefractive and weight.
@@hfrefractive_index
Topic   : hfrefractive_index <n>
Type    : Option within "observables"
Format  : i high_frequency_refractive_index(i) <weight>
Units   : None
Default : No high frequency refractive indices to be fitted
Use     : Specifies exptl high frequency refractive indices for fitting
        : along principal axes.
See also: elastic, piezoelectric, sdlc, hfdlc, srefractive, weight.
@@finite
Topic   : finite
Type    : Option
Format  : finite <value>
Default : 0.0001
Units   : none (fractional)
Use     : Requests that the first derivatives with respect to the energy (or
        : free energy if keyword "free" is present) are calculated numerically
        : by central finite differences. If a value is specified after the
        : option then this specifies the fractional change to be used as the
        : step size. Note that if the value is too large then the gradients
        : will be inaccurate. However, if the value is too small then numerical
        : noise can lead to inaccuracies as well. 
        : This option is largely only of use for checking analytical derivatives
        : during debugging and is intended for use with single point calculations.
See also: gradients
@@marvinSE
Topic   : marvinSE
Type    : Keyword
Use     : Changes the way that many body terms are apportioned between regions 1
        : and 2 to match the convention that Marvin adopts (i.e. all 3-/4- body
        : interactions involving a region 1 atom are assigned to the region 1
        : energy)
@@noelectrostatics
Topic   : noelectrostatics
Type    : Keyword
Use     : Turns off the Ewald summation/Coulomb interaction even when charges
        : are present in the input. This is mainly used when a screened
	: Coulomb potential is being used, such as "qerfc", which requires
	: the charges to be present but replaces the normal energy term.
See also: qerfc, qwolf
@@zsisa
Topic   : zsisa
Type    : Keyword
Use     : perform free energy minimisation in the Zero Static Internal Stress
        : Approximation (ZSISA) - this implies that only the strain derivatives
        : with respect to the free energy are used while the internal derivatives
        : neglect the free energy contribution. This approach is equivalent to
        : the old numerical method of free energy minimisation. Note this keyword
        : does not apply to molecules!
See also: free
@@keyword
Topic   : keyword
Type    : Option
Format  : keyword <list of keywords>
Use     : allows keywords to be specified anywhere in an input file 
        : instead of just on the top line.
        :
        : e.g. 
        : keyword opti conp prop
        :
@@ignore
Topic   : ignore
Type    : Option
Use     : Part of ignore/erongi pair. All lines of input after
        : "ignore" are treated as comments until the option
        : "erongi" is found at the start of a line. Allows the
        : user to comment out parts of an input file. Note 
        : any parts commented out will not be passed through
        : to a restart file.
See also: erongi
@@erongi
Topic   : erongi
Type    : Option
Use     : Part of ignore/erongi pair. All lines of input after
        : "ignore" are treated as comments until the option
        : "erongi" is found at the start of a line. Allows the
        : user to comment out parts of an input file. Note 
        : any parts commented out will not be passed through
        : to a restart file.
See also: ignore
@@dcharge
Topic   : dcharge
Type    : Keyword
Use     : Calculate the first derivatives of the atomic charges
        : with respect to the coordinates of the atoms (and strain)
        : as calculated according to either the EEM or QEq 
        : electronegativity equalisation schemes. 
See also: eem, qeq
@@qeq
Topic   : qeq
Type    : Keyword
Use     : Calculate charges by Rappe and Goddard's QEq scheme.
        : This differs from Mortier's scheme in that the Coulomb
        : interaction is replaced by the integral over two s
        : type Slater orbitals for small distances. It is also
        : available for the whole periodic table up to Lr (103).
        : If specified with optimise then the charges will be 
        : recalculated at every point of the optimisation.
        :
        : NB Electronegativity equalisation schemes should NOT
        : be used in combination with Coulomb subtraction of
        : any form otherwise the calculation of the charges and
        : the energy will not be self-consistent. This leads to
        : all derivatives being incorrect as dE/dQ is no longer
        : zero. If Coulomb subtracted potentials are to be used
        : then charges must be calculated for the initial geometry
        : and then frozen.
        :
        : Note: it is important to investigate the effect of
        : qeqradius on the degree of convergence and CPU time.
        :
        : Note: Phonon calculations are limited with the QEq keyword
        : to the gamma point without the LO/TO splitting.
        :
        : Note: Only region 1 atoms are included in QEq and fixed
        : charges will be taken for region 2.
See also: eem, qeqtol, qeqiter, qeqradius, dcharge, sm, qelectronegativity,
        : gasteiger
@@qeqtol
Topic   : qeqtol
Type    : Option
Format  : qeqtol tolerance
Units   : Electrons
Default : 0.000001
Use     : Sets the tolerance on the change in the charges between
        : iterations of the QEq electronegativity equalisation
        : scheme. This only applies to systems which contain
        : hydrogen.
See also: eem, qeq, qeqiter, qeqradius, dcharge
@@qeqiter
Topic   : qeqiter
Type    : Option
Format  : qeqiter maximum_number_iterations
Units   : None
Default : 20
Use     : Sets the maximum number of iterations that are allowed
        : during the QEq electronegativity equalisation scheme.
        : Only applies to systems where hydrogen is present.
See also: eem, qeq, qeqtol, qeqradius, dcharge
@@qeqradius
Topic   : qeqradius
Type    : Option
Format  : qeqradius radius
Units   : Angstroms
Default : 15.0
Use     : Sets the maximum radius for the calculation of the
        : Coulomb term using the formula for two Slater s
        : type orbitals in the QEq electronegativity equalisation
        : scheme. Beyond this radius the terms are calculated
        : using just the inverse distance. Generally the default
        : value should be large enough for convergence. However,
        : the user may wish to try smaller values to achieve a
        : faster calculation. Note that failure to achieve
        : satisfactory convergence in an optimisation may be
        : due to this value being too small.
See also: eem, qeq, qeqiter, qeqtol, dcharge
@@minimum_image
Topic   : minimum_image
Type    : Keyword
Use     : Requests that the real space components of the energy for
        : a solid are calculated using the minimum image convention
        : during a molecular dynamics or conjugate gradient simulation. 
        : For large unit cells this can accelerate the real space 
        : calculation of the program by reducing the work done in 
        : searching for interactions, especially for right angled unit cells.
See also: md
@@integrator
Topic   : integrator
Type    : Option
Format  : integrator <gear/velocity verlet/leapfrog verlet/stochastic> <iter>
Default : stochastic (note this is a change from earlier versions)
Use     : Specifies the integration algorithm to be used in molecular
        : dynamics as being the Gear 5th order or either of the
        : velocity or leapfrog methods of Verlet. Currently the Gear
        : algorithm is only available in the NVE ensemble.
See also: md, tau_barostat, tau_thermostat, p_isotropic, p_flexible
@@p_isotropic
Topic   : p_isotropic
Type    : Option
Format  : p_isotropic <value>
Use     : Used only for restarting a molecular dynamics simulation with the
        : stochastic integrator. Not intended for user input.
See also: integrator
@@p_flexible
Topic   : p_flexible
Type    : Option
Format  : p_flexible 
        : p_flx(1,1) p_flx(2,1) p_flx(3,1)
        : p_flx(1,2) p_flx(2,2) p_flx(3,2)
        : p_flx(1,3) p_flx(2,3) p_flx(3,3)
Use     : Used only for restarting a molecular dynamics simulation with the
        : stochastic integrator. Not intended for user input.
See also: integrator
@@rydberg
Topic   : rydberg
Type    : Option
Format  : rydberg <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14>
        : atom1 atom2 A B r0 <rmin> rmax <3*flags>
Units   : A in eV, r0 in Angs
Use     : Rydberg potential also found in the following article
        : Rose/Smith/Guinea/Ferrante potential (Phys. Rev. B,
        : 29, 2963 (1984)) - used in modelling metals.
        :
        : E = -A.[1+B*((r/r0)-1)].exp(-B*((r/r0)-1))
        :
@@manybody
Topic   : manybody
Type    : option
Format  : manybody 
        : atom1 atom2 <rmin> rmax 
Defaults: rmin = 0
Use     : Specifies that a manybody potential should act between this
        : pair of atoms. This implies that the density of each atom
        : at the other will be calculated. The energy is subsequently
        : calculated as a function of the total density at each site.
        : This option is used as part of the Embedded Atom Model for
        : metals and is based on the ideas of Finnis-Sinclair and
        : subsequently other workers, such as Sutton-Chen.
        :
        : The densities at each site are determined by the "eam_density"
        : option and the functional dependance on the total density
        : by "eam_functional".
        :
        : Note that although for simplicity the manybody potential
        : appears as part of the two-body potentials, it is infact
        : many body at short-range, but tends to an effective pair
        : potential at long range. Also note that this potential type
        : is NOT compatible with <intra/inter/molmec> directives.
See also: eam_density, eam_functional, scmaxsearch, noquicksearch
@@noquick
Topic   : noquicksearch
Type    : Keyword
Use     : Turns off some timesaving changes to the searching algorithm for
        : pairs of distances. Should have no effect, but this is still
        : under evaluation!
@@srglue
Topic   : srglue
Type    : Option
Format  : srglue <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 d rmin rmax 
        : a14 a13 a12 a11 a10
        : a26 a25 a24 a23 a22 a21 a20
Units   : eV and Angstroms
Default : none
Use     : Input for the Short-Range part of the Glue model:
        :
        : if r < d:
        :
        : E = a14*(r-d)**4 + a13*(r-d)**3 + a12*(r-d)**2 + a11*(r-d) + a10
        :
        : if d < r =< rmax:
        :
        : E = a26*(r-d)**6 + a25*(r-d)**5 + a24*(r-d)**4 + a23*(r-d)**3 + 
        :     a22*(r-d)**2 + a21*(r-d) + a20
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
See also: eam_functional, eam_density
@@eam_functional
Topic   : eam_functional
Type    : option
Format  : eam_functional <square_root> <power n> <banerjea_smith n> <johnson/glue/foiles/mei-davenport/baskes/vbo>
        : if square_root or power :
        : atom1 A_1 <flag>
        : atom2 A_2 <flag> etc...
        : if banerjea_smith :
        : atom1 F0_1 F1_1 rho0_1 <3*flags>
        : atom2 F0_2 F1_2 rho0_2 <3*flags> etc...
        : if johnson :
        : atom1 F0_1 F1_1 rho0_1 alpha beta gamma <6*flags>
        : atom2 F0_2 F1_2 rho0_2 alpha beta gamma <6*flags> etc...
        : if glue :
        : atom1 rho1 rho2
        :   c1_4 c1_3 c1_2 c1_1 c1_0
        :   c2_4 c2_3 c2_2 c2_1 c2_0
        :   c3_3 c3_2 c3_1 c3_0 
        : atom2 rho1 rho2
        :   c1_4 c1_3 c1_2 c1_1 c1_0
        :   c2_4 c2_3 c2_2 c2_1 c2_0
        :   c3_3 c3_2 c3_1 c3_0 
        : if foiles :
        : atom1 F0_1 F1_1 F2_1 F3_1 <4*flags>
        : atom2 F0_2 F1_2 F2_2 F3_2 <4*flags> etc...
        : if mei-davenport :
        : atom1 Ec_1 alpha_1 beta_1 gamma_1 delta_1 phi0_1 s_1_1 s_2_1 s_3_1 <9*flags>
        : atom2 Ec_2 alpha_2 beta_2 gamma_2 delta_2 phi0_1 s_1_2 s_2_2 s_3_2 <9*flags> etc...
        : if baskes :
        : atom1 AE0_1 rho0_1 <2*flags>
        : atom2 AE0_2 rho0_2 <2*flags> etc...
        : if vbo :
        : atom1 A_1 rn_1 <2*flags>
        : atom2 A_2 rn_2 <2*flags> etc...
Units   : A, AE0, F0, Ec, phi0 and F1 in eV, rho0/alpha/beta/gamma/rn are dimensionless
Default : square_root, A = 1.0
Use     : specifies how the total energy contribution of an atom
        : in the Embedded Atom Model depends on the density at that
        : site. The current possibilities are:
        :
        : Square_root:
        :
        :    E = - sum(i) A(i)*(rho(i))**1/2
        :
        : this is the most common functional, as used in the Sutton-Chen
        : potential
        :
        : Power:
        :
        :    E = - sum(i) A(i)*(rho(i))**1/n
        :
        : this is just a generalisation of the above case
        :
        : VBO:
        :
        :    E = - sum(i) A(i)*(rho(i))**rn
        :
        : this is a further generalisation of the power case
        :
        : Banerjea_smith:
        :
        :    E = - sum(i) F0 [1-ln(r)/n]*r**1/n + F1*r
        :
        :    where r = rho(i)/rho0(i) 
        :
        : this is the functional of Banerjea and Smith (Phys. Rev. B,
        : 37, 6632 (1988)) - note that in this case that are atom 
        : dependent parameters also to be specified (F0, F1, rho0)
        : where rho0 is the electron density at equilibrium.
        :
        : Johnson:
        :
        :    E = - sum(i) F0 [1-ln(x)]*x + F1*y
        :
        :    where x = (rho(i)/rho0(i))**(alpha/beta)
        :    and   y = (rho(i)/rho0(i))**(gamma/beta)
        :
        : this functional is similar to that of Banerjea & Smith and is due
        : to Johnson (PRB, 39, 12554 (1989)).
        :
        : Glue:
        :
        :   if rho < rho1
        :     E = c1_4*(rho-rho1)**4 + c1_3*(rho-rho1)**3 + c1_2*(rho-rho1)**2 +
        :         c1_1*(rho-rho1)    + c1_0
        :
        :   if rho1 =< rho < rho2
        :     E = c2_4*(rho-rho2)**4 + c2_3*(rho-rho2)**3 + c2_2*(rho-rho2)**2 +
        :         c2_1*(rho-rho2)    + c2_0
        :
        :   if rho2 =< rho
        :     E = c3_3*(rho-rho2)**3 + c3_2*(rho-rho2)**2 + c3_1*(rho-rho2) + c3_0
        :
        : this is the functional from Ercolessi et al, Phil. Mag. A, 58, 213 (1988).
        : NB: At present there are no fitting parameters since there are constraints
        : on the coefficients to ensure a smooth and continuous function.
        :
        : Foiles:
        :
        :    E = sum(i) F0*rho(i)**2 + F1*rho(i) + F2*(rho(i)**(5/3)/(F3 + rho(i)))
        :
        : Mei-Davenport:
        :
        :    E = sum(i) - Ec*[1-(alpha/beta)*ln(rho(i))]*rho(i)**(alpha/beta) +
        :               sum(m=1->3) 0.5*phi0*s_m*exp(-(sqrt(m)-1)*gamma)*
        :                     [1+(sqrt(m)-1)*delta-sqrt(m)*delta*ln(rho(i))/beta]*
        :                     rho(i)**(sqrt(m)*gamma/beta)
        :
        : Baskes:
        :
        :    E = - sum(i) AE0*x*ln(x)
        :
        :    where x = (rho(i)/rho0(i))
        :
        : this functional is similar to that of Banerjea & Smith and Johnson, but
        : is simplified to enable the parameters from the MEAM paper of Baskes to 
        : be input directly. AE0 is the combination of E0 and A from the above paper.
        :
See also: eam_density, manybody, scmaxsearch, eam_alloy, prt_eam
@@eam_density
Topic   : eam_density
Type    : option
Format  : eam_density <power n/fpower/exponential n/gaussian n/cubic/quadratic/quartic/voter/glue/evoter/mei-davenport/baskes/vbo>
        : atom1 <atom2> C                    (power law)             <1 x flag >
        : atom1 <atom2> C rn                 (fractional power law)  <2 x flag >
        : atom1 <atom2> A B r0               (exponential)           <3 x flags>
        : atom1 <atom2> A B r0               (gaussian)              <3 x flags>
        : atom1 <atom2> A r0                 (quadratic)             <2 x flags>
        : atom1 <atom2> A r0                 (cubic)                 <2 x flags>
        : atom1 <atom2> A r0                 (quartic)               <2 x flags>
        : atom1 <atom2> A beta               (voter)                 <2 x flags>
        : atom1 <atom2> A beta               (evoter)                <2 x flags>
        : atom1 <atom2> c0 c1 c2 c3 c4 c5 r0 (mei-davenport)         <7 x flags>
        : atom1 <atom2> r1 r2 rm             (glue)          
        :       b1_3 b1_2 b1_1 b1_0
        :       b2_3 b2_2 b2_1 b2_0
        :       b3_3 b3_2 b3_1 b3_0
        : atom1 <atom2> A beta r0            (baskes)                <3 x flags>
        : atom1 <atom2> c sigma gamma r0 delta (vbo)                 <5 x flags>
Units   : Distances are in Angstrom
Use     : specifies the density due to a given atom1 at another
        : atomic centre (atom2) in the Embedded Atom Model (EAM).
        : This density is only calculated for pairs of atoms
        : where the "manybody" potential has been specified
        : so that the user can control which atoms are part
        : of the EAM.
        : Where no atom2 is specified then the density is applied to
        : all atoms allowed by the manybody potential, regardless of
        : species type.
        : The density can take one of several functional forms:
        :
        : Power Law:
        :
        : rho(i) = C*rij**(-n)
        :
        : e.g.     eam_density power 6
        :          Ni core  729.7
        :
        : Fractional power Law:
        :
        : rho(i) = C*rij**(-rn)
        :
        : e.g.     eam_density fpower 
        :          Ni core  729.7  6.1
        :
        : Exponential:
        :
        : rho(i) = A*(rij**n)*exp(-B(rij-r0))
        :
        : e.g.     eam_density exponential 0
        :          Ni core  500.0 4.0 3.52
        :
        : Gaussian:
        :
        : rho(i) = A*(rij**n)*exp(-B(rij-r0)**2)
        :
        : e.g.     eam_density gaussian 2
        :          Ni core  400.0 3.0 3.52
        :
        : Quadratic:
        :
        : rho(i) = A*(rij-r0)**2 if r < r0, else = 0
        :
        : Cubic:
        :
        : rho(i) = A*(rij-r0)**3 if r < r0, else = 0
        :
        : Quartic:
        :
        : rho(i) = A*(rij-r0)**4 if r < r0, else = 0
        :
        : Voter:
        :
        : rho(i) = A*r**6*(exp(-beta*r) + 2**9*exp(-2*beta*r))
        :
        : eVoter:
        :
        : rho(i) = A*r**6*(exp(-beta*r) + 2**9*exp(-2*beta*r))*exp(-1/(rmax - r))
        :
        : Mei-Davenport:
        :
        : rho(i) = sum(l=0->5) (c_l/12)*(r/r0)**l
        :
        : In the above, rmax is the cutoff for the potential from the manybody
        : option that controls the range of the density.
        :
        : Glue:
        :
        :   if r < r1
        :     rho(i) = b1_3*(r-r1)**3 + b1_2*(r-r1)**2 + b1_1*(r-r1) + b1_0
        :
        :   if r1 =< r < r2
        :     rho(i) = b2_3*(r-r2)**3 + b2_2*(r-r2)**2 + b2_1*(r-r2) + b2_0
        :
        :   if r2 =< r < rm
        :     rho(i) = b3_3*(r-rm)**3 + b3_2*(r-rm)**2 + b3_1*(r-rm) + b3_0
        :
        : Note that the cut-offs are set by the manybody potential except
        : for the glue model where the maximum cutoff, rm, is a parameter
        : of the model.
        :
        : Baskes:
        :
        : rho(i) = A*exp(-beta((rij/r0)-1))
        :
        : VBO:
        :
        : rho(i) = c*sigma*N*exp(-gamma/(1 - sqrt(r/delta)))
        :
        : where N is a normalisation constant given by:
        :
        : N = exp(gamma/(1 - sqrt(r0/delta)))
        :
See also: manybody, eam_functional, scmaxsearch, eam_alloy, prt_eam, meam_density
@@meam_density
Topic   : meam_density
Type    : option
Format  : meam_density order <power n/fpower/exponential n/gaussian n/cubic/quadratic/quartic/voter/glue/evoter/mei-davenport/baskes/vbo> 
        : atom1 <atom2> C                      (power law)             <1 x flag >
        : atom1 <atom2> C rn                   (fractional power law)  <2 x flag >
        : atom1 <atom2> A B r0                 (exponential)           <3 x flags>
        : atom1 <atom2> A B r0                 (gaussian)              <3 x flags>
        : atom1 <atom2> A r0                   (quadratic)             <2 x flags>
        : atom1 <atom2> A r0                   (cubic)                 <2 x flags>
        : atom1 <atom2> A r0                   (quartic)               <2 x flags>
        : atom1 <atom2> A beta                 (voter)                 <2 x flags>
        : atom1 <atom2> A beta                 (evoter)                <2 x flags>
        : atom1 <atom2> c0 c1 c2 c3 c4 c5 r0   (mei-davenport)         <7 x flags>
        : atom1 <atom2> A beta r0              (baskes)                <3 x flags>
        : atom1 <atom2> c sigma gamma r0 delta (vbo)                   <5 x flags>
        :
        : if order > 0 then there will be addition lines of the following form for each higher order
        :
        :               C                      (power law)     <1 x flag >
        :               A B r0                 (exponential)   <3 x flags>
        :               A B r0                 (gaussian)      <3 x flags>
        :               A r0                   (quadratic)     <2 x flags>
        :               A r0                   (cubic)         <2 x flags>
        :               A r0                   (quartic)       <2 x flags>
        :               A beta                 (voter)         <2 x flags>
        :               A beta                 (evoter)        <2 x flags>
        :               c0 c1 c2 c3 c4 c5 r0   (mei-davenport) <7 x flags>
        :               A beta r0              (baskes)        <3 x flags>
        :               c sigma gamma r0 delta (vbo)           <5 x flags>
        :
        : NB: The maximum value of order is currently 3
        :
Units   : Distances in Angstrom
Defaults: order = 3
Use     : specifies the density due a given atom1 at another
        : atomic centre (atom2) in the Modified Embedded Atom Model (MEAM).
        : This density is only calculated for pairs of atoms
        : where the "manybody" potential has been specified
        : so that the user can control which atoms are part
        : of the EAM.
        : Where no atom2 is specified then the density is applied to
        : all atoms allowed by the manybody potential, regardless of
        : species type.
        :
        : In the MEAM formalism the density is a sum of contributions over
        : a number of orders:
        :
        : rho_tot(i)**2 = sum(order = 0->3) t_order*rho_order(i)**2
        :
        : where t is a coefficient for each order.
        :
        : The radial component of the density can take one of several functional forms:
        :
        : Power Law:
        :
        : rho(i) = C*rij**(-n)
        :
        : e.g.     meam_density 3 power 6
        :          Ni core  729.7 
        :                   429.2 
        :                   219.5 
        :                   106.2 
        :
        : Fractional power Law:
        :
        : rho(i) = C*rij**(-rn)
        :
        : e.g.     meam_density 3 fpower 
        :          Ni core  729.7 6.1
        :                   429.2 
        :                   219.5 
        :                   106.2 
        :
        : Exponential:
        :
        : rho(i) = A*(rij**n)*exp(-B(rij-r0))
        :
        : e.g.     meam_density 0 exponential 0
        :          Ni core  500.0 4.0 3.52 
        :
        : Gaussian:
        :
        : rho(i) = A*(rij**n)*exp(-B(rij-r0)**2)
        :
        : e.g.     meam_density 1 gaussian 2
        :          Ni core  400.0 3.0 3.52
        :                   200.0 1.5 1.46
        :
        : Quadratic:
        :
        : rho(i) = A*(rij-r0)**2 if r < r0, else = 0
        :
        : Cubic:
        :
        : rho(i) = A*(rij-r0)**3 if r < r0, else = 0
        :
        : Quartic:
        :
        : rho(i) = A*(rij-r0)**4 if r < r0, else = 0
        :
        : Voter:
        :
        : rho(i) = A*r**6*(exp(-beta*r) + 2**9*exp(-2*beta*r))
        :
        : eVoter:
        :
        : rho(i) = A*r**6*(exp(-beta*r) + 2**9*exp(-2*beta*r))*exp(-1/(rmax - r))
        :
        : Mei-Davenport:
        :
        : rho(i) = sum(l=0->5) (c_l/12)*(r/r0)**l
        :
        : Baskes:
        :
        : rho(i) = A*exp(-beta((rij/r0)-1))
        :
        : e.g.     meam_density 1 baskes
        :          N  core  1.0 4.0 1.10 
        :                   1.0 4.0 1.10 
        :
        : NB: This form is a re-working of the exponential form for convenience for MEAM.
        :
        : In the above, rmax is the cutoff for the potential from the manybody
        : option that controls the range of the density.
        :
        : VBO:
        :
        : rho(i) = c*sigma*N*exp(-gamma/(1 - sqrt(r/delta)))
        :
        : where N is a normalisation constant given by:
        :
        : N = exp(gamma/(1 - sqrt(r0/delta)))
        :
        : Note that the cut-offs are set by the manybody potential.
        :
See also: manybody, meam_functional, scmaxsearch, eam_alloy, prt_eam, eam_density, baskes, meam_screening
@@meam_functional
Topic   : meam_functional
Type    : option
Format  : meam_functional order <square_root/power n/banerjea_smith n/johnson/glue/foiles/mei-davenport/baskes/vbo> <t21/t21> <sum>
        :
        : if square_root or power :
        : atom1 A_1 <1*flag>
        :       t_0 ... t_order <order+1*flags>
        : atom2 A_2 <1*flag> etc...
        :       t_0 ... t_order <order+1*flags>
        :
        : if banerjea_smith :
        : atom1 F0_1 F1_1 rho0_1 <3*flags>
        :       t_0 ... t_order <order+1*flags>
        : atom2 F0_2 F1_2 rho0_2 <3*flags> etc...
        :       t_0 ... t_order <order+1*flags>
        :
        : if johnson :
        : atom1 F0_1 F1_1 rho0_1 alpha beta gamma <6*flags>
        :       t_0 ... t_order <order+1*flags>
        : atom2 F0_2 F1_2 rho0_2 alpha beta gamma <6*flags> etc...
        :       t_0 ... t_order <order+1*flags>
        :
        : if glue :
        : atom1 rho1 rho2 
        :       c1_4 c1_3 c1_2 c1_1 c1_0
        :       c2_4 c2_3 c2_2 c2_1 c2_0
        :       c3_3 c3_2 c3_1 c3_0 
        :       t_0 ... t_order <order+1*flags>
        : atom2 rho1 rho2 
        :       c1_4 c1_3 c1_2 c1_1 c1_0
        :       c2_4 c2_3 c2_2 c2_1 c2_0
        :       c3_3 c3_2 c3_1 c3_0 
        :       t_0 ... t_order <order+1*flags>
        :
        : if foiles :
        : atom1 F0_1 F1_1 F2_1 F3_1 <4*flags>
        :       t_0 ... t_order <order+1*flags>
        : atom2 F0_2 F1_2 F2_2 F3_2 <4*flags> etc...
        :       t_0 ... t_order <order+1*flags>
        :
        : if mei-davenport :
        : atom1 Ec_1 alpha_1 beta_1 gamma_1 delta_1 phi0_1 s_1_1 s_2_1 s_3_1 <9*flags>
        :       t_0 ... t_order <order+1*flags>
        : atom2 Ec_2 alpha_2 beta_2 gamma_2 delta_2 phi0_1 s_1_2 s_2_2 s_3_2 <9*flags> etc...
        :       t_0 ... t_order <order+1*flags>
        :
        : if baskes :
        : atom1 AE0_1 rho0_1 <2*flags>
        :       t_0 ... t_order <order+1*flags>
        : atom2 AE0_2 rho0_1 <2*flags> etc...
        :       t_0 ... t_order <order+1*flags>
        :
        : if vbo :
        : atom1 A_1 rn_1 <2*flags>
        :       t_0 ... t_order <order+1*flags>
        : atom2 A_2 rn_2 <2*flags> etc...
        :       t_0 ... t_order <order+1*flags>
        :
Units   : A, AE0, F0, Ec, phi0 and F1 in eV, rho0/alpha/beta/gamma/t0... are dimensionless
Default : square_root, A = 1.0, order = 3, t24, exponential density relationship
Use     : Specifies how the total energy contribution of an atom in the
        : Modified Embedded Atom Model depends on the density components at that
        : site. The current possibilities are:
        :
        : Square_root:
        :
        :    E = - sum(i) A(i)*(rho(i))**1/2
        :
        : this is the most common functional, as used in the Sutton-Chen
        : potential
        :
        : Power:
        :
        :    E = - sum(i) A(i)*(rho(i))**1/n
        :
        : this is just a generalisation of the above case
        :
        : VBO:
        :
        :    E = - sum(i) A(i)*(rho(i))**rn
        :
        : this is a further generalisation of the power case
        :
        : Banerjea_smith:
        :
        :    E = - sum(i) F0 [1-ln(r)/n]*r**1/n + F1*r
        :
        :    where r = rho(i)/rho0(i) 
        :
        : this is the functional of Banerjea and Smith (Phys. Rev. B,
        : 37, 6632 (1988)) - note that in this case that are atom 
        : dependent parameters also to be specified (F0, F1, rho0)
        : where rho0 is the electron density at equilibrium.
        :
        : Johnson:
        :
        :    E = - sum(i) F0 [1-ln(x)]*x + F1*y
        :
        :    where x = (rho(i)/rho0(i))**(alpha/beta)
        :    and   y = (rho(i)/rho0(i))**(gamma/beta)
        :
        : this functional is similar to that of Banerjea & Smith and is due
        : to Johnson (PRB, 39, 12554 (1989)).
        :
        : Glue:
        :
        :   if rho < rho1
        :     E = c1_4*(rho-rho1)**4 + c1_3*(rho-rho1)**3 + c1_2*(rho-rho1)**2 +
        :         c1_1*(rho-rho1)    + c1_0
        :
        :   if rho1 =< rho < rho2
        :     E = c2_4*(rho-rho2)**4 + c2_3*(rho-rho2)**3 + c2_2*(rho-rho2)**2 +
        :         c2_1*(rho-rho2)    + c2_0
        :
        :   if rho2 =< rho
        :     E = c3_3*(rho-rho2)**3 + c3_2*(rho-rho2)**2 + c3_1*(rho-rho2) + c3_0
        :
        : this is the functional from Ercolessi et al, Phil. Mag. A, 58, 213 (1988).
        : NB: At present there are no fitting parameters since there are constraints
        : on the coefficients to ensure a smooth and continuous function.
        :
        : Foiles:
        :
        :    E = sum(i) F0*rho(i)**2 + F1*rho(i) + F2*(rho(i)**(5/3)/(F3 + rho(i)))
        :
        : Mei-Davenport:
        :
        :    E = sum(i) - Ec*[1-(alpha/beta)*ln(rho(i))]*rho(i)**(alpha/beta) +
        :               sum(m=1->3) 0.5*phi0*s_m*exp(-(sqrt(m)-1)*gamma)*
        :                     [1+(sqrt(m)-1)*delta-sqrt(m)*delta*ln(rho(i))/beta]*
        :                     rho(i)**(sqrt(m)*gamma/beta)
        :
        : Baskes:
        :
        :    E = sum(i) AE0*x*ln(x)
        :
        :    where x = (rho(i)/rho0(i))
        :
        : this functional is similar to that of Banerjea & Smith and Johnson, but
        : is simplified to enable the parameters from the MEAM paper of Baskes to 
        : be input directly. AE0 is the combination of E0 and A from the above paper.
        :
        : The value of order species the maximum order of the MEAM functional. Usually
        : MEAM involves components from order 0 to 3 and values outside this range are
        : not currently permitted.
        :
        : For all functionals, the values of t_0, t_1, ... t_order are the coefficients
        : for the density contribution of each order.
        : 
        : There are several different formulations of MEAM that have evolved according
        : to both the number of angular momentum terms and the way that they are 
        : combined. They can largely be broken down into the first, nearest-neighbour
        : form (1NN), and the revised second nearest neighhbour form (2NN).
        : In the original formulation there were 21 components of the density
        : while later forms adopt 24 (3 extra terms for the order = 3 case). Which form
        : is used can be selected using the sub-options:
        :
        : t21 = 1NN 21 term expression
        : t24 = 2NN 24 term expression
        :
        : There are also two different ways that the total density, rho, can be assembled
        : from the component density orders, rho_i. In the original version, 1NN, a simple
        : sum of the densities squared, square rooted, was used and this can be selected
        : by the sub-option, sum:
        :
        : rho = sqrt[ sum (i=0->order) (t_i*rho_i**2) ]
        :
        : In later versions of the methodology (2NN) then a different form was proposed to 
        : avoid issues with the density becoming negative;
        :
        : rho = rho_0*G(gamma)
        :
        : where;
        :
        : G(gamma) = 2/(1 + exp(-gamma))
        :
        : and;
        :
        : gamma = [ sum (i=0->order) (t_i*(rho_i/rho_0)**2) ]
        :
        : This second form is the default choice unless "sum" is given.
        :
See also: meam_density, manybody, scmaxsearch, eam_alloy, prt_eam, baskes, meam_screening
@@meam_screening
Topic   : meam_screening
Type    : Option
Format  : meam_screening Cmin Cmin
Units   : none
Default : No screening (i.e. simple radial cut-offs applied)
Use     : Controls the truncation of the MEAM density by applying a screening function to 
        : the pairwise density between two atoms. For a pair of atoms, i-j, the screening
        : function is given by:
        :
        : S_ij = Product(k=1,N,k.ne.i,k.ne.j) S_ikj
        :
        : where S_ikj is given by the construct described in M.I. Baskes, Mater. Chem. Phys.,
        : 50, 152-158 (1997):
        :
        : S_ikj = f_e(x)
        :
        : f_e(x) = 1 ; x >= 1
        :        = [1 - (1-x)**4]**2 ; 1 > x > 0
        :        = 0 ; x =< 1
        :
        : x = (C - Cmin)/(Cmax - Cmin)
        :
        : C = [2(X_ik + X_jk) - (X_ik - X_jk)**2 - 1]/[1 - (X_ik - X_jk)**2]
        :
        : where X_ik = (r_ik/r_ij)**2 and X_jk = (r_jk/r_ij)**2
        :
        : NB: Analytic second derivatives are currently not available when
        : screening is turned on.
See also: meam_density, meam_functional
@@eam_alloy
Topic   : eam_alloy
Type    : Option
Format  : eam_alloy
        : atom scale <1 x flag> 
Units   : None
Default : scale = 1.0
Use     : This option applies a scaling transformation to the EAM method.
        : While this has no effect on pure elements, it influences the
        : results for alloys. The transformation is applied as;
        :
        : rho'(i) = scale(i)*rho(i)
        :
        : F'(sum(rho(i))) = F(sum(rho(i))/scale(i))
        :
        : where F is the unscaled function of the density.
        :
See also: manybody, eam_functional, eam_density, scmaxsearch
@@eam_potential_shift
Topic   : eam_potential_shift
Type    : Option
Format  : eam_potential_shift <inter/intra> <bond/x12/x13/mol/o14> <ener/grad> <kjmol/kcal/au> <scale14>
        : atom1 atom2 g beta <rmin> rmax <2*flags>
Units   : beta is in inverse Angstroms, g is nominally unit less as it is multiplied
        : by a conversion constant to place it in eV
Default : None
Use     : Specifies a two-body shift of the EAM potential energy component based on
        : the functional form of the Voter-Chen density. Needed to work with the
        : embedding potential in the format used by Paradyn.
        :
        : The form of the potential is
        :
        : E = 2.0*g*r**6*(exp(-beta*r) + 2**9*exp(-2*beta*r))
        :
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
See also: manybody, eam_functional, eam_density
@@vbo_twobody
Topic   : vbo_twobody
Type    : Option
Format  : vbo_twobody
        : atom1 atom2 c gamma R0 delta <4xflags>
Units   : c in eV; R0 and delta in Angstroms; gamma is unitless
Default : None
Use     : Twobody potential of a form suitable for use as part of VBO model of Truhlar et al.
        : 
        : E = N.exp(-gamma/(1-sqrt(r/delta))) for r < delta & E = 0 for r >= delta
        : 
        : NB: Because the potential goes to zero at delta there is no rmax or rmin for this
        : potential (i.e. rmax = delta).
        : 
        : The normalisation constant N is given by:
        : 
        : N = 2*exp(gamma/(1-sqrt(R0/delta)))
        : 
        : NB: The factor of two in N comes from the translation of how the two-body sum is 
        : expressed in the papers by Truhlar to how it is implemented in GULP.
        : 
See also: eam_functional, eam_density
@@baskes
Topic   : baskes
Type    : Option
Format  : baskes
        : atom1 atom2 Ec A alpha r0 Z rho0 d <rmin> rmax <5xflags>
        :             s_0 s_1 s_2 s_3
        :             t_0 t_1 t_2 t_3
        :             b_0 b_1 b_2 b_3
Units   : Ec in eV; r0 in Angstroms; A, Z, alpha, d, b, s, and t are unitless
Default : None
Use     : This option specifies the two-body potential between atoms need for the MEAM
        : method. The form is constructed based on the difference between the Rose 
        : equation of state and the form of the embedding function for a reference
        : structure (such as fcc, bcc, hcp, etc).
        : The form of the potential is:
        :
        : E = - (2/Z)*Ec*{(1+a+d*a**3)*exp(-a) + A*(rho_ref(r)/rho0)*ln((rho_ref(r)/rho0))}
        :
        : where:
        :
        : Z    = the number of nearest neighbours in the reference structure (NB no fitting flag)
        : Ec   = cohesive energy of the reference structure
        : r0   = equilibrium distance in the reference structure
        : rho0 = density for equilibrium reference structure (NB no fitting flag)
        : rho_ref(r) = density for reference structure when distance is r.
        : a    = (alpha/r0)*(r-r0)
        : d    = unitless factor that modifies shape of equation - usually 0.0
        :
        : The value of rho_ref(r) is given by the following expression:
        :
        : rho_ref(r) = sqrt[ sum(l=0->3) s_l*t_l*rho_l(r)**2 ]
        :
        : where rho_l = exp(-(b_l/r0)*(r-r0))
        :
        : here t_l is the coefficient of the l'th order density square in MEAM and s_l is a
        : geometric factor for the reference structure in question that depends on the l'th
        : order.
        :
See also: meam_functional, meam_density
@@prt_eam
Topic   : prt_eam
Type    : Keyword
Use     : Output the density and energy associated with atoms during an EAM calculation.
        : For a MEAM calculation, the density printed is the total when summed over the
        : component orders.
See also: eam_functional, eam_density, prt_two, prt_four, prt_three
@@prt_two
Topic   : prt_two
Type    : Keyword
Use     : Output the real space twobody energy contributions.
See also: prt_eam, prt_four, prt_three
@@prt_four
Topic   : prt_four
Type    : Keyword
Use     : Output the fourbody energy contributions. The atoms are output in 
        : the order of the torsion, 1-2-3-4, or with the middle atom as number 1
        : for the out of plane terms.
See also: prt_eam, prt_two, prt_three
@@prt_three
Topic   : prt_three
Type    : Keyword
Use     : Output the threebody energy contributions. Atom 1 is the pivot atom
        : when output.
See also: prt_eam, prt_two, prt_four
@@newda
Topic   : newda
Type    : Keyword
Use     : if specified this selects the new defect algorithm
        : in which all ions in region 2 that interact with
        : region 1 are stored. The advantage of this approach
        : is that there is no need to add and then subtract
        : contributions from the non-defective region 1 to the 
        : short range energy. This leads to increased numerical
        : stability, but tends to be slower than the old
        : algorithm except where numerical problems slow down
        : the rate of convergence. The other downside is that
        : the storage needed for region 2a will be larger.
        : When using the Embedded Atom Model this algorithm
        : must be used and will therefore automatically be 
        : selected.
See also: defect
@@qok
Topic   : qok
Type    : Keyword
Use     : if specified this allows a periodic calculation to be
        : run when a solid is not charge neutral. This implies
        : that a neutralising uniform charge background will be
        : added. 
        : Note that defect calculation cannot be performed when
        : this term is present.
See also: madelung
@@madelung
Topic   : madelung
Type    : Keyword
Use     : If the cell is cubic, then a Madelung correction can be
        : applied to the electrostatics of a charged system to 
        : put the energy to zero. This assumes a single point ion
        : excess charge (e.g. one charged ion in a box). The 
        : energy correction is given by:
        :
        : E = 1/2 alpha*Q**2/(epsilon_0*L) 
        :
        : where alpha is the Madelung constant (2.8373 for a simple
        : cubic case), Q is the excess charge and L the side of the
        : cubic box. 
See also: qok
@@dipole
Topic   : dipole
Type    : Keyword
Use     : For crystals where there is a dipole moment within the
        : unit cell it adds the correction term to the energy:
        :
        : E = 2*pi*D**2 / 3.V
        :
        : where D is the dipole per unit cell and V is the volume.
        : By default the Ewald sum assumes that there is no dipole
        : moment across the crystal, while this term is applicable
        : to cases where there is a permenant dipole. Note 
        : that the dipole is ambiguous in many cases because it
        : depends on the termination of the crystal at the surface
        : and hence this correction should be used with care!
        : Note that defect calculations cannot be performed when 
        : this term is present.
@@oldelastic
Topic   : oldelastic
Type    : keyword
Use     : It has recently been found that there was a term missing
        : from the original published expressions for some of the
        : elastic constants as coded in all known programs in this
        : area. Because the missing term is the first strain derivative
        : there will only have been an error in elastic constants
        : calculated away from the equilibrium geometry (where they
        : are not particularly meaningful). Hence most results will
        : still be correct despite this missing term, except where
        : complex structures have been fitted to elastic constants
        : without the relax option.
See also: prop
@@ensemble
Topic   : ensemble
Type    : option
Format  : ensemble <NVE/NVT qnose/NPT qnose qpress/NPH>
Default : NVE
Use     : Selects the ensemble to be use in molecular dynamics.
        : By default the program uses constant number, volume
        : and energy. However, the canonical ensemble can be
        : chosen if constant temperature is prefered to constant
        : energy. If NVT is selected then the Nose-Hoover 
        : thermostat parameter must also be given. It is important
        : to choose a suitable value such that the temperature
        : fluctuations are minimised. For constant pressure,
        : variable cell shape MD, the NPT ensemble can be used
        : (keyword "conp" must be present). In this case it is
        : necessary to supply the thermostat parameter and the
        : barostat parameter. Both again need tuning to get the
        : best performance for each system. NPT ensemble is
        : implemented as a modified Nose-Hoover form based on
        : Melchionna et al., Mol. Phys. 78 (1993) 533.
See also: md, integrator, tau_barostat, tau_thermostat
@@tau_barostat
Topic   : tau_barostat
Type    : Option
Format  : tau_barostat tau <s/ns/ps/fs>
Units   : s, ns, ps or fs; default is ps
Default : 1 ps
Use     : Specifies the relaxation time for the barostat if the integrator is
        : set to type "stochastic".
See also: integrator, md, tau_thermostat
@@tau_thermostat
Topic   : tau_thermostat
Type    : Option
Format  : tau_thermostat tau <s/ns/ps/fs>
Units   : s, ns, ps or fs; default is ps
Default : 1 ps
Use     : Specifies the relaxation time for the thermostat if the integrator is
        : set to type "stochastic".
See also: integrator, md, tau_barostat
@@intconserved
Topic   : intconserved
Type    : Option 
Format  : intconserved pr_cons 
Units   : eV
Default : 0.0
Use     : Specifies the integral of the conserved quantity so far for use in an MD run
        : for correct restarting.
See also: md, integrator, conserved
@@tether
Topic   : tether
Type    : Option
Format  : tether n1-n2 or n1,n2, ... or any combination of both
Use     : Specifies atoms to keep fixed during a molecular dynamics calculation.
        : These atoms create forces on other atoms, but do not move themselves.
        : n1, n2 ... is the number of the atom in the input file, e. g. if
        : atoms 2, 3, 4, and 7 shall be kept fixed tether 2-4,7 will do that.
        : NB: The line continuation character should not be used with the tether
        : option. Instead multiple tether lines can be used.
        : e.g.
        :
        : tether  1-3,    121-    123, 127 - 129
        : tether  143 - 146, 150, 152, 181 - 183, 10, 11, 12
        :
See also: md
@@shellmass
Topic   : shellmass
Type    : Option
Format  : shellmass 
        : species_symbol ratio
Default : ratio = 0.0
Use     : Specifies that shells will get assigned masses in shell model
        : molecular dynamics. If shells have a mass their equations of motion
        : are integrated as for a core. "ratio" is the fraction of the total
        : mass of an ion which will be assigned to the shell. It has to be
        : selected so that the shell motions are significantly faster than
        : the motions of the cores. GULP calculates "wave numbers" for the
        : core/shell relative motion if this option is specified to assist
        : in the selection of a suitable ratio. Note that the finite mass
        : algorithm is not compatible with breathing shells - the iterations
        : option should be used instead in this case.
        : The shellmass ratio should be specified for each species, unlike
        : previous versions.
        : e.g.
        : 
        : shellmass
        : Al 0.25
        : O  0.12
        : 
See also: iterations, md
@@mdarchive
Topic   : mdarchive
Type    : Option
Format  : mdarchive file_name
Use     : Specifies name of archive file for molecular dynamics run. This file
        : is in MSI's archive file format and can be read by Insight II.
        : If this option is given the current structure is written to the
        : specified file with the frequency specified using 'write'. Note
        : it is also necessary to specify the "output arc" option to trigger
        : the writing of an arc file. 
See also: md, write, output
@@velocities
Topic   : velocities
Type    : Option
Format  : velocities <angs/ps>
        : atom_no velocity_x velocity_y velocity_z
Units   : Angstroms / ps
Default : None
Use     : Specifies the current Cartesian velocities in an MD simulation and
        : can be used for restarting such a run. Can also be used to set the
        : initial velocities.
See also: md, accelerations
@@accelerations
Topic   : accelerations
Type    : Option
Format  : accelerations <no._of_accelerations>
        : atom_no (acceleration_x acceleration_y acceleration_z) x no. of accelerations
Units   : Angstroms / ps in powers appropriate to order 
Default : None
Use     : Specifies the current Cartesian accelerations in an MD simulation and
        : can be used for restarting such a run. Can also be used to set the
        : initial values. Depending on the algorithm, different orders of acceleration
        : are required. For example, Gear fifth order requires 4, and velocity
        : Verlet requires 1.
See also: md, velocities
@@absolute_coordinates
Topic   : absolute_coordinates
Type    : Option
Format  : absolute_coordinates
        : atom_no x y z
Units   : Angstroms
Use     : Specifies the absolute Cartesian coordinates of the atoms. Used for
        : restarting MD calculations and determining properties, such as
        : diffusion coefficients, where the migration across cell boundaries
        : must be correctly tracked.
See also: md
@@cvec
Topic   : cvec
Type    : Option
Format  : cvec no_of_vector x y z
Units   : Angstroms
Use     : For constant pressure MD, specifies the Cartesian cell vectors at the
        : current time step of a MD simulation so that the cell dynamics can be
        : restarted.
See also: md, caver, aver, current_time
@@caver
Topic   : caver
Type    : Option
Format  : caver sum_a sum_b sum_c 
        :      sum_alpha sum_beta sum_gamma sum_vol
Units   : Angstroms for distances / degrees for angles
Use     : The cumulative sum of all cell parameters and the volume is
        : specified so that the averages can be correctly determined
        : on restarting.
See also: md, aver, cfaver, current_time, absolute_coordinates
@@aver
Topic   : aver
Type    : Option
Format  : aver sum_velocity_squared sum_energy sum_virial sum_temperature sum_cons
        :      sum_cst no_of_averaging_points
Units   : Angstroms and ps as appropriate.
Use     : Specifies various sum of values required for correct restarting of the
        : averages during MD.
See also: md, caver, cfaver, current_time, absolute_coordinates
@@cfaver
Topic   : cfaver
Type    : Option
Format  : cfaver sum_lambdaR sum_lambdaV
Units   : eV/Angstrom 
Use     : Specifies the sum of the values for the constraint force during an MD
        : run. Used to restart average values correctly. LambdaR is the distance
        : constraint force in the velocity Verlet algorithm, while LambdaV is the
        : velocity constraint force. 
See also: aver, caver, md
@@current_time
Topic   : current_time
Type    : Option
Format  : current_time time <ps>
Units   : ps
Use     : Specifies the current total time during an MD simulation, so that
        : restarting can be performed from the correct time step.
See also: md, aver, caver, absolute_coordinates
@@iterations
Topic   : iterations
Type    : Option
Format  : iterations n <gradient_norm> <noextrapolate> <order_of_extrapolation>
Default : n = 10, gradient_norm = 1.0D-10, order of extrapolation = 8
Use     : Specifies that shell model molecular dynamics shall be performed with
        : massless shells. This is the default for molecular dynamics if shells
        : are present. The shell positions are optimised in every time step for
        : n iterations or until the specified gradient norm for the shells only
        : is reached. Convergence of the shell gradients is crucial for the
        : conservation of the momentum of the system.
        : By default shell extrapolation using rational function interpolation
        : is turned on, using a function of order 8. If "noextrapolate" is 
        : specified then this is turned off. Extrapolation usually greatly
        : reduces the number of cycles for optimisation.
See also: shellmass
@@conserved
Topic   : conserved
Type    : Keyword
Use     : Causes the conserved quantity for the MD ensemble to be output where
        : applicable. 
@@hexagonal
Topic   : hexagonal
Type    : Keyword
Use     : Causes a rhombohedral structure to be output in
        : hexagonal form in the dumpfile.
@@potgrid
Topic   : potgrid
Type    : Option
Format  : potgrid <xmin xmax ymin ymax zmin zmax> nx ny nz
Units   : fractional (3D) / fractional/Angstroms (2D) / Angstroms (cluster)
Use     : Calculates the electrostatic potential at a grid of points. The 
        : limits of the grid are given by xmin,xmax,ymin,ymax,zmin and zmax 
        : in fractional units for a periodic system and in cartesian coordinates
        : for a cluster. These values can be omitted for a periodic system, 
        : in which case they default to 0 for the minimum and 1 for the
        : maximum (ie the whole unit cell). The integer values nx, ny, nz 
        : control how many points are calculated in each direction. The 
        : number of points will be one greater than the number input. For 
        : example, a value of nx=5 will generate 6 points at 0.0, 0.2, 0.4, 
        : 0.6, 0.8 and 1.0. 
        : NB: If symmetry is turned off using the "nosym" option then the
        : fractional range will apply to the new cell that is generated.
See also: pot, potential, potsites
@@potsites
Topic   : potsites
Type    : Option
Format  : potsites <cart> <au>
        : x1 y1 z1
        : x2 y2 z2
        : etc.....
Units   : fractional/Cartesian as appropriate to dimensionality
Default : none
Use     : Allows the user to specify points in space at which the electrostatic
        : potential should be calculated. Note that it is necessary to also
        : specify the "pot" keyword to trigger the calculation of the potential.
        : NB: If the potential sites are specified using fractional coordinates
        : for a centred cell (e.g. hexagonal) then they will be transformed to
        : the primitive setting automatically for consistency. In other words
        : the fractional coordinates are taken to be in the same frame of reference
        : as for the atomic coordinates input.
        : NB: If symmetry is turned off using the "nosym" option then the
        : fractional coordinates will be transformed as per the atomic fractional
        : coordinates.
See also: pot, potential, potgrid
@@accuracy
Topic   : accuracy
Type    : Option
Format  : accuracy <exponent> <<Euler-Maclaurin_order> <maximum-cell>>
Units   : none
Default : 12.0 < 4 20 >
Use     : Controls the accuracy of the electrostatic summations. Note : the last two
        : values only apply to 1-D systems. The first value is the target number of
        : converged significant figures in the electrostatic energy or the fractional
        : uncertainty in the electrostatic energy, where the value is used as an
        : exponent (i.e. 10**-(exponent)). This determines the real and reciprocal
        : space cut-offs of the Ewald sum (3-D) and Parry sum (2-D) for a given value
        : of rspeed.
        : For 1-D systems a direct real space approach is used, as per CRYSTAL. Here
        : the energy is converged to the same precision by searching for the number of
        : neutral cells that must be included in each direction in the sum. The last
        : parameter indicates the upper bound to be used while the second optional
        : parameter is the order of the series used in the numerical integrals.
        : Generally the default values should be sufficient.
See also: rspeed
@@c6
Topic   : c6
Type    : Keyword
Use     : The dispersion energy, as represented by 1/r**6 terms
        : as part of the Buckingham, Lennard-jones and General
        : potentials, is actually quite slow to converge in
        : real space. By specifying this keyword the C6 terms
        : are evaluated using an Ewald-like approach, thus
        : achieving much greater accuracy in the energy for
        : only a small amount of extra computational expense.
        : When this option is used the rmax value for the
        : potential only influences the short range repulsion
        : component. As the truncation distance for these terms
        : is also controlled by the program, the best thing is
        : to just specify a large cutoff and let the program
        : decide.
@@name
Topic   : name
Type    : Option
Default : none
Use     : Allows you to associate a one-word name with a particular
        : structure which is then displayed in the input banner for
        : that structure. Helps in indentification when working
        : with multiple structures in the same input file. 
        : This option must precede the geometry specification for
        : a structure to avoid ambiguity in cases of multiple
        : structures.
        :
        : Example:
        :
        : name alumina
        :
@@translate
Topic   : translate
Type    : Option
Default : none
Use     : Repeats the requested calculation type automatically for
        : a series of points in which a subset of atoms are shifted
        : by a translation vector. This option is useful for mapping
        : out energy surfaces at the moment in one dimension. 
        : The input format is:
        : 
        : translate x y z nstep
        :
        : where x, y, z are the components of the vector between the
        : the initial and final positions of the atoms. If the
        : system is three-dimensional then x, y and z are assumed
        : to be in fractional units. If the system is a cluster
        : then they are assumed to be in angstroms. nstep is the
        : number of points to be sampled along the translation
        : vector (this leads to nstep+1 calculations including
        : the first and last points).
        : The subset of atoms to which the translation is to be
        : applied is defined by adding a "T" flag to the end of the
        : coordinate lines of these atoms.
See also: nofirst_point
@@nofirst_point
Topic   : nofirst_point
Type    : Keyword
Default : do first point
Use     : Requests that the translate option exclude the initial
        : starting structure from the calculation and only does
        : the translated calculations.
See also: translate
@@gdcrit
Topic   : gdcrit
Type    : Option
Default : 4.0
Use     : Optimisation of defects involves a force balance
        : method, rather than direct minimisation of the
        : energy. The method is implemented in GULP such that
        : initially the energy is minimised until the gradient
        : norm is sufficiently small, at which point the step
        : length is based on -(H-1).g and no line search is
        : used (where H = second derivative matrix and g =
        : gradient vector). gdcrit sets the criterion for
        : switching between these minimisation methods.
See also: defect
@@fix_molecule
Topic   : fix_molecule
Type    : Keyword
Use     : When a molecule keyword is included, the bonding list
        : defining the connectivity is checked at every geometry
        : and the cell index references recalculated. If an atom
        : which was previously bonded exceeds the bond length
        : cutoff then the calculation is normally abandoned. By
        : using the fix_molecule (can be abbreviated to "fix")
        : option the connectivity is fixed by the initial
        : geometry and not updated subsequently. This can
        : prevent the calculation from being abandoned. However
        : it has the side effect that a restarted job may have
        : a different energy due to changes in connectivity - so
        : beware!
See also: molecule, molmec, molq, rtol, inter, intra, both
@@cmm
Topic   : cmm
Type    : Option
Format  : cmm <monopole/dipole/quadrupole/octopole> <cell_size>
Use     : The cell multipole method (cmm) is a technique for speeding
        : up calculations on large systems by approximating all
        : long range interactions by multipole expansions for
        : all species within a given box. Because of the general
        : nature of GULP a one level strategy is currently used
        : with larger boxes than normal. The idea is that the
        : short range cutoff is used to decide the box length
        : so that all potentials only act between neighbouring
        : boxes (given that not all potentials are readily
        : expanded as a series in inverse distance). All other
        : boxes act through the multipole expansion. At the 
        : moment this method is only available for clusters, as
        : different techniques are more appropriate for periodic
        : systems.
        : After the option cmm the highest term included in the
        : expansion can be given. Currently the octopole moment
        : is the highest allowed and the quadrupole moment is
        : the default. In cases where there are no short range
        : potentials the cell size may be specified by the user.
        : Note that because of the nature of the cell multipole
        : method, second derivatives are not available with this
        : technique. Correspondingly the minimiser will therefore
        : default to BFGS starting from a unit Hessian.
        :
        : NOTE: cmm cannot be used in conjunction with EEM
        : or QEq at the moment.
@@norepulsive_cutoff
Topic   : norepulsive_cutoff
Type    : Keyword
Use     : GULP automatically introduces a cutoff for exponential
        : repulsive terms when they become less than the accuracy
        : factor (default=10**-8) to save computer time where the
        : Buckingham potential has a large cutoff due to the more
        : slowly convergent C term. This option tells the program
        : to rigorously enforce the cutoff given in the input file. 
See also: cutp, accuracy
@@switch_minimiser
Topic   : switch_minimiser
Type    : Option
Format  : switch_minimiser <minimiser> <cycle/gnorm> <criterion>
Use     : This option allows the minimiser to be changed part
        : way through an optimisation when the given criterion
        : is satisfied. The criterion can be either the number
        : of cycles of optimisation or when the gradient norm
        : drops below a certain value. This option is particularly
        : useful for cases where the RFO minimiser is needed to
        : accelerate the end game convergence. However it is
        : inefficient and unstable a long way from the minimum.
        :
        : Valid minimisers are:
        :   bfgs (default)
        :   rfo  (rational function optimisation)
        :   unit (bfgs, but starting from a unit Hessian)
        :   nume (bfgs, but starting from numerical diagonal Hessian)
        :   conj (conjugate gradients)
        :
        : Examples:
        :
        : switch rfo cycle 10
        :
        : => Change to rfo method after 10 cycles of optimisation.
        : Note that the order of words after switch is irrelevant
        : and additional words can be inserted to make the line more
        : readable. For example this line could be written as:
        :
        : switch to rfo method after 10 cycles of optimisation
        :
        : switch conj gnorm 0.123
        :
        : => Change to conjugate gradient method when Gnorm is less
        : than 0.123. Note that if cycle and gnorm are omitted then
        : GULP assumes gnorm as a default.
        :
See also: optimise, rfo, unit, conj
@@potential
Topic   : potential
Type    : Option
Format  : potential <reverse> <au>
        : x y z V <weight>
        : 
        : If "reverse" is specified then order is:
        : V x y z <weight>
        :
Units   : V is in eV per electron charge in a.u., x, y and z are
        : the fractional coordinates of the site for a 3D system
        : or the cartesian coordinates for an isolated molecule.
Use     : Specifies the electrostatic potential at a given point
        : in space for use in fitting of electrostatic potential
        : surfaces as a means of deriving charges. This option is
        : a sub-option of the observables section.
See also: zero_potential, potsites, pot, potgrid
@@library
Topic   : library
Type    : Option
Format  : library name_of_library <nodump>
Use     : Allows the user to access libraries of existing interatomic
        : potentials. If the word "nodump" is included then all the 
        : potentials selected from the library will be excluded
        : from the dumpfile, otherwise they are included and the
        : library call removed.
        : NB If including a keyword line in the library file then this
        : should precede the options to guarantee correct processing
See also: libff, libdump, preserve_Q
@@libff
Topic : libff
Type    : Keyword
Use     : Indicates that fitting flags should be read from any library
        : files if this is a fitting run.
See also: library, libdump
@@libdump 
Topic   : libdump
Type    : Keyword
Use     : Indicates that library symbols should be dumped to a restart
        : file. NB This option will create an a restart file that is
        : incompatible with GULP at the moment.
See also: library, libff
@@line_continuation
Topic   : line_continuation
Type    : Information
Info    : To continue a line onto further lines the character
        : "&" can be given at the end of the line.
        : e.g. the following input could be given in the two
        : following ways:
        : 
        : buck
        : Si core O shel 1280.0 0.3 0.0 0.0 12.0 1 0 0
        :
        : or
        :
        : buck
        : Si core O shel &
        : 1280.0 0.3 0.0 0.0 12.0 &
        : 1 0 0
@@bsm
Topic   : bsm
Type    : option
Format  : bsm <exponential> <single_exponential> <kcal/kjmol>
        : if harmonic form:
        :
        : atom_symbol/atomic_number <core/shel> K r0 <2 x flags>
        :
        : if exponential form:
        :
        : atom_symbol/atomic_number <core/shel> K rho r0 <3 x flags>
        :
        : if single_exponential form:
        :
        : atom_symbol/atomic_number <core/shel> K rho r0 <3 x flags>
        :
Units   : K in eVAngs**-2, r0 in Angstroms
        : K in eV, rho in Angstroms**-1
Defaults: Type = harmonic
Use     : Specifies the breathing shell force constant, K, and
        : equilibrium radius, r0, for the spherical breathing
        : shell model.
        :
        : E(bs) = 1/2 * K * (r - r0)**2
        :
        : or the constants of the exponential restoring term:
        :
        : E(bs) = K * [exp(rho*(r-r0)) + exp(-rho*(r-r0))]
        :
        : or the constants of the single_exponential restoring term:
        :
        : E(bs) = K * exp(rho*(r-r0))
        :
See also: breathe, nobreathe, simultaneous.
@@save
Topic   : save
Type    : Keyword
Use     : Causes the region 2 matrices, derived from the bulk
        : second derivatives, to be saved to disk as fort.44
        : for use in restarts. This is important for large
        : bulk materials where the second derivatives are
        : expensive to recalculate.
See also: restore, defect
@@restore
Topic   : restore
Type    : Keyword
Use     : Causes the region 2 matrices, derived from the bulk
        : second derivatives, to be restored from disk (fort.44)
        : for use in restarts. This is important for large
        : bulk materials where the second derivatives are
        : expensive to recalculate. The fort.44 file must have
        : been generated in a previous run.
See also: save, defect
@@deflist
Topic   : deflist
Type    : Option
Format  : deflist nvacancy ninterstitial
        : nvacancy x atom numbers, ninterstitial x atom numbers
Use     : Used by the program to enable restarts when mode2a
        : is greater than or equal to 3. Normally this should
        : only need to be written by GULP, rather than the
        : user.
See also: defect, reldef, centre, region, restore, save, size
@@reldef
Topic   : reldef
Type    : Option
Format  : reldef
        : nreg1 x atom numbers
Use     : Used by the program to enable restarts when performing
        : defect calculations involving bond specifications. This
        : command lists the perfect atom number that each defect
        : atom started life as. A zero indicates an interstitial
        : species. Normally this list should only need to be
        : written by the program rather than the user.
See also: defect, deflist, centre, region, restore, save, size
@@nod2sym
Topic   : nod2sym
Type    : Keyword
Use     : Turns off the use of symmetry for second derivatives in
        : bulk and defect calculations. Primarily of use for debugging
        : purposes. If using variable charges this option is used
        : implicitly.
See also: defect
@@tscale
Topic   : tscale
Type    : Option
Format  : tscale value <s/ns/ps/fs>
Units   : s, ns, ps or fs; default is ps.
Use     : Controls how long in simulation time the temperature
        : scaling is to be applied for. By default this is set
        : equal to the length of the equilibration phase of
        : the run.
See also: md, equilibration, production, timestep, sample, write
        : nolist, temperature, delayforce, endforce, momentum_correct
@@timestep
Topic   : timestep
Type    : Option
Format  : timestep value <s/ns/ps/fs>
Units   : s, ns, ps or fs; default is ps
Use     : Specifies the timestep for integration in a molecular
        : dynamics simulation. A value must be supplied for an
        : MD run.
See also: md, equilibration, production, sample, write, nolist,
        : tscale, temperature, delayforce, endforce, momentum_correct
@@equilibration
Topic   : equilibration
Type    : Option
Format  : equilibration value <s/ns/ps/fs>
Units   : s, ns, ps or fs - if integer, then value is by default
        : a multiple of the timestep or if non-integer then by
        : default is the time in picoseconds.
Use     : Specifies the simulation time to be spent equilibrating
        : the kinetic and potential energy distributions prior to
        : the production phase of the molecular dynamics run.
See also: md, production, sample, write, temperature, timestep
        : tscale, nolist, delayforce, endforce, momentum_correct
@@production
Topic   : production
Type    : Option
Format  : production value <s/ns/ps/fs>
Units   : s, ns, ps or fs - if integer, then value is by default
        : a multiple of the timestep or if non-integer then by
        : default is the time in picoseconds.
Use     : Specifies the simulation time to be spent collecting
        : production data for subsequent analysis.
See also: md, equilibration , sample, write, temperature, timestep
        : tscale, nolist, delayforce, endforce, momentum_correct
@@sample
Topic   : sample
Type    : Option
Format  : sample value <s/ns/ps/fs>
Units   : s, ns, ps or fs - if integer, then value is by default
        : a multiple of the timestep or if non-integer then by
        : default is the time in picoseconds.
Use     : Controls how often the properties of the molecular
        : dynamics run are to be sampled and output to the 
        : standard output channel. Averaged properties are also
        : based on these samples.
See also: md, timestep, equilibration, production, temperature,
        : tscale, write, nolist, delayforce, endforce
@@momentum_correct
Topic   : momentum_correct
Type    : Option
Format  : momentum_correct natom_equilibration <natom_production>
Default : All moving atoms to be corrected during both phases
Units   : None
Use     : By default linear momentum is removed during both equilibration
        : and production. This option allows the user to restrict the 
        : correction to a subset of atoms that come first in the input
        : deck, either during equilibration or production, or both.
        : For example, if the system consists of 100 atoms and all atoms
        : should have their momenta corrected during equilibration, but
        : only the first 10 atoms need to be corrected during production
        : then the input would be:
        :
        : momentum_correct 100 10
        :
See also: md, timestep, equilibration, production, temperature,
        : tscale, write, nolist, delayforce, endforce, sample
@@write
Topic   : write
Type    : Option
Format  : write value <s/ns/ps/fs>
Units   : s, ns, ps or fs - if integer, then value is by default
        : a multiple of the timestep or if non-integer then by
        : default is the time in picoseconds.
Use     : Determines how often the program writes to the molecular
        : dynamics dumpfile during the production phase of the 
        : run for subsequent analysis.
See also: md, timestep, equilibration, production, temperature,
        : tscale, sample, nolist, delayforce, endforce
@@delayforce
Topic   : delayforce
Type    : Option
Format  : delayforce value <s/ns/ps/fs>
Units   : s, ns, ps or fs - default is time in picoseconds.
Default : 0.0
Use     : Specifies a delay time before any external force is
        : applied to the simulation. Can be used to prevent the
        : force being applied during equilibration.
See also: md, production, sample, write, temperature, timestep
        : tscale, nolist, equilibration, external_force, 
        : td_external_force, endforce
@@endforce
Topic   : endforce
Type    : Option
Format  : endforce value <s/ns/ps/fs>
Units   : s, ns, ps or fs - default is time in picoseconds.
Default : 0.0
Use     : Specifies a time after which any external force is
        : removed from the simulation. 
See also: md, production, sample, write, temperature, timestep
        : tscale, nolist, equilibration, external_force, 
        : td_external_force, delayforce
@@md
Topic   : md
Type    : Keyword
Use     : Specifies that a molecular dynamics run is to be performed
See also: timestep, temperature, equilibration, production, sample,
        : tscale, write, cutp, integrator, nolist_md, minimum_image,
        : nomolecularinternalke, momentum_correct, mdmaxtemp, tether
@@mdmaxtemp
Topic   : mdmaxtemp
Type    : Option
Format  : mdmaxtemp scale_factor
Default : 100.0
Use     : This option allows MD runs where the temperature is exploding
        : for one reason or another to be trapped and terminated. When 
        : the temperature exceeds the target temperature by a factor of
        : greater than the number specified then the run will stop.
        : If this occurs then common causes are that the timestep is
        : too long, the structure was in a high energy state to start with
        : and the potential can't be dissipated fast enough, the thermostat
        : parameter is unsuitable, or that there are discontinuities or
        : other flaws in the potential energy surface input. Another common
        : cause is that the system size being used is too small leading to
        : large fluctuations in the ensemble averages.
See also: md, temperature, mdmaxvolchange
@@mdmaxvolume
Topic   : mdmaxvolume
Type    : Option
Format  : mdmaxvolume scale_factor
Default : 100.0
Use     : This option allows MD runs where the unit cell volume is exploding
        : for one reason or another to be trapped and terminated. When 
        : the volume exceeds the initial volume by a factor of
        : greater than the number specified then the run will stop.
        : If this occurs then common causes are that the timestep is
        : too long, the structure was in a high energy state to start with
        : and the potential can't be dissipated fast enough, the barostat
        : parameter is unsuitable, or that there are discontinuities or
        : other flaws in the potential energy surface input. Another common
        : cause is that the system size being used is too small leading to
        : large fluctuations in the ensemble averages.
See also: md, temperature, mdmaxtemp
@@nolist_md
Topic   : nolist_md
Type    : Keyword
Use     : By default list based methods are used for three and four
        : body terms in molecular dynamics to avoid problems with
        : discontinuities in the energy as atoms move over cutoffs.
        : It also increases the speed of the three and four body
        : terms dramatically. Specifying "nolist" will cause the 
        : program to use the standard non-list based method.
See also: three, four, md
@@frequency
Topic   : frequency
Type    : Option
Format  : frequency <n>
        : no. value <kpoint_number> <weight> (x n, on separate lines)
Units   : cm-1
Use     : Subsection of observables, used for specifying frequencies for
        : fitting to. The first number is the position of the mode required
        : in order of increasing frequency. The third number is optionally
        : the k point number to fit at with reference to the k point list
        : for the present configuration.
        : e.g.
        : frequency 2
        : 1   0.0
        : 6 902.0 2
See also: observables, elastic, phonon, piezoelectric, sdlc, hfdlc, weight, mode
@@mode
Topic   : mode
Type    : Option
Format  : mode
        : value <kpoint_number> <weight>
        : e1x e1y e1z
        : e2x e2y e2z
        :  :   :   :
        : eNx eNy eNz
Units   : cm-1
Use     : Subsection of observables, used for specifying vibrational modes for
        : fitting to. This option differs from frequency in that instead of
        : supplying the mode number the eigenvectors for the modes are given.
        : GULP will then project all modes on to the eigenvectors and fit the
        : mode frequency with maximal overlap. This is mainly useful for fitting
        : ab initio vibrational data. Here e1x denotes the x vibrational eigenvector
        : component for atom 1, etc, up to the Nth atom.
        : The second number after the frequency is optionally the k point number
        : to fit at with reference to the k point list for the present
        : configuration. Only currently implemented for real eigenvectors at
        : present and so only the gamma point should be used.
        : NB: The number of atoms whose eigenvectors are input corresponds to the
        : number of fully occupied core sites (as only these have vibrations).
        : Care must be taken when using shells or sites with multiple partial
        : occupancies.
        : NB: It is NOT recommended to use this option with relaxed fitting.
        : This is because optimisation will cause the frame of reference for the
        : system to change and so the projection may not be valid.
See also: observables, elastic, phonon, piezoelectric, sdlc, hfdlc, weight, frequency
@@frequencies
Topic   : frequencies
Type    : Keyword
Use     : Causes GULP to compute the frequencies for a defect calculation
        : in the Mott-Littleton scheme. 
        : NB: This is approximate since it assumes that regions 1 and 2
        : are uncoupled with respect to their vibrations.
See also: phonon
@@epsilon/sigma
Topic   : epsilon/sigma
Type    : Option
Format  : epsilon <kcal/kjmol> 
        : <Atomic_symbol/atomic_number> epsilon sigma <2 x flags for fitting>
Units   : epsilon in eV and sigma in Angstroms
Use     : Specifies epsilon and sigma values for each species type to be
        : used in combination rules to obtain Lennard-Jones potential
        : parameters where specified.
See also: lennard, atomab
@@atomab
Topic   : atomab
Type    : Option
Format  : atomab 
        : <Atomic_symbol/atomic_number> A B <2 x flags for fitting>
Units   : eV*Angs**m and eV*Angs**n
Use     : Specifies A and B values for each species type to be used in
        : combination rules to obtain Lennard-Jones potential parameters
        : where specified.
See also: epsilon, lennard
@@electronegativity
Topic   : electronegativity
Type    : Option
Format  : <Atomic_symbol/atomic_number> chi <mu> <2 x flags for fitting>
Units   : Chi and mu in eV
Use     : Allows the user to specify the parameters needed for the 
        : electronegativity equalisation method for determining
        : charges. Note that if the flags are not specified they 
        : are assumed to be zero.
See also: eem, qelectronegativity, smelectronegativity
@@qelectronegativity
Topic   : qelectronegativity
Type    : Option
Format  : <Atomic_symbol/atomic_number> chi <mu> <radius> <3 x flags for fitting>
Units   : Chi and mu in eV, radius in Ang
Use     : Allows the user to specify the parameters needed for the 
        : QEq electronegativity equalisation method for determining
        : charges. Note that if the flags are not specified they
        : are assumed to be zero.
See also: eem, electronegativity, qeq, smelectronegativity
@@smelectronegativity
Topic   : smelectronegativity
Type    : Option
Format  : <Atomic_symbol/atomic_number> chi mu zeta Znuc <4 x flags>
Units   : Chi and mu in eV, Znuc in a.u., zeta in Angstroms**-1
Use     : Allows the user to specify the parameters needed for the
        : Streitz and Mintmire electronegativity equalisation method 
        : for determining charges. Note that if the flags are not 
        : specified they are assumed to be zero.
See also: sm, eem, electronegativity, qeq, qelectronegativity
@@sm
Topic   : sm
Type    : Keyword
Use     : Turns on calculation of variable charges using the formulation
        : of Streitz and Mintmire. Here the charge is partitioned into a
        : fixed nuclear point charge and a variable charge distribution 
        : with the shape of a 1s orbital. To use this option parameters
        : must be specified with the smelectronegativity option too.
        : If the keyword is given as "smzz" then the Znuc_i-Znuc_j energy
        : term given by Streitz and Mintmire, but neglected as part of the
        : two-body energy is included explicitly.
See also: smelectronegativity, eem, qeq
@@bulk_noopt
Topic   : bulk_noopt
Type    : Keyword
Use     : Stops GULP from performing optimisations during the bulk run
        : - this is of use when performing defect calculations when
        : you only want the runtype to apply to the defect section.
See also: defect, centre, size, region_1, noanisotropic_2b
@@qmmm
Topic   : qmmm
Type    : Option
Format  : qmmm <mechanical/electronic>
Units   : None
Default : No QM/MM scheme
Use     : Controls whether a QM/MM scheme is used to modify the energy in
        : GULP, and if so which scheme. The two options are:
        :
        : mechanical: This implies that the interactions within the MM 
        : regions and between the QM and MM regions are calculated, but
        : not within the QM region.
        :
        : electronic: This implies the same as mechanical embedding, except
        : that the Coulomb interactions between the QM and MM regions are
        : also excluded since these are assumed to be accounted for by the
        : QM portion of the calculation.
        :
        : NB: At present there are restrictions on which facilities will 
        : work in combination with this option. Only 0-D calculations with
        : up to first derivatives are generally enabled for all models.
@@move_2a_to_1
Topic   : move_2a_to_1
Type    : Option
Format  : move_2a_to_1 <radius>
Units   : Angstroms
Default : none
Use     : At the end of a defect calculation, region 2a ions within the
        : specified radius will be moved into region 1 for the dumpfile
        : at their relaxed positions. This enables a better set of
        : starting positions to be input for a restart with a larger
        : region 1 as the ions will be approximately optimised to start
        : with. If no radius is specified then all region 2a ions will
        : be moved. Should the number of ions exceed the maximum
        : allowed for region 1 then the ions will be moved up to the
        : final shell of ions that will fit. The radius value must
        : not be less than the region 1 radius.
See also: defect, centre, size, region_1, vacancy, interstitial,
        : impurity, bulk_noopt
@@noanisotropic_2b
Topic   : noanisotropic_2b
Type    : Keyword
Use     : The region 2b energy is calculated for an anisotropic solid by
        : default using ra*rb/r**6. This keyword forces the program to
        : use the isotropic formula 1/r**4. The only real use for this
        : keyword is when trying to compare with CASCADE results which
        : use the more approximate isotropic form.
See also: mode2a, defect, centre, region_1, vacancy, impurity,
        : interstitial, bulk_noopt
@@mode2a
Topic   : mode2a
Type    : Option
Default : 1
Use     : The displacements in region 2a can be calculated by a number of
        : different approximations to the force acting on the region 2a
        : ions. Five modes are available at the moment for this purpose:
        :   1 => use electrostatic force of region 1 screened by dielectric
        :        constant
        :   2 => use electrostatic force of region 1 screened by dielectric
        :        constant, but neglecting contribution to derivatives of
        :        region 1
        :   3 => use electrostatic force of defects screened by dielectric
        :        constant
        :   4 => use electrostatic force of defects screened by dielectric
        :        constant, but neglecting contribution to derivatives of
        :        region 1
        :   5 => consider interaction of region 2a only with defects
        :
        : By default the program uses method 4 for charged defects as this
        : offers the best compromise between accuracy and computational effort.
        : It is recommended that a comparison is made with mode2a=1 as a check.
        : For optimisation the most efficient approach could be to optimise
        : first with a higher mode and then restart in mode 1.
See also: defect, centre, region_1, move_2a_to_1, noanisotropic_2b,
        : vacancy, interstitial, impurity, noanisotropic, gdcrit,
        : bulk_noopt
@@size
Topic   : size
Type    : Option
Format  : size radius_region_1 <radius_region_2a> <old_radius_region_1>
Units   : Angstroms
Default : none
Use     : Specifies the region 1 and 2a radii for use in defect calculations.
        : If no value is specified for region 2 then it is set equal to the
        : region 1 radius. When restarting from a dumpfile containing
        : an explicit region 1 specification, but with a larger region 1
        : radius, then the old region 1 radius from the previous run must
        : also be given to ensure a correct restart. 
See also: defect, centre, region_1, vacancy, interstitial, impurity,
        : bulk_noopt
@@centre
Topic   : centre
Type    : Option
Format  : centre <atomic_symbol> <atom_number> <mol no.> <cart/frac> <x y z>
Use     : Defines the location of the defect centre for a defect calculation.
        : The location can be specified in one of 4 ways;
        : (1) Atomic symbol - places the defect centre at the atom site as
        :     specified at the start of the defect calculation.
        :     e.g.  centre Mg1 shel
        : (2) Atom number - places the defect centre at the site of the atom
        :     given by the number in the asymmetric unit.
        :     e.g.  centre 3
        : (3) Cartesian coordinates - explicit specification of centre
        :     e.g.  centre cartesian 0.2 1.3 0.53
        : (4) Fractional coordinates - explicit specification of centre
        :     based on the fractional coordinates. If "cart" or "frac"
        :     is not specified, this is the default.
        :     e.g.  centre 0.25 0.25 0.25
        : (5) Molecule number - places the defect centre at the centre of
        :     the molecule whose number has been given.
See also: defect, size, region_1, regi_before, 
        : impurity, vacancy, impurity, interstitial, frequency, bulk_noopt
@@defect
Topic   : defect
Type    : Keyword
Use     : When used as a keyword this causes a defect calculation to be 
        : performed at the end of any bulk calculations. This option 
        : cannot currently be used in conjuction with the background
        : neutralising charge for non-charge neutral unit cells, or
        : with the dipole correction energy.
See also: region_1, centre, size, regi_before, vacancy,
        : impurity, interstitial, frequency, noanisotropic, save
        : restore, gdcrit and bulk_noopt.
@@pregionforce
Topic   : pregionforce
Type    : Keyword
Use     : If present, this causes the force on each region to be output.
See also: sfractional
@@regi2a
Topic   : regi2a
Type    : keyword
Use     : print out region 2a in the output
See also: region_1, regi_before, defect
@@region_1
Topic   : region_1
Type    : Option
Format  : region_1
        : atomic_symbol x y z <charge> <occupancy> <radius> <mol no> ....
        : <mol_cell_index> <3*flags> for each ion
Units   : coordinates in Angstroms and charges in electrons
Use     : Specifies an explicit region 1. Primarily used for restarts
        : from previous runs, but can be used to allow the user to generate
        : complicated defects.
See also: defect, centre, size, regi_before, bulk_noopt
@@regi_before
Topic   : regi_before
Type    : Keyword
Default : output region 1 only after a minimisation
Use     : Output region 1 list before the start of a defect calculation.
See also: defect, centre, size, region_1, bulk_noopt
@@eregion
Topic   : eregion
Type    : Keyword
Default : Don't print region energies
Use     : Causes GULP to output the energy broken down into regions.
        : NB Not all potential types currently support this feature and
        : for many body potentials it may not be meaningful where they 
        : span multiple regions. Use with care!
@@vacancy
Topic   : vacancy
Type    : Option
Format  : vacancy <cartesian/fractional/molecule> <number> <symbol> <x y z>
Use     : Creates a vacancy in a defect calculation. The vacancy site may
        : be specified in the following ways:
        : (a) atom number - removes the nearest image to the defect centre
        :     of the asymmetric unit site of that number.
        :     e.g. vacancy 2
        : (b) atom symbol - removes the first atom in the asymmetric unit
        :     with the symbol matching that given. The nearest image to 
        :     to the defect centre is removed.
        :     e.g. vacancy Mg2
        : (c) molecule number - removes a complete molecule. Takes the
        :     nearest image of the molecule number given to the defect
        :     centre. Remember that when molecular defects are being
        :     run the energy of the molecule at infinite separation
        :     must be corrected for.
        :     e.g. vacancy molecule 3
        : (d) coordinates - removes any ions within a tolerance of that
        :     position. By default fractional coordinates are assumed in
        :     which case the nearest image to the defect centre is taken.
        :     If "cartesian" is specified then x y z are taken as being
        :     absolute cartesian coordinates.
        :     e.g. vacancy 0.5 0.5 0.5 
        :          vacancy cart 1.2 1.2 1.2
See also: defect, intersitial, impurity, size, centre, region_1
@@interstitial
Topic   : interstitial
Type    : Option
Format  : interstitial symbol <core/shel> <cart/frac/bond> x y z <fix>
Use     : Creates an interstitial in a defect calculation. The symbol
        : for the interstitial species must be given and optionally
        : followed by the specification of core or shell. If core or
        : shell is not specified then both will be added if appropriate.
        : The coordinates for the interstitial must be given and by
        : default are assumed to be fractional unless "cart" has been
        : specified. If fractional coordinates are used then the image
        : nearest to the defect centre will be used.
        : e.g. interstitial Mg2 0.25 0.25 0.25
        :      interstitial O1 shel cart 1.2 0.6 0.6
        : Alternatively the command "bond" may be used in place of frac or
        : cart in which case the interstitial is added at the covalent
        : bond length from an atom which is specified by either a symbol
        : or the coordinates of the ion in the defective region 1.
        : The program will attempt to place the bond to maximise the
        : distance to any other atoms bonded to the specified centre.
        : e.g. interstitial H bond O2
        :      interstitial H1 core bond 0.1 0.4 0.24
        :      interstitial H bond 1.2 3.4 2.7
        : If "fix" is specified, then the interstitial will be held fixed
        : during the defect calculation. Partial fixing can also be achieved
        : by specifying the directions to be fixed as well;
        : e.g. interstitial H 1.2 3.4 2.7 fix xy
        : would fix the H atom in the x and y directions. Allowed values
        : are - x, y, z, xy, xz, yz and xyz.
See also: defect, vacancy, impurity, size, centre, region_1
@@impurity
Topic   : impurity
Type    : Option
Format  : impurity symbol <core/shel> <symbol> <cart/frac> x y z <fix>
Use     : Create an impurity (combined vacancy and interstitial) in a
        : defect calculation. The symbol for the impurity ion must be
        : given first, optionally followed by a core/shell specification.
        : If the type is not given then both will be added if appropriate.
        : The position of the impurity can be specified in two ways:
        : (a) atom symbol - replace the specified atom with the impurity.
        :     Takes the nearest image to the defect centre of the first
        :     atom of this type to be specified in the asymmetric unit.
        :     e.g. impurity Mg2 Ca
        : (b) coordinates - any species within a given tolerance of the
        :     specified coordinates is to be replaced and the impurity
        :     is then placed at those coordinates. By default x y and z
        :     are taken to be fractional, unless "cart" is specified,
        :     in which case the image nearest the defect centre is taken.
        :     e.g. impurity Mg2 0.5 0.5 0.5
        :          impurity Mg2 core cart 1.2 1.2 1.2
        : If "fix" is specified, then the impurity will be held fixed
        : during the defect calculation. Partial fixing can also be achieved
        : by specifying the directions to be fixed as well;
        : e.g. impurity Mg2 core 1.2 1.2 1.2 fix xy
        : would fix the Mg atom in the x and y directions. Allowed values
        : are - x, y, z, xy, xz, yz and xyz.
See also: defect, vacancy, interstitial, size, centre, region_1
@@optimise
Topic   : optimise
Type    : Keyword
Use     : Invokes geometry optimisation using the NR/BFGS minimiser.
        : The exact Hessian is used where necessary and subsequently updated
        : unless a failure occurs in which case a cycle of steepest descents
        : is used to continue the optimisation.
See also: conp, conv, cellonly, shell, trans, rfo, unfix
@@gradient
Topic   : gradient
Type    : Keyword
Use     : Calculate gradients but do not optimise
See also: conp, conv, cellonly, isotropic, finite, unfix and shell.
@@gradients
Topic   : gradients
Type    : Option
Format  : gradients <units>
        : atom_no. x y z <weight>
Units   : eV <eV/Angs or au/Angs or au>
Default : all fitted gradients are zero
Use     : Subsection of observables, used for specifying the x, y and z
        : components of the derivatives on the atom number given for
        : The atom number should refer to the order of the atoms
        : in the asymmetric unit. Derivatives should be symmetry adapted 
        : if symmetry is being used (i.e. weighted by the number of
        : symmetry related atoms of the type).
        : Cartesian gradients may be supplied by specifying units.
See also: observables, elastic, sdlc, hfdlc, piezo, energy and stress
@@stress_out
Topic   : stress_out
Type    : Keyword
Use     : Causes the stresses to be output at the final geometry. This is
        : the same as the strain derivatives divided by the volume and
        : converted to GPa, plus correction for any external pressure.
See also: atomic_stress
@@atomic_stress
Topic   : atomic_stress
Type    : Keyword
Use     : Causes the atomic stresses to be output at the final geometry. 
        : These are the atomic contributions to the strain derivatives.
        : For 3D systems the stresses in GPa are output, while for all 
        : cases the strain derivative per atom is output in eV.
        : NB: This feature requires that symmetry is turned off during
        : the calculation. 
See also: stress_out, catomic_stress
@@catomic_stress
Topic   : catomic_stress
Type    : Option
Format  : catomic_stress
        : 1  xx yy zz yz xz xy
        : 2  xx yy zz yz xz xy
        : etc
Units   : eV
Default : None
Use     : Gives the current average of the atomic stresses needed from MD
        : Used for MD restart or information.
See also: atomic_stress
@@stress
Topic   : stress
Type    : Option
Format  : stress 
        : stress_no stress_value <weight>
Units   : eV
Default : all fitted stresses are zero
Use     : Subsection of observables, used for specifying the stress 
        : components for fitting to. Here the stress_no is as follows:
        :
        : 1 => xx  2 => yy  3 => zz  4 => yz  5 => xz  6 => xy
        : 
        : Note that stresses are dependent on the cell orientation
        : and so take care when specifying.
See also: observables, gradients
@@anisotropic_pressure
Topic   : anisotropic_pressure
Type    : Option
Format  : anisotropic_pressure P_xx P_yy P_zz P_yz P_xz P_xy 
Units   : GPa
Default : No anisotropic pressure
Use     : This option allows the user to apply a general constant stress, such
        : as a uniaxial stress. Because the energy is not defined for anisotropic
        : pressure, except via a set of integrals between states, then the use
        : of force minimisation, rather than energy minimisation is required for
        : optimisation.
        : If both pressure and anisotropic pressure are specified then 
        : the two are added together.
        : Note that stresses are dependent on the cell orientation
        : and so take care when specifying. 
See also: pressure, force_minimisation
@@transition_state
Topic   : transition_state
Type    : Keyword
Use     : Invoke RFO optimisation to find nearest stationary point with one
        : negative Hessian eigenvalue. More general optimisations to transition
        : states of any order can be performed using the RFO method.
        : Important note - a transition state optimisation will only lead to
        : one negative phonon frequency if the calculation is run without any
        : crystal symmetry.
See also: opti, rfo
@@rfo
Topic   : rfo
Type    : Keyword
Use     : Invoke the Rational Function Optimisation (RFO) method for searching
        : for stationary points. By default the optimiser searches for the
        : minimum and may prove advantageous over the standard optimiser if the 
        : Hessian is ill-conditioned. Also the Newton-Raphson method will yield
        : transition states if started too close to one, whereas the RFO method
        : will find the minimum.
        : Transition_state is a special case of rfo, in which the optimiser is
        : to converge to a first order transition state.
        : For transition state calculations, the updating scheme is DFP by
        : default instead of BFGS as the former is not biased towards positive 
        : definiteness of the Hessian.
See also: opti, trans
@@maximise
Topic   : maximise
Type    : Option
Format  : maximise <mode/order> n
        : secondary word, either "mode" or "order" followed by integer number
Use     : Controls the action of the rfo optimiser for transition state
        : calculations.
        : mode n  => find transition state along mode number <n> of Hessian
        : order m => find transition state of order <m>
        : Use of mode implies that the order must be one.
See also: opti, rfo, trans
@@distance
Topic   : distance
Type    : Keyword
Use     : Print out distance analysis at beginning and end of run.
        : Default search radius is 2.0 Angstroms - this can be changed
        : by using "cutd". For bond length search see "bond".
@@eem
Topic   : eem
Type    : Keyword
Use     : Calculate charges by Mortiers EEM.
        : oldeem invokes the original set of parameters.
        : Only available for H, C, N, O, F, Si, Al and P.
        : If specified with optimise then the charges will be recalculated at
        : every point of the optimisation.
        :
        : NB Electronegativity equalisation schemes should NOT
        : be used in combination with Coulomb subtraction of
        : any form otherwise the calculation of the charges and
        : the energy will not be self-consistent. This leads to
        : all derivatives being incorrect as dE/dQ is no longer
        : zero. If Coulomb subtracted potentials are to be used
        : then charges must be calculated for the initial geometry
        : and then frozen.
        :
        : Note: Phonon calculations are limited with the EEM keyword
        : to the gamma point without the LO/TO splitting.
        :
        : Note: Only region 1 atoms are included in EEM and fixed
        : charges will be taken for region 2.
See also: qeq, dcharge, sm, electronegativity, gasteiger, qbond
@@qbond
Topic   : qbond
Type    : Keyword
Use     : Indicates that charges should be calculated using bond increments.
        : Here the charge on the site is the sum of the increments associated
        : with each bond. These increments are specified using the qincrement
        : option.
See also: qeq, eem, gasteiger, qincrement
@@qincrement
Topic   : qincrement
Type    : Option
Format  : qincrement atom1 atom2 delta
Default : delta = 0.0
Use     : If the keyword qbond is given then the charges on the atoms are
        : determined by bond increments given by this option. An example
        : of the input is:
        :
        : qincrement O core C core -0.24
        :
        : NB: The order of the atoms is important in that the sign of delta
        : changes if the order is reversed. Consequently if atom1 and atom2
        : are of the same type then delta must be zero. Hence, the value of
        : delta is applied with the input sign to atom1 and the negative of
        : this to atom2.
See also: qeq, eem, gasteiger, qbond
@@gasteiger
Topic   : gasteiger
Type    : Keyword
Use     : Indicates that Gasteiger charges should be calculated according
        : to the method in Tetrahedron, 36, 3219-3288 (1980). The Gasteiger
        : charges are geometry independent and only depend on the connectivity
        : of the molecule. Hence it is important to ensure that the bonding
        : is correct at the start of the calculation and the "fix" keyword
        : is also recommended to avoid potential discontinuities. Parameters
        : are available for H, C, N, O, S and the halogens. For C, N and O
        : the electronegativities used depend on the hybridisation. In the
        : absence of formal atom typing, GULP makes the approximation that 
        : the hybridisation state is the obvious one for the coordination 
        : number, i.e. for C, 4 bonds => sp3, 3 bonds => sp2, 2 bonds => sp,
        : for N, 3 bonds => sp3, 2 bonds => sp2, 1 bond => sp, and for O, 
        : 2 bonds => sp3, 1 bond => sp2.
See also: eem, qeq, molq, fix, bond, gasttol, gastiter, qbond
@@gasttol
Topic   : gasttol
Type    : Option
Format  : gasttol tolerance
Units   : Electrons
Default : 0.001
Use     : Sets the tolerance on the change in the charges between
        : iterations of the Gasteiger scheme. The value is set here
        : for consistency with the original paper, which used 0.001
        : of an electron, but more converged values can be obtained
        : by lowering the tolerance
See also: eem, gasteiger, gastiter, qeq
@@gastiter
Topic   : gastiter
Type    : Option
Format  : gastiter maximum_number_iterations
Units   : None
Default : 20
Use     : Sets the maximum number of iterations that are allowed
        : during the Gasteiger charge scheme.
See also: eem, gasteiger, gasttol, qeq
@@pot
Topic   : pot
Type    : Keyword
Use     : Print out electrostatic site potentials and their first derivatives.
        : If cell multipole method is specified then this technique will be
        : also used in the calculation of the potential for clusters. Note 
        : that the potential calculated is not corrected for Coulomb subtract
        : options in the two-body potentials or molecule options. However, in
        : a core-shell model the potential due to the other component of an
        : atom is excluded.
        : It is now possible to also use "pot" for defect
        : calculations in which case GULP returns the electrostatic
        : potential at the sites of the asymmetric unit of region 1.
        : This potential does not include the displacements in 
        : region 2a.
        : Note : when using pot in combination with QEq the potential calculated
        : is that resulting from q/r, not the integral expression used within a
        : QEq determination of the charges.
See also: efg, potential, nodpsym, potsites, potgrid
@@nodpsym
Topic   : nodpsym
Type    : Keyword
Use     : When performing a calculation of the site potentials for region 1
        : in a defect calculation, the values are normally only output for
        : the asymmetric unit. If this keyword is specified then symmetry
        : is still used in the defect calculation, but the site potentials
        : are output for all sites in region 1.
See also: pot
@@conv
Topic   : conv
Type    : Keyword
Use     : Set flags for constant volume optimisation.
        : If cellonly, conv or conp are not specified for a calculation 
        : that requires derivatives - individual flags are needed.
See also: conp, cellonly, breathe, nobreathe, noflags, shell, isotropic
@@conp
Topic   : conp
Type    : Keyword
Use     : Set flags for constant pressure optimisation.
        : If conv, cellonly or conp are not specified for a calculation 
        : that requires derivatives - individual flags are needed.
See also: conv, cellonly, breathe, nobreathe, noflags, shell, isotropic
@@noflags
Topic   : noflags
Type    : Keyword
Use     : Stops input processor looking for flags in the absence of conp, conv,
        : shell or cellonly and sets all flags to zero. Mainly of use for
        : fitting energy hypersurfaces when the gradients are not to be fitted.
See also: conv, cellonly, breathe, nobreathe, shell, isotropic
@@shell
Topic   : shell
Type    : Keyword
Use     : Set flags for shell only optimisation (equivalent to optical
        : calculation). It is still necessary to specify "conp" or "conv"
        : so that the cell flags are correctly set.
See also: conp, conv, noflags, breathe, nobreathe, cellonly, isotropic
@@breathe
Topic   : breathe
Type    : Keyword
Use     : Set flags for radii only optimisation . It is still necessary to 
        : specify either "conp" or "conv" so that the cell flags are correctly 
        : set.
See also: conp, conv, noflags, shell, nobreathe, cellonly, isotropic
@@nobreathe
Topic   : nobreathe
Type    : Keyword
Use     : Excludes radii from the optimisation variables.
See also: conp, conv, noflags, shell, breathe, cellonly, isotropic
@@cellonly
Topic   : cellonly
Type    : Keyword
Use     : Set flags for cell optimisation while keeping internal coordinates
        : fixed. If cellonly, conv or conp are not specified for a calculation 
        : that requires derivatives - individual flags are needed.
See also: conv, conp, noflags, breathe, nobreathe, shell, isotropic
@@isotropic
Topic   : isotropic
Type    : Keyword
Use     : Only allow isotropic cell expansion and contraction during
        : optimisation.
See also: conp, conv, orthorhombic
@@orthorhombic
Topic   : orthorhombic
Type    : Keyword
Use     : Only allow cell lengths to change, but not angles, during
        : optimisation or MD.
See also: conp, conv, isotropic, cello
@@free_energy
Topic   : free_energy
Type    : Keyword
Use     : Use Gibbs free-energy as the quantity to be calculated/optimised
        : instead of the internal energy. This uses the phonon density of
        : states to calculate the vibrational partition function and thereby
        : the free energy. Note: It is best not to use gamma point phonons
        : in such calculations since the Born charge correction is not applied
        : in a free energy minimisation.
See also: phonon, nozeropt, static_first, zsisa, scmaxsearch.
@@static_first
Topic   : static_first
Type    : Keyword
Use     : Run a static optimisation first before the free energy energy minimisation.
        : This should always be done unless restarting a job from a previously
        : optimised structure. However, because this would negate the effects of a
        : restart the default action is not to do this.
See also: phonon, nozeropt, free_energy and zsisa.
@@nozeropt
Topic   : nozeropt
Type    : Keyword
Use     : Exclude zero point energy term from phonon/free energy calculation
        : - this has the advantage that the conventional energy minimised
        : structure corresponds to the zero kelvin structure.
See also: phonon, free_energy
@@noenergy
Topic   : noenergy
Type    : Keyword
Use     : Do not calculate energy.
@@nodensity_out
Topic   : nodensity_out
Type    : Keyword
Use     : Do not write phonon density of states curve to output channel.
@@broaden_dos
Topic   : broaden_dos
Type    : Keyword and option
Default : 0.2
Use     : An approximation to the delta function is used in order to line
        : Lorentzian broaden the phonon density of states peaks. If given 
        : as a keyword then the default broadening is applied or if used 
        : as an option the user may specify their own broadening factor.
        :
        : e.g. broaden 0.3
        :
        : The expression used for the broadening is:
        :
        : w(f) = b/[pi*(1 + (b*(f - f0))**2)]
        :
        : where w is the fractional weight at frequency f of a peak at 
        : frequency f0. b is the broadening factor and is the inverse
        : of the half-width at half-maximum parameter.
        :
        : Note, the smaller the factor, the greater the broadening.
        : The range of the plot is automatically extended when broadening is
        : turned on to allow the highest frequency peak to decay to 1/100th of
        : its original magnitude.
See also: phonon, project, output
@@unfreeze
Topic   : unfreeze
Type    : Option
Format  : either: atom_no. radius
        : or      x y z radius
Units   : fractional for x, y, z and Angstroms for radius
Default : none
Use     : Atoms with no variables marked for optimisation are frozen out of the
        : derivative calculations to save cpu time. This can be done either by
        : setting the appropriate flags or running a "cello" calculation in
        : which only the strains are marked for optimisation, but no internal
        : variables. Unfreeze causes atoms within a spherical region about
        : either a given atom or a given origin to be marked for optimisation.
        : This option cannot be used with conp or conv for obvious reasons!
        : This option is primarily designed for large unit cell situations
        : where in effect a defect calculation is being performed.
See also: opti, trans, cello and noexclude.
@@unfix
Topic   : unfix
Type    : Keyword
Use     : By default, if GULP sets the flags for a system automatically then one
        : atom will be fixed to remove translational invariance, which would be
        : fatal to a Hessian based optimiser. For first derivative methods, there
        : is no such need and they may work better by not fixing any atoms. The
        : unfix keyword tells GULP not to fix any of the atoms.
See also: opti, noflags, conp, conv
@@debug
Topic   : debug
Type    : Keyword
Use     : Could do anything! For programmers' use only.
@@efg
Topic   : efg
Type    : Keyword
Use     : Print out electric field gradients at the atomic sites. Currently
        : this is not compatible with the use of the cell multipole method
        : - in such cases the exact electric field gradients will be calculated.
        : The principal components of the EFG tensor and the asymmetry parameter
        : are now also output as part of an efg calculation.
See also: pot, potential
@@single
Topic   : single
Type    : Keyword
Use     : Calculate energy only - default calculation.
@@ftol
Topic   : ftol
Type    : Option
Format  : ftol <opt/fit> real value
Units   : fractional
Default : 0.00001 for both fitting and optimisation
Use     : Function tolerance for optimisation/fitting.
        : Value may appear on same line as option or on the following line.
        : If ftol > 1.0 => ftol=10**(-ftol)
        : If opt/fit is not supplied then value is applied to both.
See also: gdcrit, gtol, gmax
@@gmax
Topic   : gmax
Type    : Option
Format  : gmax <opt/fit> real value
Units   : fractional
Default : 0.001 for opt / 0.001 for fit
Use     : Maximum allowed individual gradient for optimisation/fitting.
        : Value may appear on same line as option or on the following line.
        : If gmax > 1.0 => gmax=10**(-gmax)
        : If opt/fit is not supplied then value is applied to both.
See also: gdcrit, gtol, ftol
@@gtol
Topic   : gtol
Type    : Option
Format  : gtol <opt/fit> real value
Units   : fractional
Default : 0.0001 for opt / 0.0001 for fit
Use     : Gradient tolerance for optimisation/fitting.
        : Value may appear on same line as option or on the following line.
        : If gtol > 1.0 => gtol=10**(-gtol)
        : If opt/fit is not supplied then value is applied to both.
See also: gdcrit, gmax, ftol
@@bond
Topic   : bond
Type    : Keyword
Use     : Print out bond length analysis at beginning and end of run.
        : NOTE : The way in which this keyword works has changed for
        : version 1.4. Whereas in older versions all distances less
        : than the sum of the covalent radii multiplied by a tolerance
        : were considered to be bonded, now only the atoms which are
        : bonded in the calculation are listed. This therefore allows
        : for the influence of the "nobond" and "connect" options.
See also: distance, average, nobond, connect
@@angle
Topic   : angle
Type    : Keyword
Use     : Print out all valid three-body angles found for the three-body
        : potentials.
@@linmin
Topic   : linmin
Type    : Keyword
Default : no printing
Use     : Print out details of line minimisations.
@@both
Topic   : both
Type    : Option
Default : both
Use     : All subsequent potentials to be treated as both intra-
        : and intermolecular when molecule option is active.
See also: molecule, molq, molmec, inter, intra
@@scale
Topic   : scale
Type    : Option
Format  : scale <real_number>
Units   : none
Default : 1.0
Use     : Scales subsequent cell vectors and cartesian coordinates by the
        : scale factor.
@@vectors
Topic   : vectors
Type    : Option
Format  : vectors <angs/au>
        : x y z for vector 1
        : x y z for vector 2
        : x y z for vector 3
        : <6 x optimisation flags>
Units   : Angstrom (default) or au
Use     : Specifies the cartesian components of the lattice vectors. 
        : Either "vectors" or "cell" must be included.
        : Strain optimisation flags appear on last line.
@@svectors
Topic   : svectors
Type    : Option
Format  : svectors <angs/au>
        : x y for vector 1
        : x y for vector 2
        : <2 x optimisation flags>
Units   : Angstrom (default) or au
Use     : Specifies the cartesian components of the surface vectors. 
        : Either "svectors" or "scell" must be included for a surface.
        : Strain optimsation flags appear on last line.
See also: scell
@@pvector
Topic   : pvector
Type    : Option
Format  : pvector <angs/au>
        : x for vector
        : <1 x optimisation flags>
Units   : Angstrom (default) or au
Use     : Specifies the cartesian component of the polymer vector. 
        : Either "pvector" or "pcell" must be included for a polymer.
        : Strain optimsation flags appear on last line.
See also: pcell
@@cell
Topic   : cell
Type    : Option
Format  : cell <angs/au>
        : a b c alpha beta gamma <6 x optimisation flags>
Units   : Angstrom (default) or au for a, b, c and degrees for angles
Use     : Crystallographic unit cell. Either "vectors" or "cell"
        : must be given. For optimisations or fitting,
        : flags must be set unless cellonly, conp or conv are specified.
See also: vectors
@@scell
Topic   : scell
Type    : Option
Format  : scell <angs/au>
        : a b alpha <3 x optimisation flags>
Units   : Angstrom (default) or au for a, b and degrees for angle
Use     : Surface unit cell. Either "svectors" or "scell"
        : must be given for a surface. For optimisations or fitting,
        : flags must be set unless cellonly, conp or conv are specified.
See also: svectors, sfrac, sregion2
@@pcell
Topic   : pcell
Type    : Option
Format  : pcell <angs/au>
        : a <1 x optimisation flag>
Units   : Angstrom (default) or au for a
Use     : Polymer unit cell. Either "pvector" or "pcell"
        : must be given for a polymer. For optimisations or fitting,
        : flags must be set unless cellonly, conp or conv are specified.
See also: pvector
@@cartesian
Topic   : cartesian 
Type    : Option
Format  : cartesian <region <n> <qm/mm> <rigid <xyz>>> <nonrigid> <angs/au>
        : at no. x y z <charge> <occupancy> <radius> <3 x optimisation flags> <%/T>
        :   or
        : at no. x y z <charge> <occupancy> <radius> <3 x optimisation flags> <%/T>
        :   or
        : at.sym. <species_type> x y z <charge> <occupancy> <radius> <3 x flags> <%/T>
Units   : Angstrom (default) or au for coordinates and electrons for charge,
        : radius in Angstroms
Use     : Cartesian coordinates and charges for all species in the unit cell.
        : Either the atomic number or the symbol may be supplied, followed
        : by the species type. If the species type is omitted then it is
        : assumed to be a core. Individual charges may be supplied for each
        : ion or the charges for each type of species given using the 
        : species option. If the charges are given, then optionally site
        : occupancies may also be specified. Optimisation flags are only 
        : needed if cellonly, conv, bulk, conp or shell are not specified.
        :
        : If the "region" sub-option is specified, then this tells the program
        : the region number for the following atoms. In a surface calculation
        : region 2 is held fixed. If the "rigid" sub-option is also specified
        : after "region" then the region is created as a rigid body so that
        : all atoms are constrained with respect to each other. By specifying
        : a string after this containing x, y and/or z, the region may be 
        : allowed to move in particular directions. For example, in an interface
        : calculation, a region could be specified that is allowed to only relax 
        : in the z direction by using:
        :
        : cart region 3 rigid z
        :
        : NB: The "region" sub-option must come before any of the other related
        : sub-options.
        :
        : If a "T" is specified then the atom is marked for the translate option
        : If a "%" is specified then the atom is part of a growth slice if it 
        : is in region 1 of a surface calculation.
        : 
See also: fractional, ditto, spacegroup
@@fractional
Topic   : fractional
Type    : Option
Format  : fractional 
        : at no. x y z <charge> <occupancy> <radius> <3 x optimisation flags>
        :   or
        : at.sym. <species_type> x y z <charge> <occupancy> <radius> <3 x flags>
Units   : Fractional and electrons, except for radius in Angstroms
Use     : Internal coordinates and charges for all species in the unit cell.
        : Either the atomic number or the symbol may be supplied, followed
        : by the species type. If the species type is omitted then it is
        : assumed to be a core. Individual charges may be supplied for each
        : ion or the charges for each type of species given using the 
        : species option. If the charges are given, then optionally site
        : occupancies may also be specified. Similarly, if the charge and
        : occupancy are given, then the radius of a breathing shell may
        : also be present. Optimisation flags are only needed if cellonly,
        : conv, bulk, conp or shell are not specified.
See also: cartesian, ditto, spacegroup, cell
@@sregion2
Topic   : sregion2
Type    : Option
Format  : sregion2 atom_number
Units   : none
Use     : Specifies the first atom in the slab that is in region 2. Region 2
        : is the region that contains the fixed atoms that represent the
        : bulk in a surface calculation. Atoms in region 2 will automatically
        : be fixed during geometry optimisation and the self-energy of the
        : region will be excluded from the surface energy of the slab - i.e.
        : the surface energy calculated will be for one side, that of region 1.
See also: sfrac, scell, sbulkenergy
@@sbulkenergy
Topic   : sbulkenergy
Type    : Option
Format  : sbulkenergy <bulk energy of surface region 1>
Units   : eV
Use     : Specifies the energy that the atoms of a surface region 1 would
        : have had in the bulk material. This value is determined when
        : building the surface slab and is required to calculate the
        : surface energy.
        : As an example, consider a surface region 1 of formula Mg24O24 - 
        : here the value would be 24 times the value of the bulk MgO energy
        : for the primitive cell as calculated by GULP.
See also: sregion2
@@totalenergy
Topic   : totalenergy
Type    : Option
Format  : totalenergy <total energy of bulk unit cell>
Units   : eV
Use     : This option is written out by GULP as information for the generation
        : of a surface calculation input by GDIS based on a restart file.
See also: sbulkenergy
@@dhkl
Topic   : dhkl
Type    : Option
Format  : dhkl <width of growth slice> <au>
Units   : Angstrom
Use     : This specifies the spacing of the hkl planes which is equivalent to the
        : width of the growth slice for the calculation of the attachment energy.
        : This should only be specified for an unrelaxed surface. For a general
        : surface the growth slice can be marked by adding a "%" sign to the end
        : of the coordinate line.
See also: sfractional, cartesian
@@sfractional
Topic   : sfractional
Type    : Option
Format  : sfractional <region <n> <qm/mm> <rigid <xyz>>> <nonrigid>
        : at.sym. <species_type> x y z <charge> <occupancy> <radius> <3 x flags> <T/%>
Units   : Fractional for x and y, Angstroms for z and radius, and electrons
Default : For region 2, rigid is the default.
Use     : Internal coordinates and charges for all species in the surface cell.
        : Either the atomic number or the symbol may be supplied, followed
        : by the species type. If the species type is omitted then it is
        : assumed to be a core. Individual charges may be supplied for each
        : ion or the charges for each type of species given using the 
        : species option. If the charges are given, then optionally site
        : occupancies may also be specified. Similarly, if the charge and
        : occupancy are given, then the radius of a breathing shell may
        : also be present. Optimisation flags are only needed if cellonly,
        : conv, bulk, conp or shell are not specified.
        : If the "region" sub-option is specified, then this tells the program
        : the region number for the following atoms. In a surface calculation
        : region 2 is held fixed. If the "rigid" sub-option is also specified
        : after "region" then the region is created as a rigid body so that
        : all atoms are constrained with respect to each other. By specifying
        : a string after this containing x, y and/or z, the region may be 
        : allowed to move in particular directions. For example, in an interface
        : calculation, a region could be specified that is allowed to only relax 
        : in the z direction by using:
        :
        : sfrac region 3 rigid z
        :
        : NB: The "region" sub-option must come before any of the other related
        : sub-options.
        :
        : If a "T" is specified then the atom is marked for the translate option
        : If a "%" is specified then the atom is part of a growth slice if it 
        : is in region 1 of a surface calculation.
See also: scell, sregion2
@@pfractional
Topic   : pfractional
Type    : Option
Format  : pfractional <region <n> <qm/mm> <rigid <xyz>>> <nonrigid>
        : at.sym. <species_type> x y z <charge> <occupancy> <radius> <3 x flags>
Units   : Fractional for x Angstroms for y and z, and electrons, radius in 
        : Angstroms
Use     : Internal coordinates and charges for all species in the polymer cell.
        : Either the atomic number or the symbol may be supplied, followed
        : by the species type. If the species type is omitted then it is
        : assumed to be a core. Individual charges may be supplied for each
        : ion or the charges for each type of species given using the 
        : species option. If the charges are given, then optionally site
        : occupancies may also be specified. Similarly, if the charge and
        : occupancy are given, then the radius of a breathing shell may
        : also be present. Optimisation flags are only needed if cellonly,
        : conv, bulk, conp or shell are not specified.
See also: pcell
@@cutd
Topic   : cutd
Type    : Option
Format  : cutd cutoff_distance <angs/au>
Units   : Angstrom (default) or au
Default : 2.0 Angstroms
Use     : Controls search for bond lengths.
See also: bond
@@cutp
Topic   : cutp
Type    : Option
Format  : cutp cutoff_distance <polynomial/cosine/voter/exponential/mdf> <taper_range> <angs/au>
Units   : Angstrom (default) or au
Default : Use individual potential values / polynomial
Use     : Maximum interatomic potential cutoff if less than individual value
        : This can be optionally followed by a taper range. If this is set
        : to a non-zero value then all short range potentials are tapered
        : smoothly to zero over this range such that the energy, first and
        : second derivatives remain continuous. This facility is particularly
        : useful for MD where discontinuities can lead to drift in the energy/
        : temperature. Note that tapering does not apply to Coulomb subtracts,
        : Stillinger-Weber potentials (as these go to zero at the cut-off any
        : way) and spline potentials (which can be constructed to go to zero
        : as well). Either a polynomial or cosine taper form can be used.
        :
        : The form of the Voter taper is:
        :
        : E_smooth(r) = E(r) - E(rcut) + (rcut/m)*(1 - (r/rcut)**m)*(dE(rcut)/dR)
        :
        : The form of the exponential taper is:
        :
        : E_smooth(r) = E(r)*f_cut(r)
        :
        : where f_cut(r) = exp(-1/(rcut-r)) for r < rcut and = 0 for r >= rcut
        :
        : Note that in the case of the Voter and exponential tapers there is 
        : no taper range since it applies over the whole range.
        :
        : The form of the MDF (Mei-Davenport-Fernando) taper is:
        :
        : E_smooth(r) = E(r)*f_cut(r)
        :
        : where f_cut(r) = 1.0 for r < r_m and = 0 for r >= rcut.
        : In between it takes the value f_cut(r) = ((1 - x)**3)*(1+3x+6x**2), where
        : x = (r-r_m)/(rcut-r_m). Here r_m is the start of the taper range.
        :
@@bocharge
Topic   : bocharge
Type    : Option
Format  : bocharge <staper>
        : atom1 atom2 deltaQ Rmin Rmax
Units   : au
Default : None for potential / use cosine taper
Use     : Specifies the parameters for the taper function used in determining
        : bond order charges as a function of environment. The charge on an
        : ion is determined as:
        : 
        : Atom 1:  Q = sum [ - deltaQ*H(r) ] 
        : Atom 2:  Q = sum [ + deltaQ*H(r) ] 
        : 
        : Here the sum is over all atoms of the approriate type within the
        : cutoff radius, Rmax. H(r) is taper function that acts between Rmin
        : and Rmax. In the original paper of Jiang and Brown a cosine taper
        : is used and this is the default. However, the sub-option allows the
        : sine taper of Watanabe et al (Jpn. J. Appl. Phys. 38, L367 (1999))
        : to be used which has better behaviour for the second derivatives at
        : the cutoff.
        : 
See also: botwobody, borepulsive, boattractive, boselfenergy, sw2jb, sw3jb
@@boselfenergy
Topic   : boselfenergy
Type    : Option
Format  : boselfenergy
        : atom1 Kq <rho> q0 
Units   : Kq in eV, rho in a.u., q0 in a.u.
Default : Rho = 1.0
Use     : Specifies the self energy for bond order charges, as introduced by
        : Jiang and Brown:
        :
        : E = Kq*exp(-rho/(q - q0)) if q > q0 for q0 > 0
        :
        : or 
        :
        : E = Kq*exp(rho/(q - q0)) if q > q0 for q0 < 0
        :
        : else E = 0
        :
See also: botwobody, borepulsive, boattractive, bocharge, sw2jb, sw3jb
@@botwobody
Topic   : botwobody
Type    : Option
Format  : botwobody <kcal/kjmol> 
        : atom1 atom2 A B za zb rtaper rmax <4*flags>
        :
        : or 
        :
        : botwobody combine
        : atom1 atom2 chiR chiA <2*flags>
        :
Units   : A and B in eV, za and zb in 1/Angstroms, rtaper and rmax in Angs
Default : none
Use     : Specifies the parameters for the twobody form of a bond-order
        : potential of the Tersoff form:
        :
        : E = f(r)[A.exp(-za.r).(BOr) - B.exp(-zb.r).(BOa)]
        :
        : where f(r) is a taper function that smooths the decay from rtaper
        : to rmax, BOr and BOa are the bond orders for the repulsive and 
        : attractive terms, respectively. These terms are set by separate
        : options. If the combine sub-option is specified then the parameters
        : are generated using Tersoff's combination rules from the values for
        : the corresponding element's self-self interaction. The chi values
        : then scale the repulsive and attractive terms.
See also: borepulsive, boattractive, bocharge, boselfenergy
@@borepulsive
Topic   : borepulsive
Type    : Option
Format  : borepulsive 
        : atom1 <atom2> alpha m n lambda <3*flags>
        :
        : or
        :
        : borepulsive theta
        : atom1 <atom2> alpha m n lambda c d h <6*flags>
        : NB The value of m cannot be fitted and therefore there is no flag
Units   : lambda in 1/Angstroms
        : All other quantities are unitless.
Default : If atom2 is not given then it will be set to be atom1 
Use     : Sets the parameters for the bond-order in the repulsive term as
        : given by
        :
        : BOr = (1 + (alpha*zeta)**n)**(-1/2n)
        :
        : For case without "theta" sub-option;
        :
        : zeta = Sum(rik) [f(rik).exp(lambda**m.(rij-rik)**m)]
        :
        : else;
        :
        : zeta = Sum(rik) [f(rik).g(theta).exp(lambda**m.(rij-rik)**m)]
        :
        : f(rik) = cosine taper function
        :
        : g(theta) = 1 + (c/d)**2 - c**2/[d**2 + (h - cos(theta))**2]
        :
        : Note that the cut-offs are derived from the values for the corresponding
        : botwobody potential.
        :
        : NB: Because of the introduction of pair-wise specific terms, input files
        : from earlier versions will needed to be changed for mixed element systems.
        :
See also: botwobody, boattractive, bocharge, boselfenergy
@@boattractive
Topic   : boattractive
Type    : Option
Format  : boattractive
        : atom1 <atom2> alpha m n lambda <3*flags>
        :
        : or
        :
        : boattractive theta
        : atom1 <atom2> alpha m n lambda c d h <6*flags>
        : NB The value of m cannot be fitted and therefore there is no flag
Units   : lambda in 1/Angstroms
        : All other quantities are unitless.
Default : If atom2 is not given then it will be set to be atom1 
Use     : Sets the parameters for the bond-order in the attractive term as
        : given by
        :
        : BOa = (1 + (alpha*zeta)**n)**(-1/2n)
        :
        : For case without "theta" sub-option;
        :
        : zeta = Sum(rik) [f(rik).exp(lambda**m.(rij-rik)**m)]
        :
        : else;
        :
        : zeta = Sum(rik) [f(rik).g(theta).exp(lambda**m.(rij-rik)**m)]
        :
        : f(rik) = cosine taper function
        :
        : g(theta) = 1 + (c/d)**2 - c**2/[d**2 + (h - cos(theta))**2]
        :
        : Note that the cut-offs are derived from the values for the corresponding
        : botwobody potential.
        :
        : NB: Because of the introduction of pair-wise specific terms, input files
        : from earlier versions will needed to be changed for mixed element systems.
        :
See also: botwobody, borepulsive, bocharge, boselfenergy
@@potential_interpolation
Topic   : potential_interpolation
Type    : Option
Format  : potential_interpolation number_of_points 
Units   : None
Default : Do not use interpolation
Use     : Requests that linear interpolation of potentials is used to 
        : accelerate the calculation where possible at the expense of
        : numerical precision. The larger the number of points the greater
        : will be the precision (values of 100,000 & larger are typical).
        : Currently this technique is only used in MD.
@@buckingham
Topic   : buckingham 
Type    : Option
Format  : buckingham <inter/intra> <bond/x12/x13/mol/o14> <kcal/kjmol> <ener/grad> <scale14> <type_of_bond>
        : atom1 atom2 A rho C <rmin> rmax <3*flags>
Units   : A in eV, rho in Angs, C in eV*Angs**6
        : If kcal is given : A in kcal, rho in Angs, C in kcal*Angs**6
        : If kjmol is given: A in kJmol-1, rho in Angs, C in kJmol*Angs**6
Default : none
Use     : Buckingham potential - optimisation flags for fitting (0/1).
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = A.exp(-r/rho) - C/r**6
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
See also: c6
@@cfm_harmonic
Topic   : cfm_harmonic
Type    : Option
Format  : cfm_harmonic <kcal/kjmol>
        : atom1 atom2 k r0 R w rmax <4*flags>
Units   : k in eV/Ang**2, r0, w and R in Ang
Default : none
Use     : Specifies a harmonic intra potential for the central force model
        : as described by Bresme (J. Chem. Phys. 115, 7564 (2001)).
        : 
        : E = [0.5*k*(r - r0)**2]*[1 - t(r)]
        : 
        : where
        : 
        : t(r) = 0.5*(1 + tanh((r-R)/w)) 
        : 
        : NB: If w < 0 then t(r) = 1 
See also: cfm_power, cfm_gaussian, cfm_fermi
@@cfm_gaussian
Topic   : cfm_gaussian
Type    : Option
Format  : cfm_gaussian <kcal/kjmol>
        : atom1 atom2 k zeta r0 R w rmax <5*flags>
Units   : k in eV, r0, w and R in Ang, zeta in Ang**-2
Default : none
Use     : Specifies a Gaussian inter potential for the central force model
        : 
        : E = [k*exp(-zeta*(r - r0)**2)]*t(r)
        : 
        : where
        : 
        : t(r) = 0.5*(1 + tanh((r-R)/w)) 
        : 
        : NB: If w < 0 then t(r) = 1 
See also: cfm_harmonic, cfm_power, cfm_fermi
@@cfm_power
Topic   : cfm_power
Type    : Option
Format  : cfm_power <kcal/kjmol>
        : atom1 atom2 A power R w rmax <4*flags>
Units   : k in eV*Ang**power, w and R in Ang, power is unitless
Default : none
Use     : Specifies a power-law inter potential for the central force model
        : as described by Bresme (J. Chem. Phys. 115, 7564 (2001)). 
        : 
        : E = [A/r**power]*t(r)
        : 
        : where
        : 
        : t(r) = 0.5*(1 + tanh((r-R)/w)) 
        : 
        : NB: If w < 0 then t(r) = 1 
See also: cfm_harmonic, cfm_gaussian, cfm_fermi
@@cfm_fermi
Topic   : cfm_fermi
Type    : Option
Format  : cfm_fermi <kcal/kjmol>
        : atom1 atom2 k zeta r0 R w rmax <5*flags>
Units   : k in eV, r0, w and R in Ang, zeta in Ang**-1
Default : none
Use     : Specifies a Fermi-Dirac like inter potential for the central force model 
        : as described by Bresme (J. Chem. Phys. 115, 7564 (2001)).
        : 
        : E = [k/(1+exp(zeta*(r - r0)))]*t(r)
        : 
        : where
        : 
        : t(r) = 0.5*(1 + tanh((r-R)/w)) 
        : 
See also: cfm_harmonic, cfm_power, cfm_gaussian
@@exppowers
Topic   : exppowers
Type    : Option
Format  : exppowers <inter/intra> <bond/x12/x13/mol/o14> <kcal/kjmol> <ener/grad> <scale14> <type_of_bond>
        : atom1 atom2 A B0 B1 B2 B3 <rmin> rmax <4*flags>
Units   : A in eV, B0 in appropriate power of Angstroms
Default : none
Use     : Exp-powers potential - this potential has multiple powers of r in the 
        : exponential form.
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        :
        : E = A.exp(B0 + B1*r + B2*r**2 + B3*r**3)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
See also: buckingham
@@spline
Topic   : spline 
Type    : Option
Format  : spline <cubic> <reverse> <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <type_of_bond>
        : atom1 atom2 <shift> <rmin> rmax <1*flag>
        : energy_1 distance_1
        : energy_2 distance_2
        :     :        :
        : energy_n distance_n
Units   : Energies in eV, distances in Angs
Default : rational function spline, shift = 0.0
Use     : Spline potential - flag for fitting (0/1) of shift.
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        : If the option "reverse" is specified then the spline information
        : will be read as distance then energy, ie the reverse order to
        : normal.
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded, potential cutoffs are omitted from input.
        :
@@buck4
Topic   : buck4 
Type    : Option
Format  : buck4 <inter/intra> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 A rho C <rmin> cut1 rminimum cut2 rmax <4*flags>
Units   : A in eV, rho in Angs, C in eV*Angs**6, distances in Angstroms
Default : none
Use     : Four range Buckingham potential - optimisation flags for fitting (0/1)
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        : The form of the potential is:
        :   from rmin to cut1    : E=Aexp(-r/rho)
        :   from cut1 to rminimum: E=a0+a1*r+a2*r**2+a3*r**3+a4*r**4+a5*r**5
        :   from rminimum to cut2: E=b0+b1*r+b2*r**2+b3*r**3
        :   from cut2 to rmax    : E=-C/r**6
        : The potentials are subjected to the constraint that the functions and
        : their first and second derivatives must be continuous at the boundary
        : points, and also that the function must have a stationary point at 
        : rminimum (hopefully a minimum!).
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        :
@@tsuneyuki
Topic   : tsuneyuki
Type    : Option
Format  : tsuneyuki <form2> <inter/intra/bond> <x12/x13/mol/o14> <type_of_bond>
        : atom1 atom2 Q1 Q2 zeta <rmin> rmax <1*flag>
Units   : Q1 & Q2 in a.u., zeta in Angstroms**-1
Defaults: form1
Use     : Specifies the short-range Coulomb correction described by Tsuneyuki et al
        : PRL, 61, 869 (1988). Note that the role of the charges is inverted relative
        : to the paper in order that charge neutrality is achieved in the long-range
        : limit. It is assumed that this was a typo. The correction to the Coulomb
        : term is given by:
        :
        : U = [Q1.Q2 - q1.q2]g(r)/r
        :
        : where q1 & q2 are the regular charges specified elsewhere, and g(r) is:
        :
        : Form1: g(r) = (1+z.r)exp(-2z.r)
        :
        : Form2: g(r) = (1 + 11(z.r)/8 + 3(z.r)**2/4 + (z.r)**3/6)exp(-2z.r)
        :
        : where z is used as a short-hand for zeta
        :
@@lennard_jones
Topic   : lennard
Type    : Option
Format  : lennard <epsilon> <zero> <esff> <combine/geometric> <m> <n> <inter/intra> <bond/x12/x13/mol/o14> <type_of_bond>
        : <kcal/kjmol> <ener/grad> <all> <scale14>
        : atom1 atom2 (A B/epsilon sigma) <rmin> rmax <2*flags>
Units   : A in ev*Angs**m, B in ev*Angs**n, epsilon in eV, sigma in Angs
Default : m=12, n=6
Use     : Lennard-Jones potential - optimisation flags for fitting.
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = A/r**m - B/r**n
        :
        : The exponents are by default 12 and 6, but these can be changed
        : by specifying values after the option word lennard. By specifying
        : epsilon after lennard this means that the input is in terms of
        : epsilon and sigma instead of A and B.
        :
        : E = epsilon*(c1*(sigma/r)**m - c2*(sigma/r)**n)
        :
        : Specifying "zero" allows the user to chose between sigma defined
        : as the potential energy minimum distance (default) or the distance
        : at which the potential energy goes to zero.
        :
        : r = sigma => E = epsilon
        :
        : c1 = (n/(m-n))
        : c2 = (m/(m-n))
        :
        : r = sigma => E = zero
        :
        : c1 = (n/(m-n))*(m/n)**(m/(m-n))
        : c2 = (m/(m-n))*(m/n)**(n/(m-n))
        :
        : If combine is specified as well as epsilon, then combination rules
        : are used to obtain the epsilon and sigma parameters based on the
        : values for individual species. The combination rules are as follows:
        :
        : epsilon = 2*sqrt(e1*e2)(s1**3.s2**3)/(s1**6+s2**6)
        : sigma   = ((s1**6+s2**6)/2)**1/6
        :
        : where e1, e2, s1 and s2 are the atom related parameters.
        :
        : Alternatively, if geometric combination rules are specified then
        : this becomes:
        :
        : epsilon = sqrt(e1*e2)
        : sigma   = (s1+s2)/2
        :
        : If combine is specified for a standard lennard-jones potential
        : then the species values given in the "atomab" command are used
        : to obtain potential parameters using the following rules:
        :
        : Aij = sqrt(Ai.Aj)
        : Bij = sqrt(Bi.Bj)
        :
        : If esff is specified then this implies that the ESFF combination
        : rules will be used to calculate the potential parameters. This
        : automatically implies "combine" and that the functional form is
        : 9/6. The parameters are then obtained from epsilon and sigma as
        : follows:
        :
        : Aij = Ai.Bj + Aj.Bi
        : Bij = 3 * Bi.Bj
        :
        : where Ai = sqrt(epsilon)*sigma**6
        :       Bi = sqrt(epsilon)*sigma**3
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        :
        : If "all" is specified as a sub-option, then Lennard-Jones potentials
        : will be automatically created and added for all combinations of A/B
        : or epsilon/sigma, as appropriate. NB: This will be done based on the 
        : values that have been specified up to that point and so be sure to get
        : the order right! In this case, the line following should only have the 
        : rmin and rmax to be used for all the potentials.
        :
        : e.g.
        : lennard 12 6 combine all
        : 0.0 12.0
        :
        : When specified as bonded potential, cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
See also: epsilon, atomab, c6
@@igauss
Topic   : igauss
Type    : Option
Format  : igauss <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 A b r0 <rmin> rmax <3*flags>
Units   : A in eV, b in Angs**-2, r0, rmin and rmax in Angs
Default : none
Use     : This option specifies the use of an inverted Gaussian potential
        : between two atoms. The form of the energy is:
        :
        : E = - A.exp(-b(r-r0)**2)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        :
@@covexp
Topic   : covexp
Type    : Option
Format  : covexp <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <ener/grad> <scale14> <type_of_bond>
        : atom1 atom2 D a r0 <rmin> rmax <3*flags>
Units   : D in eV, a in Angs**-1, r0, rmin and rmax in Angs
Default : none
Use     : Covalent-exponential potential form (see Phys. Rev. B, 60, 7234 (1999))
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = -D*exp(-a*(r-r0)**2/(2r))
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
@@morse
Topic   : morse
Type    : Option
Format  : morse <intra/inter> <bond/x12/x13/o14> <kcal/kjmol> <zero> <scale14> <etaper> <ener/grad> <type_of_bond>
        : atom1 atom2 De a r0 <coul> <rmin> rmax <3*flags>
Units   : De in eV, a in Angs-1, r0 in Angs, coul in none
Default : none
Use     : Morse potential - optimisation flags for fitting.
        : coul = 1.0 => Coulomb subtracted.
        : The format of the data assumes that rmin is the least important
        : entry. I.e., if one of the optional parameters, coul or rmin,
        : is missing it is assumed that coul is present and rmin
        : is set to zero.
        :
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = De.((1-exp(-a(r-r0)))**2 - 1.0) - coul.qi.qj/r
        :
        : If "etaper" is specified then the potential is scaled by:
        :
        : exp(-1/(rmax-r))
        :
        : to ensure that the potential (excluding the Coulomb subtraction)
        : goes to zero at the cutoff. In this case, the energy/gradient
        : options cannot be used.
        : Note that the potential can also be written as:
        :
        : E = De.(exp(-2a(r-r0)) - 2exp(-a(r-r0))) - coul.qi.qj/r
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        : The words energy or gradient may be given on the first line resulting 
        : in energy or gradient offsets being applied such that the specified 
        : quantity goes to zero at the cutoff distance.
        :
        : If the "zero" sub-option is specified then the energy of the potential
        : is calculated relative to zero at the minimum rather than at dissociation.
        :
@@fermi-dirac
Topic   : fermi-dirac
Type    : Option
Format  : fermi-dirac <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <ener/grad> <type_of_bond>
        : atom1 atom2 a b r0 <rmin> rmax <3 x flags>
Units   : a in eV, b in Angs-1, r0 in Angs
Default : none
Use     : Fermi-Dirac potential - optimisation flags for fitting.
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        :
        : E = a/(1+exp(b(r-r0)))
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
@@erferfc
Topic   : erferfc
Type    : Option
Format  : erferfc <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <ener/grad> <type_of_bond>
        : atom1 atom2 A alpha beta <rmin> rmax <3 x flags>
Units   : A in eV, alpha and beta in Angs
Default : none
Use     : Specifies the parameters of an erferfc potential, which has the form:
        :
        : E_ij = A.erf(r/alpha).erfc(r/beta)/r
        :
See also: qerfc, reperfc, erfpot
@@erfpot
Topic   : erfpot
Type    : Option
Format  : erfpot <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <ener/grad> <type_of_bond>
        : atom1 atom2 A alpha <rmin> rmax <2 x flags>
Units   : A in eV, alpha in Angs
Default : none
Use     : Specifies the parameters of an erf potential, which has the form:
        :
        : E_ij = A.erf(r/alpha)/r
        :
See also: qerfc, reperfc, erfpot
@@reperfc
Topic   : reperfc
Type    : Option
Format  : reperfc <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <ener/grad> <type_of_bond>
        : atom1 atom2 A beta <rmin> rmax <3*flags>
Units   : A in eV and beta in Angs
Default : none
Use     : Specifies the parameters of an reperfc potential, which has the form:
        :
        : E_ij = A.erfc(r/beta)/r
        :
See also: qerfc, erferfc, erfpot
@@mei-davenport
Topic   : mei-davenport
Type    : Option
Format  : mei-davenport <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 phi0 delta gamma r0 <rmin> rmax <4*flags>
Units   : phi0 in eV, r0 in Angs and delta & gamma are dimensionless.
Default : none
Use     : Specifies the parameters for the two-body component of the Mei-Davenport 
        : potential (PRB, 46, 21 (1992)):
        :
        : E_ij = - phi0*(1 + delta*(r/r0 - 1))*exp(-gamma*(r/r0 - 1))
        :
See also: eam_density, eam_functional
@@ljbuffered
Topic   : ljbuffered
Type    : Option
Format  : ljbuffered <m> <n><intra/inter> <bond/x12/x13/o14/mol> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 A B r0 <rmin> rmax <3*flags>
Units   : A in eV*Angs**m, B in eV*Angs**n, r0 in Angs
Default : m = 12, n = 6, r0 = 0.0
Use     : Buffered Lennard-Jones potential, where r0 is added to the distance.
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        :
        : E = A/(r + r0)**m - B/(r + r0)**n
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        :
@@qtaper
Topic   : qtaper
Type    : Option
Format  : qtaper <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14>
        : atom1 atom2 C rmax <1*flag>
Units   : C in eV, rmax in Angs
Default : none
Use     : Tapers the Coulomb interaction to a constant value, C, at short
        : distances. Currently implemented crudely as an interatomic 
        : potential to stop Coulomb collapse. However, this won't avoid
        : numerical errors if atoms are started too close in the first
        : place. The potential uses a taper from rmax to 0.0 to match the
        : Coulomb potential using the charges of the species to the constant
        : value at the nucleus. This potential mimics the fact that at 
        : short range the Coulomb term becomes damped by being an integral
        : rather than just a 1/r potential.
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        :
        : E = [qi.qj/r].f(r) + C.(1-f(r)), where f(r) = polynomial taper
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        :
@@qerfc
Topic   : qerfc
Type    : Option
Format  : qerfc <intra/inter> <bond/x12/x13/mol/o14> <au/nm/pm> <ener/grad> <type_of_bond>
        : atom1 atom2 rho rmax <1*flag>
Units   : rho and rmax in Angstroms
Default : none
Use     : Screened Coulomb interaction using the complementary error function.
        :
        : E = [qi.qj/r].erfc(r/rho)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
	: NOTE : The keyword "noelectrostatics" should be included when using
	: this potential to turn off the normal Ewald sum, otherwise the
	: Coulomb interaction will be double counted.
See also: noelectrostatics
@@qoverr2 
Topic   : qoverr2 
Type    : Option
Format  : qoverr2 <intra/inter> <bond/x12/x13/mol/o14> <au/nm/pm> <ener/grad>
        : atom1 atom2 rmax <1*flag>
Units   : rmax in Angstroms
Default : none
Use     : Computes the charge interaction as a local one based on:
        : 
        : E = [qi.qj/r**2]
        : 
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction. 
        : When specified as bonded potential cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        : NOTE : The keyword "noelectrostatics" should be included when using
        : this potential to turn off the normal Ewald sum, otherwise the
        : Coulomb interaction will be double counted.
        : NOTE : This expression is used for the Coulomb term in Accelrys's
        : implementation of Dreiding.
See also: noelectrostatics
@@qwolf
Topic   : qwolf
Type    : Option
Format  : qwolf <eta> <rmax>
Units   : eta in inverse Angstroms and rmax in Angstroms
Default : none
Use     : Calculates the electrostatic energy using the approximation to the Ewald
        : sum due to Wolf et al (J. Chem. Phys., 110, 8254, 1999):
        :
        : Eij = [qi.qj/r].erfc(eta*r) - lim{r->rmax}([qi.qj/rmax].erfc(eta*rmax))
        :
        : Ei = - (erfc(eta*rmax)/(2*rmax) + eta/sqrt(pi))*qi**2
        :
        : Note: it is up to the user to set the eta and rmax values such that the
        : Ewald limit is recovered. At present the Wolf sum cannot be used with a
        : defect calculation.
See also: noelectrostatics
@@delta
Topic   : delta
Type    : Option
Format  : delta <fit> <real value>
Units   : fractional
Default : 0.00001 for ordinary fitting / 0.0001 for relax fitting
Use     : Differencing interval used in numerical procedures.
        : One delta value is possible according to the sub-option word
        : supplied. This value corresponds to the differencing interval
        : for gradients during fitting (fit). Previously values were
        : also possible in connection with free energy minimisation.
        : However, these are no long needed with analytical derivatives.
@@maxcyc
Topic   : maxcyc
Type    : Option
Format  : maxcyc <opt/fit> <integer value>
Units   : none
Default : 1000 for optimisation
        : 500*(no. parameters) for fitting
Use     : Maximum number of function calls.
        : Value may appear on same line as option or on the following line.
        : If opt/fit is not supplied then value is applied to both.
@@stepmx
Topic   : stepmx
Type    : Option
Format  : stepmx <opt/fit> <real value>
Units   : fractional
Default : 1.0 for opt / 1000.0 for fit
Use     : Maximum step size in optimisation/fitting.
        : Value may appear on same line as option or on the following line.
        : If opt/fit is not supplied then value is applied to both.
@@xtol
Topic   : xtol
Type    : Option
Format  : xtol <opt/fit> <real value>
Units   : fractional
Default : 0.00001 for opt / 0.00001 for fit
Use     : Parameter tolerance for optimisation/fitting.
        : Value may appear on same line as option or on the following line.
        : If xtol > 1.0 => xtol=10**(-xtol)
        : If opt/fit is not supplied then value is applied to both.
@@spacegroup
Topic   : spacegroup
Type    : Option
Format  : space group no. or Hermann-Maugain symbol
        : Note: symbol must be in capital letters with spaces between them
        : e.g. for MgO => 225 or F M -3 M
Units   : none
Default : no symmetry => P1
Use     : Specifies symmetry information by space group. Either the standard
        : symbol may be used or the extended symbol for specifying alternative
        : settings. When giving extended symbols only the first line in 
        : International Tables should be given i.e. the 4th operator/qualifier
        : after the centring symbol should be omitted. For example, in order
        : specify the non-standard P 21/A setting of P 21/C the input should be:
        :
        : space
        : P 1 21/A 1
        :
See also: origin, valid_spacegroups, symmetry_operator
@@nosymmetry
Topic   : nosymmetry
Type    : Keyword
Use     : Switches off symmetry after generating unit cell.
        : For non-primitive systems the final unit cell is primitive.
@@nodsymmetry
Topic   : nodsymmetry
Type    : Keyword
Use     : Switches off the use of symmetry in defect calculations.
@@fit
Topic   : fit
Type    : Keyword
Use     : Perform fitting run using unit matrix with BFGS method. 
See also: simul, relax, genetic, fbfgs, delta, simplex
@@simplex
Topic   : simplex
Type    : Keyword
Use     : Use the simplex algorithm for fitting instead of unit matrix with BFGS method. 
See also: fit, simul, relax, genetic, fbfgs, delta
@@fbfgs
Topic   : fbfgs
Type    : Keyword
Use     : Perform fitting run using full BFGS method. This involves
        : the calculation of the full numerical Hessian instead of 
        : just the diagonal elements.
See also: fit
@@genetic
Topic   : genetic
Type    : Keywrd
Use     : Given contents of unit cell use a genetic algorithm to find
        : possible atomic coordinates. (global optimiser)
        : A local minimisation can then be performed on the best configurations
See also: predict, anneal, contents, global and cost

and

Topic   : genetic
Type    : Option
Use     : Start of genetic algorithm options section, closed by "end"
See also: tournament, crossover, mutation, discrete,
        : configurations, best, maximum, minimum, dmaximum, dminimum
@@tournament
Topic   : tournament
Type    : Option
Format  : tournament initial <final> <stepsize>
Default : 0.8 <0.8> <0.0>
Use     : Part of ga options section. Specifies the tournament selection
        : probability. The higher the value, the more likely it is that
        : the better configuration will be selected. If <initial> value
        : is less than <final> value then after 20 iterations tournament
        : incremented by <stepsize>. If the optimisation is stuck in a local minimum
        : then, if stepsize non-zero, tournament is reset to <initial>.
See also: genetic, anneal option and gexp.
@@crossover
Topic   : crossover
Type    : Option
Format  : crossover initial <final> <stepsize>
Default : 0.4 <0.4> <0.0>
Use     : Part of ga options section. Specifies the crossover probability.
        : The higher the value, the more likely it is that crossover will
        : occur.  If <initial> value is less than <final> value then after
        : 20 iterations tournament is incremented by <stepsize>. If the optimisation
        : is stuck in a local minimum then if stepsize non-zero tournament is reset
        : to <initial>.
See also: genetic, anneal option and tpxo.
@@mutation
Topic   : mutation
Type    : Option
Format  : mutation initial <final> <stepsize>
Default : 1/(sum of discretisation values) <initial> <0.0>
Use     : Part of ga options section. Specifies the mutation probability
        : The higher the value, the more likely it is that mutations will
        : occur. If <initial> value is less than <final> value then after
        : 20 iterations tournament is incremented by <stepsize>. If the optimisation
        : is stuck in a local minimum then either (i) if stepsize non-zero tournament
        : is reset to <initial> OR (ii) grid fixed then mutation rate changed.
See also: genetic, anneal option and grid.
@@configurations
Topic   : configurations
Type    : Option
Format  : configurations n <max_configs> <stepsize>
Default : 10 <10> <0 or 2>
Use     : Part of ga options section. Specifies the number of configurations
        : to be used in the genetic algorithm procedure. Number of
        : configurations must be even. If maximum number of configurations
        : is greater than n then population will expand by stepsize (default
        : 2) every iteration until <n=max> after which <stepsize> new random
        : configurations will replace current <stepsize> worst configurations.
        : <stepsize> also specifies how many of the best configurations
        : survive into the next iteration without changing!
See also: genetic and predict.
@@unique
Topic   : unique
Type    : Option
Format  : unique d
Default : d=0.0d0
Use     : Part of ga options section. Any 2 candidates to be optimised must
        : have a cost function difference of at least d.
@@best
Topic   : best
Type    : Option
Format  : best n <every_m> <only>
Default : Best 2 candidates at the end of global search may be optimised.
Use     : Part of ga options section. If used then the best 'n' candidates
        : found (after every m iterations) may be optimised at the end.
        : If 'only' specified then a maximum of n candidates may be optimised
        : ie the best n from iterations m, 2m, 3m, ...
See also: genetic and predict.
@@discrete
Topic   : discrete
Type    : Option
Format  : discrete <no._to_set>=N
        : <variables_to_be_set>xN
        : <discretation_number>xN
Default : 6
Use     : Part of genetic options section. When two is raised to the power 
        : of this number it gives the discretisation interval for a fitted 
        : variable. The higher the value, the greater the resolution of the 
        : fitting.
See also: genetic
@@minimum
Topic   : minimum
Type    : Option
Format  : minimum <no._to_set>=N
        : <variables_to_be_set>xN
        : <minimum_value>xN
Default : 0.0
Use     : Part of genetic options section. Specifies the minimum value 
        : allowed in the fitting procedure.
See also: genetic
@@maximum
Topic   : maximum
Type    : Option
Format  : maximum <no._to_set>=N
        : <variables_to_be_set>xN
        : <maximum_value>xN
Default : Twice initial value.
Use     : Part of genetic options section. Specifies the maximum allowed 
        : value of a given parameter.
See also: genetic
@@dminimum
Topic   : dminimum
Type    : Option
Format  : dminimum <x> <y> <z>
Default : 0.0
Use     : Part of genetic options section. Specifies the minimum value 
        : used as a default in genetic optimisation. According to the
        : dimensionality the arguments supplied should be:
        : 2-D => z
        : 1-D => y & z
        : 0-D => x & y & z
        : By specifying a minimum value, this allows GAs to be used for
        : non-3D systems.
See also: genetic
@@dmaximum
Topic   : dmaximum
Type    : Option
Format  : dmaximum <x> <y> <z>
Default : 0.0
Use     : Part of genetic options section. Specifies the maximum value 
        : used as a default in genetic optimisation. According to the
        : dimensionality the arguments supplied should be:
        : 2-D => z
        : 1-D => y & z
        : 0-D => x & y & z
        : By specifying a maximum value, this allows GAs to be used for
        : non-3D systems.
See also: genetic
@@observables
Topic   : observables
Type    : Option
Format  : keyword
Default : only derivatives marked for optimisation
Use     : Specifies fitting observables other than structure which use
        : derivatives. 
See also: elastic, hfdlc, sdlc, energy, bulk_modulus, shear_modulus, weight,
        : gradients, hfrefractive_index, srefractive_index, piezoelectric,
        : frequency, gradient, potential, entropy, bornq, monopoleq, cv,
        : stress, qreaxff, fbond, fangle, reaction, young, poisson, coordno,
        : sqomega
@@time
Topic   : time
Type    : Option
Format  : time time_limit <seconds/minutes/hours>
Units   : seconds (default), minutes or hours
Default : Infinity!
Use     : Specifies time limit for calculation.
@@variables
Topic   : variables
Type    : Option
Format  : keyword
Default : none
Use     : Specifies fitting variables associated with
        : different species - valid options are charge, split,
        : and shift. Also allows constraints to be applied.
See also: constrain, charge, split, shift.
@@shift
Topic   : shift
Type    : Option
Format  : shift energy_shift <ev/au/kcal/kjmol-1>
Units   : eV (default), au, kcal or kJmol-1
Default : 0.0 eV
Use     : Shifts energy by this amount - mainly for use in fitting 
        : ab initio energy surfaces. Shift is applied to all subsequent
        : configurations until the value of shift is changed by another
        : shift directive. Shift can also appear in the variables section
        : as a command to cause the shift to be fitted.
See also: sshift, ashift
@@ashift
Topic   : ashift
Type    : Option
Format  : ashift <ev/au/kcal/kjmol-1> 
        : atomic_symbol value <1xflag>
Units   : eV (default), au, kcal or kJmol-1
Default : 0.0
Use     : Specifies a species specific energy shift (i.e. a one-body potential).
        : Usually this term is not needed since it is just a constant. However,
        : it may prove useful during fitting of ab initio energy surfaces.
        :
        : e.g.
        :
        : ashift 
        : O2 0.34
        :
        : The above would apply an energy shift to each O2 atom in a structure
        : of 0.34 eV. 
See also: shift, sshift
@@sshift
Topic   : sshift
Type    : Option
Format  : sshift scale_factor
Units   : none
Default : 1.0
Use     : Scales the shift value for the present configuration. Allows
        : energies of structures with different numbers of formula units
        : to be fitted.
See also: shift
@@three-body
Topic   : three-body 
Type    : Option
Format  : three <exponential/vessal/cosine> <k3> <k4> <nbeq/nbne nbond> <intra/inter> <bond/mol> <kcal/kjmol>
        : atom1 atom2 atom3 k <k3> <k4> theta0 <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3) &
        : <rmin(2-3)> rmax(2-3) <2-4 flags>
Units   : k in eVrad**-2, theta0 in degrees, rmin & rmax in Angs, k3 in eVrad**-3
        : k4 in eVrad**-4
Default : none
Use     : Three-body potentials about atom1. k is force constant and theta0 
        : the equilibrium angle. Optional flags are for fitting. Atom 1 is 
        : the middle atom of the triad about which the force acts.
        : E(three) = 1/2 * k * (theta-theta0)**2
        :
        : Exponentially decaying form is also available:
        : E(three) = 1/2 * k * (theta-theta0)**2.exp(-r12/rho1).exp(-r13/rho2)
        : Format:
        : three exponential
        : atom1 atom2 atom3 k theta0 rho1 rho2 rmax12 rmax13 rmax23 <4xflags>
        :
        : Exponentially decaying form is also available in Vessal form:
        : E(three) = 1/4*A*(B**2).exp(-r12/rho1).exp(-r13/rho2)
        : A = k/(2*(theta0-pi)**2)
        : B = (theta0-pi)**2 - (theta-pi)**2
        : Format:
        : three vessal
        : atom1 atom2 atom3 k theta0 rho1 rho2 rmax12 rmax13 rmax23 <4xflags>
        :
        : k3 and k4 terms can also be included:
        : E(three) = 1/2*k*(theta-theta0)**2 + 1/6*k3*(theta-theta0)**3
        :            + 1/24*k4*(theta-theta0)**4
        : Formats:
        : three k3
        : atom1 atom2 atom3 k k3 theta0 rmax12 rmax13 rmax23 <3xflags>
        : three k4
        : atom1 atom2 atom3 k k4 theta0 rmax12 rmax13 rmax23 <3xflags>
        : three k3 k4
        : atom1 atom2 atom3 k k3 k4 theta0 rmax12 rmax13 rmax23 <4xflags>
        :
        : Cosine of theta can also be used instead of theta, if the cosine
        : option is used :
        :
        : E(three) = 1/2*k*(cos(theta)-cos(theta0))**2
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species where 1-2 and 1-3 are bonded.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. For a three-body potential, the bond type for the
        : two bonds connected to the pivot atom can be supplied and then checked
        : before applying the potential. Valid type of bond options are:
        : single, double, triple, quadruple, resonant, amide. In addition,
        : a bond may specified as regular (default), cyclic or exocyclic.
        : the order of the bond type options matches the order of the pivot atom
        : - end atom pairs. For example, if a potential acts for the triad
        : S - C - O, where the C-S bond is a regular bond and the C-O is an 
        : exocyclic double bond then the input would look like:
        :
        : three bond single regular double exocyclic
        : C core S core O core ...... etc
        :
        : Conditions can also be placed on a potential to check the number of bonds
        : associated with the pivot atom (e.g. if a potential is designed for a 90
        : degree angle it might be necessary to check that the number of bonds is
        : four or six for square planar or octahedral). The conditions are placed
        : using one or more instances of "nbeq" or "nbne" followed by an integer.
        : Here "nbeq" imples no. of bonds must equal and "nbne" number of bonds must
        : not equal. Hence, "nbeq 4" would require the pivot to have 4 bonds. When
        : multiple terms are used, the logic of nbeq is concatenated with "or", whereas
        : that of nbne is joined by "and". Therefore "nbne 4 nbne 6" would apply to 
        : an atom with 3 bonds, but not one with 4 or 6.
        :
        : NB It's important to specify the first bond as being of "regular" type so
        : that the "exocyclic" attribute is correctly assigned to the second bond
        : since the first term is assumed to apply to the first bond, whereas the 
        : second applies to the second bond.
        :
See also: axilrod-teller, angle, stillinger-weber, exponential, bcross, uff3,
        : urey-bradley, murrell-mottram, bacross, lin3, hydrogen-bond, equatorial,
        : 3coulomb, exp2.
@@lin3
Topic   : lin3
Type    : Option
Format  : lin3 <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K isign n <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3) 
        : <rmin(2-3)> rmax(2-3) <flag>
Units   : K in eV, rmin and rmax in Angstroms
Default : none
Use     : ESFF linear three-body form :
        :
        : E(three) = K * (1 + isign*cos(n*theta))
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2, 2-3 and 1-3 are bonded.
        :
See also: axilrod-teller, angle, stillinger-weber, exponential, bcross,
        : urey-bradley, murrell-mottram, bacross, three, hydrogen-bond, equatorial,
        : uff3, 3coulomb.
@@uff1
Topic   : uff1
Type    : Option
Format  : uff1 <intra/inter> <bond> <kcal/kjmol>
        : atom1 r theta x D zeta Zeff type tor Koop Thetaoop Chi <10 x flags>
Units   : r & x in Ang, theta & thetaoop in degrees, D, Koop, chi and tor in eV, Zeff in a.u.
Default : none
Use     : Specifies the species parameters for UFF force field generation by
        : combination rules. 
See also: umorse
@@umorse
Topic   : umorse
Type    : Keyword
Use     : By default the UFF generation rules use a harmonic potential for the 
        : bonded interaction. By specifying this keyword, the Morse potential 
        : is used instead of harmonic.
See also: uff1
@@uff3
Topic   : uff3
Type    : Option
Format  : uff3 <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K theta0 rmin(1-2) rmax(1-2) rmin(1-3) rmax(1-3) 
        : rmin(2-3) rmax(2-3) <flag>
Units   : K in eV, theta0 in degrees, rmin and rmax in Angstroms
Default : none
Use     : UFF non-linear three-body form :
        :
        : E(three) = K * (C0 + C1*cos(theta) + C2*cos(2*theta))
        :
        : Here the coefficients are related to theta0 by:
        :
        : C2 = 1/(2*sin(theta0))**2 
        : C1 = - 4*C2*cos(theta0)
        : C0 = C2*(2*(cos(theta0))**2 + 1)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2, 2-3 and 1-3 are bonded.
        :
See also: axilrod-teller, angle, stillinger-weber, exponential, bcross, lin3,
        : urey-bradley, murrell-mottram, bacross, three, hydrogen-bond, equatorial,
        : 3coulomb.
@@equatorial
Topic   : equatorial
Type    : Option
Format  : equatorial <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K n beta r0 <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3)
        : <rmin(2-3)> rmax(2-3) <3*flag>
Units   : K in eV, r0, rmin and rmax in Angstroms and beta in inverse Angstroms
Default : none
Use     : ESFF equatorial three-body form :
        :
        : E(three) = (2K/n**2) * (1 - cos(n*theta)) + 2K*exp(-beta*(r13 - r0))
        :
        : Here r13 is the distance between the atoms 1-3 in the triad.
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2, 2-3 and 1-3 are bonded.
        :
See also: axilrod-teller, angle, stillinger-weber, exponential, bcross
        : urey-bradley, murrell-mottram, bacross, three, hydrogen-bond,
        : lin3, uff3, 3coulomb.
@@axilrod-teller
Topic   : axilrod-teller
Type    : Option
Format  : axilrod-teller <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3) <rmin(2-3)>
        : rmax(2-3) <flag>
Units   : k in eV*Angstroms**9, rmin & rmax in Angstroms
Default : none
Use     : Axilrod-Teller three-body potential:
        : 
        : E(three) = k (1+3*cos(theta1)*cos(theta2)*cos(theta3)) 
        :            -------------------------------------------
        :                       (r12*r13*r23)**3
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2, 2-3 and 1-3 are bonded.
        :
See also: three, angle, exponential, stillinger-weber, bcross, urey-bradley,
        : murrell-mottram, bacross, hydrogen-bond, equatorial, uff3, lin3, 3coulomb.
@@murrell-mottram
Topic   : murrell-mottram
Type    : Option
Format  : murrell-mottram <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K rho r012 r013 r023 <rmin(1-2)> rmax(1-2) <rmin(1-3)>
        : rmax(1-3) <rmin(2-3)> rmax(2-3) <5*flags>
        : c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 <11*flags>
Units   : K in eV, r012,r013,r023,rmin,rmax in Angstroms
Use     : Specifies the Murrell-Mottram three-body potential;
        :
        : E(three) = K.P(Q1,Q2,Q3).exp(-rho.Q1)
        :
        : P(Q1,Q2,Q3) = c0 + c1.Q1 + c2.Q1**2 + c3(Q2**2 + Q3**2) + c4.Q1**3 +
        :               c5.Q1(Q2**2 + Q3**2) + c6(Q3**3 - 3.Q3.Q2**2) +
        :               c7.Q1**4 + c8.Q1**2.(Q2**2+Q3**2) + c9.(Q2**2+Q3**2)**2
        :               + c10.Q1(Q3**3 - 3.Q3.Q2**2)
        :
        : R1 = (r12-r012)/r012    R2 = (r13-r013)/r013 R3 = (r23-r023)/r023
        : 
        : Q1 = (R1+R2+R3)/sqrt(3) Q2 = (R2-R3)/sqrt(2) Q3 = (2*R1-R2-R3)/sqrt(6)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2, 2-3 and 1-3 are bonded.
        :
See also: three, angle, axilrod-teller, stillinger-weber, bcross, urey-bradley,
        : exponential, bacross, hydrogen-bond, equatorial, uff3, 3coulomb.
@@exponential_three_body
Topic   : exponential
Type    : Option
Format  : exponential <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K rho1 rho2 rho3 <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3) 
        : <rmin(2-3)> rmax(2-3) <4*flags>
Units   : K in eV, rho1/2/3 in Angstroms**-1
Use     : Exponentially decaying three-body potential:
        :
        : E(three) = K * exp(-rho1*r12).exp(-rho2*r13).exp(-rho3*r23)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species where 1-2, 2-3 and 1-3 are bonded.
        :
See also: three, angle, axilrod-teller, stillinger-weber, bcross, urey-bradley,
        : murrell-mottram, bacross, hydrogen-bond, equatorial, uff3, 3coulomb,
        : exp2.
@@exp2
Topic   : exp2
Type    : Option
Format  : exp2 <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K rho12 r12_0 rho13 r13_0 <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3)
        : <rmin(2-3)> rmax(2-3) <5*flags>
Units   : K in eV, rho12/13 in Angstroms**-1, r12_0/r13_0/rmin/rmax in Angstroms
Use     : Exponentially decaying three-body potential with 2 exponentials only:
        :
        : E(three) = K*exp(-rho1*(r12-r12_0)).exp(-rho13*(r13-r13_0))
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species where 1-2, 2-3 and 1-3 are bonded.
        :
See also: three, angle, axilrod-teller, stillinger-weber, bcross, urey-bradley,
        : murrell-mottram, bacross, hydrogen-bond, equatorial, uff3, 3coulomb,
        : exponential.
@@stillinger-weber
Topic   : stillinger-weber
Type    : Information
Info    : The 2 and 3 body potentials of Stillinger-Weber are
        : available using the potential types sw2 and sw3,
        : respectively.
See also: sw2, sw2jb, sw3, sw3jb
@@sw2
Topic   : sw2
Type    : Option
Format  : sw2 <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 A rho B rmin rmax <3*flags>
Units   : A in eV, B in Angs**4, rho in Angs
Use     : Stillinger-Weber's two-body potential with cutoff smoothing
        : such that potential goes to zero at rmax:
        :
        : E = A.exp(rho/(r-rmax)).(B/r**4 - 1)
        :
See also: sw3, sw2jb, sw3jb
@@sw2jb
Topic   : sw2jb
Type    : Option
Format  : sw2jb <intra/inter> <bond/x12/x13/o14> <kcal/kjmol> <scale14>
        : atom1 atom2 A rho B Q <rmin> rmax <4*flags>
Units   : A in eV, B in Angs**4, rho in Angs, Q in a.u.
Use     : Jiang and Brown's variant of Stillinger-Weber's two-body potential 
        : which includes charge dependent bond softening 
        :
        : E = A.exp(rho/(r-rmax)).(B/r**4 - 1)*F(qi,qj)
        :
        : F(qi,qj) = exp(1/Q)exp(1/(qi + qj - Q)) if qi+qj < Q
        : F(qi,qj) = 0                            if qi+qj > Q
        :
        : See Chem. Eng. Sci., 49, 2991 (1994) for more details.
See also: sw3, sw2, sw3jb
@@sw3
Topic   : sw3 
Type    : Option
Format  : sw3 <modified> <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K theta0 rho1 rho2 <rmin12> rmax12 <rmin13> rmax13 <rmin23>
        : rmax23 <4*flags>
Units   : K in eV, theta in degrees, rho1 and rho2 in Angstroms
Use     : Stillinger-Weber's three-body potential with cutoff smoothing
        :
        : E(three) = K * exp(rho1/(r12-rmax12) + rho2/(r13-rmax13))(cos-ct0)**2
        :
        : where cos = cos(theta(jik)) and ct0 = cos(theta0)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. Note that unlike most potentials, the specification of the
        : cut-off distances is still required when using the "bond" sub-option
        : since the values act as parameters to the model.
        :
See also: three, angle, exponential, axilrod-teller, bcross, sw2, sw2jb, urey-bradley,
        : murrell-mottram, bcoscross, bacross, hydrogen-bond, equatorial, sw3jb, uff3,
        : lin3, 3coulomb.
@@sw3jb
Topic   : sw3jb
Type    : Option
Format  : sw3jb <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K theta0 rho1 rho2 Q <rmin12> rmax12 <rmin13> rmax13 <rmin23>
        : rmax23 <5*flags>
Units   : K in eV, theta in degrees, rho1 and rho2 in Angstroms, Q in a.u.
Use     : Jiang and Brown's variant of Stillinger-Weber's three-body potential with 
        : charge-dependent softening
        :
        : E(three) = K*F12*F13*exp(rho1/(r12-rmax12) + rho2/(r13-rmax13))(cos-ct0)**2
        :
        : where cos = cos(theta(jik)) and ct0 = cos(theta0)
        :
        : F12(q1,q2) = exp(1/Q)exp(1/(q1 + q2 - Q)) if q1+q2 < Q
        : F12(q1,q2) = 0                            if q1+q2 > Q
        : F13(q1,q3) = exp(1/Q)exp(1/(q1 + q3 - Q)) if q1+q3 < Q
        : F13(q1,q3) = 0                            if q1+q3 > Q
        :
        : See Chem. Eng. Sci., 49, 2991 (1994) for more details.
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. Note that unlike most potentials, the specification of the
        : cut-off distances is still required when using the "bond" sub-option
        : since the values act as parameters to the model.
        :
See also: three, angle, exponential, axilrod-teller, bcross, sw2, sw2jb, urey-bradley,
        : murrell-mottram, bcoscross, bacross, hydrogen-bond, equatorial, sw3, lin3,
        : uff3
@@bcoscross
Topic   : bcoscross
Type    : Option
Format  : bcoscross <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K b m n r1 r2 <rmin12> rmax12 <rmin13> rmax13 
        : <rmin23> rmax23 <4*flags>
Units   : K in eV/Angs**2, r1 and r2 in Angstroms, b, m and n are unitless.
Use     : Bond-bond cross term three body potential with cosine angle dependance:
        :
        : E(three) = K * (1 + b*cos(n.theta)**m) * (r12 - r1) * (r13 - r2)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2 and 1-3 are bonded.
        :
See also: three, angle, exponential, axilrod-teller, stillinger, urey-bradley,
        : murrell-mottram, bacross, bcross, hydrogen-bond, equatorial, lin3, uff3,
        : 3coulomb.
@@bcross
Topic   : bcross
Type    : Option
Format  : bcross <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K r1 r2 <rmin12> rmax12 <rmin13> rmax13 <rmin23> 
        : rmax23 <3*flags>
Units   : K in eV/Angs**2, r1 and r2 in Angstroms
Use     : Bond-bond cross term three body potential:
        :
        : E(three) = K * (r12 - r1) * (r13 - r2)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2 and 1-3 are bonded.
        :
See also: three, angle, exponential, axilrod-teller, stillinger, urey-bradley,
        : murrell-mottram, bacross, hydrogen-bond, equatorial, lin3, uff3, 3coulomb.
@@bacross
Topic   : bacross
Type    : Option
Format  : bacross <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K1 K2 r1 r2 theta0 <rmin12> rmax12 <rmin13> rmax13 
        : <rmin23> rmax23 <5*flags>
Units   : K1 and K2 in eV/(Angs*rad), r1 and r2 in Angstroms, theta0 in degrees
Use     : Bond-angle cross term three body potential
        :
        : E(three) = [K1*(r12 - r1) + K2*(r13 - r2)].(theta-theta0)
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2 and 1-3 are bonded.
        :
See also: three, angle, exponential, axilrod-teller, stillinger, urey-bradley,
        : murrell-mottram, bcross, hydrogen-bond, equatorial, lin3, uff3,
        : bacoscross, 3coulomb.
@@bacoscross
Topic   : bacoscross
Type    : Option
Format  : bacoscross <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K1 K2 r1 r2 theta0 <rmin12> rmax12 <rmin13> rmax13 
        : <rmin23> rmax23 <5*flags>
Units   : K1 and K2 in eV/(Angs*rad), r1 and r2 in Angstroms, theta0 in degrees
Use     : Bond-angle cosine cross term three body potential
        :
        : E(three) = [K1*(r12 - r1) + K2*(r13 - r2)].(cos(theta)-cos(theta0))
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species were 1-2 and 1-3 are bonded.
        :
See also: three, angle, exponential, axilrod-teller, stillinger, urey-bradley,
        : murrell-mottram, bcross, hydrogen-bond, equatorial, lin3, uff3, bacross,
        : 3coulomb.
@@urey-bradley
Topic   : urey-bradley
Type    : Option
Format  : urey-bradley <intra/inter> <bond> <nbeq/nbne nbond> <kcal/kjmol>
        : atom1 atom2 atom3 K r0 <rmin12> rmax12 <rmin13> rmax13 <rmin23> rmax23 <2*flags>
Units   : K in eV/Angs**2, r0 in Angstroms
Use     : Harmonic distance potential between atoms which are 1-3
        :
        : E(three) = 1/2 * K * (r - r0)**2
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species where 1-2 and 1-3 are bonded.
        :
See also: three, angle, exponential, axilrod-teller, stillinger, bcross, lin3,
        : murrell-mottram, bacross, hydrogen-bond, equatorial, uff3, 3coulomb.
@@3coulomb
Topic   : 3coulomb
Type    : Option
Format  : 3coulomb <intra/inter> <bond> <nbeq/nbne nbond> 
        : atom1 atom2 atom3 scale <rmin12> rmax12 <rmin13> rmax13 <rmin23> rmax23 
Units   : scale in fractional, distances in Angstroms
Use     : Coulomb subtraction between atoms that are connected by a three-body term:
        :
        : E(three) = - scale.q2.q3/r23
        :
        : where q2 and q3 are the charges of the atoms 2 and 3.
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species where 1-2 and 1-3 are bonded.
        :
See also: three, angle, exponential, axilrod-teller, stillinger, bcross, lin3,
        : urey-bradley, murrell-mottram, bacross, hydrogen-bond, equatorial,
        : uff3.
@@hydrogen-bond
Topic   : hydrogen-bond
Type    : Option
Format  : hydrogen-bond <intra/inter> <kcal/kjmol> <m> <n> <p> <taper> <dreiding>
        : atom1 atom2 atom3 A B <rmin12> rmax12 <rmin13> rmax13 <rmin23> rmax23 <2*flags>
        : or if taper is specified:
        : atom1 atom2 atom3 A B <theta_min theta_max> <rmin12> rmax12 <rmin13> rmax13 
        : <rmin23> rmax23 <2*flags>
Units   : A in eV*Ang**m, B in eV*Ang**n
Defaults: m = 12, n = 10, p = 4
Use     : Specifies a three-body hydrogen bond potential of form:
        : 
        : If theta > 90 degrees : 
        : 
        : E(three) = (A/(r**m) - B/(r**n))*(cos(theta))**p
        : 
        : If theta =< 90 degrees :
        : 
        : E(three) = 0.0
        : 
        : where r is the distance between atoms 2 and 3, and theta is the angle
        : between the 1-2 and 1-3 vectors.
        : 
        : If the dreiding sub-option is specified then the rule that the 
        : potential will only be applied when H is bonded to one of the following
        : donor atoms N, O, F, S, Cl, Br, I is used.
        : 
        : Note that theta_min and theta_max are only input if the "taper" sub-option
        : is specified.
See also: three, angle, exponential, axilrod-teller, stillinger, bcross,
        : urey-bradley, murrell-mottram, bacross, equatorial, lin3, uff3, 3coulomb.
@@rtol
Topic   : rtol
Type    : Option
Format  : rtol scale_factor
Units   : none
Default : 1.2
Use     : Bond length tolerance when deciding if two atoms are bonded.
        : Number multiplies the sum of the covalent radii.
@@title
Topic   : title
Type    : Option
Format  : a72
Default : none
Use     : Adds title lines to output
        : This option can now handle multiple title lines and they can be
        : input via either of the two following formats:
        : 
        : title N (where N=no of title lines)
        : <line 1>
        : <line 2>
        :    :  :
        : <line N>
        :
        :  OR
        :
        : title
        : <line 1>
        : <line 2>
        :    :  :
        : <line N>
        : end
        :
@@species
Topic   : species
Type    : Option
Format  : atomic_symbol <core/shell> charge <radius> <library symbol>
Default : charge and radius both equal to zero
Use     : Specify charges and radius by species and type, rather than for each 
        : ion separately. The library symbol is a symbolic name to be assigned
        : to this species for referencing libraries of interatomic potentials,
        : otherwise the atomic symbol will try to be used. See library for
        : more details.
        : NB: The species command will overwrite the charges of ions that 
        : are specified individually on the coordinate input line unless the
        : preserve_Q keyword is specified.
See also: library, preserve_Q
@@preserve_Q
Topic   : preserve_Q
Type    : Keyword
Use     : If charges are given in a library or via the species command these
        : can potentially overwrite charges input on the end of a coordinate
        : line. By specifying this keyword GULP preserves the state of the
        : charges from the coordinate input and prevents overwriting. Note
        : that if fitting of charges is specified or a method that generates
        : charges, such as eem or qeq, these options will still lead to the
        : charges being modified.
See also: species, library
@@polarisability
Topic   : polarisability
Type    : Option
Format  : polarisability
        : atom_symbol <core/shell> dipolar_polarisability
Units   : dipolar_polarisability in Angs**3
Default : Polarisability is equal to zero, except for shell contribution
Use     : Allows the inclusion of point ion polarisability in a calculation.
        : At the moment this is non-self consistent, i.e. induced moments on
        : different centres do not interact.
@@dump
Topic   : dump
Type    : Option
Format  : dump <every <n> noover> <channel> <cart> <connectivity> <filename a20>
Default : no dumpfile, n=1 if every is given
Use     : Generates dumpfile after fitting or optimisation.
        : File is created on fortran channel 12. To change, specify either
        : another channel number or a filename. If "every" is specified
        : then a dumpfile will be written after every n cycles of fitting
        : or optimisation. If "noover" is also specified then the dumpfile won't be 
        : overwritten every write, but labelled with a unique number.
        : If "connectivity" is specified then the connectivity list will be
        : written to the dump file. Note that this will only be done for the
        : current configuration.
        : NB: Although the filename can be anything you like it is proposed that
        : the conventional extension be .grs (.res was being used but this 
        : conflicts with other software).
@@harmonic
Topic   : harmonic
Type    : Option
Format  : harmonic <k3> <k4> <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <ener/grad> <scale14> <type_of_bond>
        : atom1 atom2 k2 <k3> <k4> r0 <coul> <rmin> rmax <2-4*flags>
Units   : k2 in eV*Angs**-2, r0 in Angs, coul in none, k3 in eV*Angs**-3
        : k4 in eV*Angs**-4
Use     : Harmonic potential - optimisation flags for fitting.
        : coul = 1.0 => Coulomb subtracted 
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = 1/2 K2*(r-r0)**2 + 1/6 K3*(r-r0)**3 + 1/24 K4*(r-r0)**4
        :     -coul*qi*qj/r
        :
        : k3 and k4 terms can be included as follows:
        :
        : harm k3
        : atom1 atom2 k2 k3 r0 <coul> <rmin> rmax <3*flags>
        :
        : harm k4
        : atom1 atom2 k2 k4 r0 <coul> <rmin> rmax <3*flags>
        :
        : harm k3 k4
        : atom1 atom2 k2 k3 k4 r0 <coul> <rmin> rmax <4*flags>
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
See also: spring, squaredharmonic, forceconstant
@@field
Topic   : field
Type    : Option
Format  : field magnitude <direction>
Units   : eV/(Ang.a.u.)
Use     : Applies an electric field to a system, usually in a non-periodic direction.
        : Consequently, this option should really only be used for molecules, polymers and
        : surfaces. The specification of the direction can either be given by the
        : relevant axis (z, for a surface; y or z for a polymer; x, y or z for a
        : molecule) or in the case of a 0-D system a general vector may be specified
        : as 3 numbers in Cartesian space. Examples of valid input lines are:
        :
        : Surface:
        : field 1.5 z
        :
        : Polymer:
        : field 1.5 y
        :
        : Molecule:
        : field 1.5 x
        :
        :   OR
        :
        : field 1.5  0.2 0.3 0.4
        :
        : If the direction is not specified then the default is to apply the 
        : field along the z axis.
        :
        : The possibility of applying an electric field within 3-D boundary
        : conditions is also allowed for, in which case the field direction
        : can also be set using a cell vector (a, b or c), as well as by a
        : fractional or Cartesian vector:
        :
        : field 1.5 b
        : 
        : field 1.5 0.2 0.3 0.4
        : 
        : field 1.5 cart 0.2 0.3 0.4
        :
        : NB Be very careful if you do use 3-D boundary conditions as there
        : are many things that can go wrong and the physical interpretation
        : is complex since the Ewald sum will counter any induced dipole. 
        : Unless you really know what you are doing, it is very strongly
        : suggested that you only apply an electric field in a non-periodic
        : direction. 
        :
        : NB: Symmetry will be automatically turned off if this option is used
        : for solids as the field will break the symmetry of the space group.
        :
        : Because the absolute energy is undefined, the energy relative to the
        : initial state is used during minimisations. Note also that only one
        : field can be defined per configuration.
        :
        : NB: You must fix at least one atom in the direction of field application 
        : otherwise the energy will head asymptotically for minus infinity!!!
        :
        : The units of the electric field are eV/Ang per unit charge in atomic units.
        : This means an ion of charge +1.0 will experience a force equal to the electric
        : field input.
        : 
        : NB: The use of an electric field is presently incompatible with the ReaxFF model
        : and analytic second derivatives for other variable charge models.
@@force_minimisation
Topic   : force_minimisation
Type    : Keyword
Use     : Causes an optimisation run to use the gradient norm as the quantity for minimisation
        : rather than the energy. Useful for situation where the absolute energy is not well
        : defined, such as systems under uniaxial stress. 
See also: anisotropic_pressure
@@forceconstant
Topic   : forceconstant
Type    : Option
Format  : forceconstant <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <type_of_bond>
        : atom1 atom2 kL kT <rmin> rmax <2*flag>
Units   : kL and kT in eV*Angs**-2
Use     : Force constant potential - includes the force constants between a pair
        : of atoms, known as the longitudinal (kL) and transverse (kT) force 
        : constants. This is useful for vibrational calculations, but note that
        : the energy and gradient are likely to be inconsistent.
        : NB: Don't use this potential in an optimisation since it will go
        : horribly wrong due to the above!
        : 
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        :
        : d2E/(da.db) = (kL - kT)*a.b/r^2 + delta_a.b*kT
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        : The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance.
        :
See also: harmonic
@@squaredharmonic
Topic   : squaredharmonic
Type    : Option
Format  : squaredharmonic <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <grad> <scale14> <type_of_bond>
        : atom1 atom2 k2 r0 <coul> <rmin> rmax <2*flags>
Units   : k2 in eV*Angs**-4, r0 in Angs, coul in none
Use     : GROMOS bonded potential - optimisation flags for fitting.
        : coul = 1.0 => Coulomb subtracted 
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = 1/4 K2*(r**2 - r0**2)**2 - coul*qi*qj/r
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        :
See also: spring, harmonic
@@cuts
Topic   : cuts
Type    : Option
Format  : cuts cutoff_distance <angs/au>
Units   : Angstrom (default) or au
Default : 0.6 Angstroms
Use     : Core-shell cutoff distance - should be set to be the same as the
        : maximum core-shell harmonic distance. If spring potential is used
        : then cutoff is set equal to cuts to avoid errors.
@@simultaneous
Topic   : simultaneous
Type    : Keyword
Default : no relaxation
Use     : Allows simultaneous relaxation of shells during fitting, 
        : including both position and radius.
See also: relax, fit, breathe, noflags
@@charge
Topic   : charge
Type    : Option
Format  : charge <number of charges to be varied>
        : list of labels whose charges are to be varied
Units   : none
Default : charges fixed
Use     : Allows charges to be varied during fitting. Charge neutrality of
        : the lattice is automatically maintained, or no change in the
        : total charge in the case of charged molecular systems.
        : This directive must be part of the variables section.
        : NB: DO NOT specify charges on the coordinate line for the atoms
        : that you wish to be influenced by this option since they will be
        : held fixed as they are NOT overwritten by the species option.
@@cv
Topic   : Cv (heat capacity)
Type    : Option within "observables"
Format  : Cv 
        : value <weight> <j/kmol>
Units   : eV/(Kmol) (default) or J/(Kmol)
Default : Heat capacity not to be fitted
Use     : Specifies the experimental heat capacity (Cv) for
        : fitting. Remember that it is important to set the
        : temperature for the structure otherwise the heat
        : capacity will be zero. Also you should ensure that
        : sufficient K points are sampled to give an accurate
        : value. Remember that the value should be per mole of
        : primitive unit cells, not just per mole when Z does
        : not equal 1.
See also: observables, entropy, elastic, sdlc, hfdlc, bulk, shear,
        : young, poisson, bornq and weight.
@@entropy
Topic   : entropy
Type    : Option within "observables"
Format  : entropy
        : value <weight> <j/Kmol>
Units   : eV/(Kmol) (default) or J/(Kmol)
Default : Entropy not to be fitted
Use     : Specifies the experimental vibrational entropy for
        : fitting. Remember that it is important to set the
        : temperature for the structure otherwise the entropy
        : will be zero. Also you should ensure that
        : sufficient K points are sampled to give an accurate
        : value. Remember that the value should be per mole of
        : primitive unit cells, not just per mole when Z does
        : not equal 1.
See also: observables, cv, elastic, sdlc, hfdlc, bulk, shear,
        : young, poisson, bornq and weight.
@@bulk_modulus
Topic   : bulk_modulus
Type    : Option
Format  : bulk_modulus <weight> 
Units   : GPa
Default : bulk modulus not to be fitted
Use     : Subsection of observables, used for specifying the experimental
        : bulk modulus for fitting. By default, the Reuss definition of
        : the bulk modulus is used. However, the Voigt and Hill definitions
        : can be used by specifying the appropriate keyword.
See also: observables, elastic, sdlc, hfdlc, shear_modulus, weight, bornq,
        : hill, voigt, young, poisson
@@shear_modulus
Topic   : shear_modulus
Type    : Option
Format  : shear_modulus <weight> 
Units   : GPa
Default : shear modulus not to be fitted
Use     : Subsection of observables, used for specifying the experimental
        : shear modulus for fitting. By default, the Reuss definition of
        : the bulk modulus is used. However, the Voigt and Hill definitions
        : can be used by specifying the appropriate keyword.
See also: observables, elastic, sdlc, hfdlc, bulk_modulus, srefractive,
        : hfrefractive, weight, bornq, hill, voigt, young, poisson
@@hill
Topic   : hill
Type    : Keyword
Default : Reuss convention for bulk/shear modulus
Use     : Specifies that the Hill convention is used for the bulk 
        : modulus. The Hill convention takes the average of the
        : Reuss and Voigt values.
See also: bulk_modulus, shear_modulus, elastic, fit, observables,
        : voigt, young, poisson
@@voigt
Topic   : voigt
Type    : Keyword
Default : Reuss convention for bulk/shear modulus
Use     : Specifies that the Voigt convention is used for the bulk 
        : modulus. The Voigt convention takes the average of the
        : elastic constants in the 1-3 x 1-3 block.
See also: bulk_modulus, shear_modulus, elastic, fit, observables, 
        : hill, young, poisson
@@elastic
Topic   : elastic
Type    : Option
Format  : elastic <n> <gpa>
        : i j elastic constant E(i,j) <weight> 
Units   : GPa
Default : no elastic constants to be fitted
Use     : Subsection of observables, used for specifying experimental
        : elastic constants for fitting.
        : Only give unique elastic constants. Units are
        : the same as THBREL and as output in GULP.
See also: piezoelectric, sdlc, hfdlc, srefractive, hfrefractive, weight, 
        : bornq, young, poisson
@@piezoelectric
Topic   : piezoelectric
Type    : Option
Format  : piezoelectric <n> <stress/strain>
        : i <x/y/z> piezoelectric constant p(i,alpha) <weight> 
Units   : C/m**2 for piezoelectric strain constants
        : 10**-9 C/N for piezoelectric stress constants
Default : no piezoelectric constants to be fitted - constants are strains
Use     : Subsection of observables, used for specifying values of
        : piezoelectric stress and strain constants for fitting.
        : Units are the same as output from the program and it is
        : only necessary to give unique piezoelectric constants.
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, bornq
        : young, poisson, shear, voight, bulk
@@youngs_modulus
Topic   : youngs_modulus
Type    : Option
Format  : youngs_modulus <n> 
        : <x/y/z> youngs_modulus <weight>
Units   : GPa
Default : no Youngs moduli to be fitted
Use     : Subsection of observables, used for specifying values of
        : Young's moduli for fitting.
Example : To fit a Young's modulus of 240.0 GPa in the x direction
        : with a weight of 1.0:
        :
        : young 1
        : x 240.0 1.0
        : 
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, bornq
        : piezoelectric, poisson, shear, voight, bulk
@@poisson_ratio
Topic   : poisson_ratio
Type    : Option
Format  : poisson_ratio <n> 
        : <xy/xz/yz> poissons_ratio <weight>
Units   : Dimensionless
Default : no Poissons ratios to be fitted 
Use     : Subsection of observables, used for specifying values of
        : Poisson's ratios for fitting.
Example : To fit a Poisson's ratio of 0.23 for the x-z component
        : with a weight of 0.01:
        :
        : poisson 1
        : xz 0.23 0.01
        :
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, bornq
        : piezoelectric, young, shear, voight, bulk
@@hfdlc
Topic   : hfdlc 
Type    : Option
Format  : hfdlc <n> 
        : i j dielectric constand hfe(i,j) <weight> 
Units   : none
Default : no high frequency dielectric constants to be fitted
Use     : Subsection of observables, used for specifying experimental
        : high frequency dielectric constants for fitting.
        : Only give unique high frequency dielectric constants.
See also: elastic, piezoelectric, sdlc, weight, srefractive, hfrefractive,
        : bornq, young, poisson, shear, voight, bulk
@@sdlc
Topic   : sdlc
Type    : Option
Format  : sdlc <n>
        : i j dielectric constant se(i,j) <weight> 
Units   : none
Default : no static dielectric constants to be fitted
Use     : Subsection of observables, used for specifying experimental
        : static dielectric constants for fitting.
        : Only give unique static dielectric constants.
See also: elastic, piezoelectric, hfdlc, weight, srefractive, hfrefractive,
        : bornq, young, poisson, shear, voight, bulk
@@bornq
Topic   : bornq
Type    : Option
Format  : bornq n
        : i <xx/yy/zz/xy/xz/yz> Zeff <weight> 
Units   : atomic units
Default : no Born effective charges to be fitted
Use     : Subsection of observables, used for specifying values of
        : Born effective charges for fitting. Note that i is the 
        : atom number in the unit cell, not the asymmetric unit, 
        : and the two letter code indicates the tensorial component
        : to be considered. Note: The Born effective charge tensor is
        : antisymmetric (i.e. Zxy = - Zyx )
        :
        : Example:
        :
        : bornq 1
        : 1 xx 1.95
        :
        : Here n (after bornq) represents the number of lines of input
        : to follow.
        :
        : Note: Born effective charges cannot currently be calculated
        : with electronegativity equalisation.
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : monopoleq, qreaxff, young, poisson
@@monopoleq
Topic   : monopoleq
Type    : Option
Format  : monopoleq <n>
        : i Qi <weight>
Units   : atomic units
Default : no monopole charges to be fitted
Use     : Subsection of observables, used for specifying values of
        : charges for fitting. Note that i is the 
        : atom number in the unit cell, not the asymmetric unit. 
        : 
        : Example:
        :
        : monopoleq 1
        : 1 1.95
        : 
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, qreaxff
@@qreaxff
Topic   : qreaxff
Type    : Option
Format  : qreaxff <n>
        : i Qi <weight>
Units   : atomic units
Default : no ReaxFF charges to be fitted
Use     : Subsection of observables, used for specifying values of
        : ReaxFF charges for fitting. Note that i is the
        : atom number in the unit cell, not the asymmetric unit.
        :
        : Example:
        :
        : qreaxff 1
        : 1 1.95
        :
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, monopoleq
@@fbond
Topic   : fbond
Type    : Option
Format  : fbond <n>
        : i j rij <weight>
Units   : Angstroms
Default : no bond lengths to be fitted
Use     : Subsection of observables, used for specifying values of
        : bond lengths for fitting. Here i and j are the atom numbers
        : whose bond is to be fitted and rij is the bond length. 
        : NB For periodic systems the nearest image is taken.
        :
        : Example:
        :
        : fbond 1
        : 1 2 0.96
        :
        : NB This option is intended for use with relax fitting.
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, monopoleq, qreaxff, fangle, relax, reaction
@@fangle
Topic   : fangle
Type    : Option
Format  : fangle <n>
        : i j k theta <weight>
Units   : Degrees
Default : no bond angles to be fitted
Use     : Subsection of observables, used for specifying values of
        : bond angles for fitting. Here i, j and k are the atom numbers
        : whose bond angle is to be fitted and theta is the angle. The
        : atom i is the pivot atom (i.e. the angle is j-i-k).
        : NB For periodic systems the nearest image is taken.
        :
        : Example:
        :
        : fangle 1
        : 1 2 3 109.54
        :
        : NB This option is intended for use with relax fitting.
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, monopoleq, qreaxff, fbond, relax, reaction
@@coordno
Topic   : coordno
Type    : Option
Format  : coordno <n>
        : i rcut cn <weight>
Units   : Angstroms for rcut
Default : no coordination numbers to be fitted
Use     : Subsection of observables, used for specifying values of
        : coordination numbers for fitting. Here i is the atom number
        : whose coordination number is to be fitted, rcut is the cutoff
        : distance for including neighbours in the coordination shell, 
        : and cn is the target value of the coordination number.
        :
        : Example:
        :
        : coordno 1
        : 3 2.4 6 1000.0
        :
        : NB This option is intended for use with relax fitting.
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, monopoleq, qreaxff, fbond, fangle, relax, reaction
@@sqomega
Topic   : sqomega
Type    : Option
Format  : sqomega filename.sqw <weight>
Units   : Arbitrary
Default : No S(Q,omega) data to be fitted
Use     : This option enables fitting of S(Q,omega) data. The S(Q,omega)
        : data is read from a .sqw file specified on this line.
        : The parameters that control the grid for S(Q,omega) are 
        : specified by the commands for scattering and must match those
        : present in the .sqw file.
        :
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, monopoleq, qreaxff, fbond, fangle, relax, reaction
@@reaction
Topic   : reaction
Type    : Option
Format  : reaction <n>
        : ncfg energy <weight> (icfg fcfg) x ncfg 
Units   : eV
Default : no reaction energies to be fitted
Use     : Subsection of observables, used for specifying reaction energies
        : in terms of configuration energies.
        : 
        : In the input line, ncfg is the number of configurations to be
        : used in the reaction (which must be less than or equal to the
        : number specified in the input so far), and then for each ncfg
        : case the configuration number and scale factor is given, followed
        ; by the target energy and optionally a weight.
        :
        : Example:
        :
        : If configuration 1 is H2O, configuration 2 is CO and configuration 
        : 3 is the 2H2O...CO complex whose heat of formation is -0.21 eV and
        : a weight of 10.0 is desired then the input for this would be like:
        :
        : reaction 1
        : 3 -0.21 10.0   1 -2.0  2 -1.0  3 1.0 
        :
        : i.e. The coefficients are negative for the left-hand side and positive
        : for the RHS.
See also: elastic, sdlc, hfdlc, weight, srefractive, hfrefractive, piezo
        : bornq, monopoleq, qreaxff, fbond, relax, reaction
@@weight
Topic   : weight
Type    : Option
Format  : weight <number of weights to be changed>
        : list of observables whose weights are to be changed
        : list of new weights in order
Units   : none
Default : 1.0
Use     : Subsection of observables, allows weighting factors to changed.
        : Number of weights = 0 causes default to be 
        : changed for subsequent observables.
See also: default_weight
@@default_weight
Topic   : default_weight
Type    : Option
Format  : default_weight <type> weight
        : where type is one of angle, bond, cell_length, cell_angle, coord, 
        : elastic, energy, dielectric, frac, freq, grad, modulus, stress
Units   : None
Use     : Changes the default weights for the structure or properties.
        : The following are the types of weights that can be changed and
        : their default values:
        :
        : angle       angle observable                             1.0
        : bond        bond length observable                       1.0
        : cell_length cell parameter weight in relax fit        1000.0
        : cell_angle  cell parameter weight in relax fit        1000.0
        : coord       Cartesian coordinate weight (0-2-D)       1000.0
        : elastic     elastic constant tensor component            0.01
        : energy      energy (absolute or reaction)                1.0
        : frac        fractional coordinate in relax fit (3-D) 10000.0
        : freq        vibrational frequency or phonon mode         1.0
        : grad        gradient in a conventional fit               1.0
        : modulus     bulk or Young's modulus                      1.0
        : stress      stress value in conventional fit             1.0
        :
See also: weight
@@property
Topic   : property
Type    : Keyword
Default : properties not calculated
Use     : Causes properties to be calculated and output.
See also: numerical
@@energy
Topic   : energy
Type    : Option
Format  : energy_of_configuration <ev/kcal/au/kjmol-1> <weight>
Default : energy in eV, weight = 1.0
Use     : Subsection of observables, assigns energy to successive
        : configurations for fitting. 
@@high-fq dielectric
Topic   : hfdlc
Type    : Option
Format  : hfdlc <n>
        : i j dielectric constant hfe(i,j) <weight>
Units   : none
Default : no dielectric constants to be fitted
Use     : Subsection of observables, used for specifying experimental
        : high frequency dielectric constants for fitting.
        : Only give unique high frequency dielectric constants.
See also: elastic, piezoelectric, sdlc, weight, srefractive, hfrefractive
@@static dielectric 
Topic   : sdlc
Type    : Option
Format  : sdlc <n>
        : i j dielectric constant se(i,j) <weight> 
Units   : none
Default : no static dielectric constants to be fitted
Use     : Subsection of observables, used for specifying experimental
        : static dielectric constants for fitting.
        : Only give unique static dielectric constants.
See also: elastic, piezoelectric, hfdlc, weight, srefractive, hfrefractive
@@polynomial
Topic   : polynomial
Type    : Option
Format  : polynomial <harmonic> <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : norder
        : atom1 atom2 (norder+1)*coeff <r0> rmin rmax <(norder+1)*flags>
        : order of coefficients = lowest to highest
Units   : eV and Angstroms
Default : r0 = 0
Use     : Polynomial potential, order = 1-8:
        :
        : E = c0 + c1*(r-r0) + c2*(r-r0)**2 + ... + cn*(r-r0)**n
        : 
        : If sub-option harmonic is specified, then the polynomial is premultiplied
        : by a harmonic term: 
        : 
        : E = (r - r0)**2 * (c0 + c1*r + c2*r**2 + ... + cn*r**n) for r < r0
        : 
        : E = 0 for r > r0
        : 
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
@@print
Topic   : print
Type    : Option
Format  : n = integer no.
Use     : Prints out current parameters during fitting whenever cycle number is
        : exactly divisable by n.
See also: dump <every>
@@split
Topic   : split
Type    : Option
Format  : split <number of species to be varied>
        : list of cores whose charges are to be varied
Units   : none
Default : charges fixed
Use     : Allows split of core-shell to be varied during fitting while 
        : maintaining the initial total charge.
        : This directive must be part of the variables section.
        : NB: DO NOT specify charges on the coordinate line for the atoms
        : that you wish to be influenced by this option since they will be
        : held fixed as they are NOT overwritten by the species option.
@@element
Topic   : element
Type    : Option
Format  : word
Default : data as in file eledata
Use     : Section for changes in element properties.
See also: symbol, mass, covalent, ionic, vdw
@@symbol
Topic   : symbol
Type    : Option
Format  : symbol at.no. <symbol(a2)>
Default : as per periodic table
Use     : Allows atomic symbols to be changed.
        : Command is part of element section.
@@mass
Topic   : mass
Type    : Option
Format  : mass symbol <mass>
Units   : atomic units
Default : as per periodic table
Use     : Allows atomic masses to be changed. Note that species symbols can
        : also be used for the mass to set different masses for different
        : species of the same element:
        :
        : element
        : mass O1 16.0
        : mass O2 17.0
        : end
        :
        : or the older form of using the atomic number can be used:
        :
        : element
        : mass 8 16.0
        : end
        :
        : Command is part of element section.
@@covalent
Topic   : covalent
Type    : Option
Format  : covalent at.no. <radius>
Units   : Angstroms
Default : standard literature value
Use     : Allows covalent radii to be changed.
        : Used in bond and molecule calculations.
        : Command is part of element section.
@@vdw
Topic   : vdw
Type    : Option
Format  : vdw at.no. <radius>
Units   : Angstroms
Default : standard literature value
Use     : Allows VDW radii to be changed.
        : Command is part of element section.
@@ionic
Topic   : ionic
Type    : Option
Format  : ionic at.no. <radius>
Units   : Angstroms
Default : value for most common oxidation state normally in octahedral 
        : environment
Use     : Allows ionic radii to be changed.
        : To be used in breathing shell model eventually.
        : Command is part of element section.
@@general
Topic   : general
Type    : Option
Format  : general <m> <n> <ener/grad> <intr/inte> <bon/x12/x13/mol/o14> <kcal/kjmol> <scale14> <type_of_bond>
        : atom1 atom2 A rho C <rmin> rmax <3*flags>
Units   : A in eV*Angs**m, rho in Angs, C in eV*Angs**n
Default : m=0 n=6
Use     : General potential - optimisation flags for fitting (0/1).
        : This potential is a combination of a Buckingham and Lennard-Jones.
        : On the first line, general may be followed by m and n, which
        : are the powers of r (12 6 => L-J potential). Rho=0.0 results in the
        : exponential term being removed. The words energy or gradient may be
        : given on the first line resulting in energy or gradient offsets being
        : applied such that the specified quantity goes to zero at the cutoff
        : distance. atom1 and atom2 may be specified either by atomic number or
        : symbol, which in the latter case can be followed by a species type.
        : If no species type is given then type is assumed to be core.
        :
        : E = A.exp(-r/rho)/r**m - C/r**n <-E(rmax) <+Grad correction term>>
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential, cutoffs are omitted from input.
        :
See also: c6
@@damped_dispersion
Topic   : damped_dispersion
Type    : Option
Format  : damped <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14>
        : atom1 atom2 C6 C8 C10 <b6> <b8> <b10> <rmin> rmax <6*flags>
Units   : C6 in eV*Angs**6, C8 in eV*Angs**8, C10 in eV*Angs**10
        : b6, b8 and b10 in Angs**-1
Default : C8=0, C10=0, b6=0, b8=0, b10=0
Use     : Specifies potential parameters for damped dispersion potential
        : form of Tang and Toennies (J. Chem. Phys. 80, 3726 (1984)).
        : If the coefficients b6 and b8 are zero then the potential is
        : undamped. The functional form is:
        :
        : E = -(C6/r**6)*f6(r) -(C8/r**8)*f8(r) -(C10/r**10)*f10(r)
        :
        : where f2n(r) is given by:
        :
        : f2n(r) = 1 - { sum(k=0->2n) [(b*r)**k]/k!} * exp(-b*r)
        :
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction.
        : When specified as bonded potential cutoffs are omitted from input.
        :
        : Note that this potential cannot yet be used with the c6 keyword.
See also: grimme_c6, becke_johnson_c6
@@grimme_c6
Topic   : grimme_c6
Type    : Option
Format  : grimme_c6 <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14>
        : atom1 atom2 C6 d r0 <rmin> rmax <3*flags>
Units   : C6 in eV*Angs**6, r0 in Angs, d is unitless
Default : s_6 = 1, d = 20
Use     : Specifies potential parameters for the Grimme form of damped C6 term
        : (J. Comput. Chem., 27, 1787 (2006)). The energy is of the form:
        :
        : E = - C6*fdmp(r)/r**6
        :
        : where the damping function, fdmp is given by:
        :
        : fdmp(r) = 1/[1 + exp(-d(r/r0 - 1))]
        :
        : NB: Here the s6 parameter of Grimme is subsumed into the C6 terms. 
        :
See also: damped_dispersion, becke_johnson_c6
@@becke_johnson_c6
Topic   : becke_johnson_c6
Type    : Option
Format  : becke_johnson_c6 <intra/inter> <bond/x12/x13/mol/o14> <kcal/kjmol> <scale14>
        : atom1 atom2 C6 r0 <rmin> rmax <2*flags>
Units   : C6 in eV*Angs**6, r0 in Angs
Default : None
Use     : Specifies potential parameters for the Becke-Johnson form of damped C6 term.
        : The energy is of the form:
        :
        : E = - C6/(r**6 + r0**6)
        :
See also: damped_dispersion, grimme_c6
@@molecule
Topic   : molecule
Type    : Keyword
Default : no molecules
Use     : Program locates molecules based on either an input connectivity or
        : by automatically locating bonds based on covalent radii and removes the
        : Coulombic interactions within the molecule. See "molq" if you wish
        : to retain the Coulomb terms. This option allows intra- and inter-
        : molecular potentials to be specified.
See also: molq, molmec, fix_molecule, rtol, nobond, inter, intra, both,
        : 14_scale, noautobond
@@inter
Topic   : inter
Type    : Option
Default : both
Use     : All subsequent potentials to be treated as
        : intermolecular when molecule option is active.
See also: molecule, molq, molmec, intra, both and 14_scale.
@@intra
Topic   : intra
Type    : Option
Default : both
Use     : All subsequent potentials to be treated as
        : intramolecular when molecule option is active.
See also: molecule, molq, molmec, inter, both and 14_scale.
@@constrain
Topic   : constrain
Type    : Option
Format  : For geometric or (non-)linear fit:
        : constrain <fit> <no._of_constraints>
        : nvari nfix coefficient <offset> <power>
        :
        : For geometric mean fit:
        : constrain <fit> <no._of_constraints>
        : nvari1 nvari2 mean nfix <coefficient>
Default : no constraints, <coefficient>=1.0
Use     : Allows geometrical variables within configuration to be
        : constrained to be equal to preserve symmetry. By also specifying
        : "fit" this allows the constraint of fitted parameters instead.
        : option within variables section.
        : nvari       = no. of variable(s) to allow to vary
        : nfix        = no. of variable to be constrained
        : coefficient = multiplier that relates values
        :               which is normally 1 or -1. 
        : offset      = additive shift between the coordinates
        : power       = power to which value is raised (1 for a linear case)
        : 
        : Geometric constraints:
        :
        : Variable numbers are coded as strains = 1-6, internal variable
        : n of atom i = 3*(i-1)+n+6, n=1,3 => x,y,z  and radius of atom
        : i = 6+3*nasym+i, where nasym = no. of atoms in asymmetric unit.
        : Now nvari and nfix can be entered as: 
        :   atom1 x/y/z atom2 x/y/z coefficient offset
        : e.g. 3 x 6 z 1.0 0.0
        : Radii can be entered as:
        :   atom1 r atom2 r coefficient offset
        : e.g. 3 r 6 r 1.0 0.2
        :
        : Additive use of geometric constraints is allowed so that an
        : atom may be fixed at the centroid of two other atoms. When
        : this is the case for 3-D systems, there is an ambiguity
        : due to the presence of periodic replications. GULP will
        : use the two nearest images for the constraints.
        :
        : Fitting constraints:
        :
        : Variable numbers refer to the number of the parameter as included
        : in the variables table, which in general is the same as the order
        : of specification in the input. If nvar1=nvar2 for geometric mean
        : constraints then the square root of just one parameter is taken.
        : Note that the variable numbers for the constraint command in
        : fitting may be changed in the restart file relative to those in
        : the input. This is to take account of the reordering of potentials.
        :
        : To input multiple constraints the number can be
        : added after the constraint command.
        :
        : Note: The ability to raise the variable to power is currently only
        : available for fitting constraint, though it shouldn't be needed
        : for geometric variables anyway.
        :
See also: outcon
@@outcon
Topic   : outcon
Type    : Keyword
Use     : By default any contraints generated by the program automatically
        : are not dumped to the restart file unless the user has also added
        : some constraints. This is to prevent errors when users use the
        : restart file, but with nosym specified. Specifying outcon on the
        : keyword line will cause the program to dump all constraints
        : regardless.
See also: constrain
@@output
Topic   : output
Type    : Option
Format  : output <filetype> <filename>
Default : no output files
Use     : Write files suitable for other programs.
        : Available filetypes are marvin, thbrel, xtl, xr, cssr, arc 
        : xyz, trajectory, history, fdf, drv, frc, cif, str, pressure
        : osc, phonon, pdf, qbo, cosmo, lammps_pots, dcd and cml :
        :
        : marvin - generates a file suitable for input to Marvin for
        : surface calculations. Index of surface plane needs to be 
        : added first, though this may be passed through GULP to the
        : marvin input but using the "marvin" option. If the file
        : extension ".mvn" is not given by the user it will be added
        : by the program.
        : e.g. output marvin alumina  produces  alumina.mvn
        : If a file for Marvin2 is required, then use the sub-option
        : marvin2 instead.
        : e.g. output marvin2 alumina
        :
        : thbrel - converts the final bulk structure into a file format
        : suitable for the THBREL suite of programs. Not all features
        : are readily transferable between the programs so no guarantee
        : is made that the input file is perfect and for similar reasons
        : both programs may not always yield the same results unless the
        : user is careful to make sure the files are equivalent. If a
        : phonon run has been requested then the output is modified for
        : THBPHON instead of THBREL.
        :
        : xtl - this is only applicable to crystal structures with a
        : single structure per file. Produces a .xtl file for input
        : into the BIOSYM software, though use of the archive file is
        : better unless symmetry is present. If the filename input is
        : not already terminated with ".xtl" then this will be added
        : by the program.
        : e.g. output xtl alumina   produces   alumina.xtl
        :
        : xr - this will output a modified CSSR file suitable for
        : input into the Oxford Materials graphical interface
        : program Crysalis. The file will have the extension ".xr"
        : added. At the moment this is only applicable to 3D
        : systems.
        : e.g. output xr alumina    produces   alumina.xr
        :
        : cssr - this will output a CSSR file suitable for input
        : into the MSI graphical interface Cerius2. The file will
        : have the extension ".cssr" added. At the moment this
        : is only applicable to 3D systems.
        : e.g. output cssr alumina  produces   alumina.cssr
        :
        : arc - alternatively known as a ".car" file. This option produces
        : archive files suitable for input into the BIOSYM Insight software
        : and will handle bulk, cluster and defect calculations, all with
        : multiple structures. The username should input a root name,
        : e.g. output arc alumina
        : The program will then produce archive file names with either 
        : "_3D", "_defe", or "_0D" appended to distinguish the files
        : resulting from a particular section of the run. If multiple
        : structures are present then an underscore followed by the 
        : structure number will be added, all followed by ".arc".
        : e.g. if the above input for alumina contained two bulk structures
        : then the files produced would be "alumina_bulk_1.arc" and
        : "alumina_bulk_2.arc".
        : If the word "movie" is specified then all structures during an
        : optimisation will be included in the arcfile, rather than just
        : the final one, so that the optimisation may be viewed.
        : e.g. output movie arc alumina
	: Note : for MD runs the name of the archive file is set by
	: "mdarchive" to avoid overwriting the optimisation archive
	: file if present. Also in the case of MD the file is only
        : written during the production phase.
        : It is also possible to specify a frequency for the output:
        : e.g. output movie 5 arc alumina
        : This would output an archive file frame every 5 steps during the
        : movie. The default is to output at every step.
        :
        : xyz - this will output an xyz file suitable for
        : input into programs such as Molden and with slight 
        : modification Unichem. The file will have the extension ".xyz"
        : At the moment this is only applicable to non-periodic 
        : systems. When called with a periodic case just the Cartesian
        : coordinates will be output, without the unit cell.
        : e.g. output xyz cluster    produces   cluster.xyz
        : If the word "movie" is specified then all structures during an
        : optimisation will be included in the xyz file, rather than just
        : the final one, so that the optimisation may be viewed.
        : e.g. output movie xyz cluster
        :
        : trajectory - this is a binary file which stores the coordinates
        : and velocities from a molecular dynamics run, as well as some
        : of the system properties. This file is used by the Cerius interface
        : to generate a .trj file for analysis in Cerius. Note that this
        : file is only written during the production phase by default.
        : e.g. output trajectory alumina
        : For this sub-option the further option "ascii" may be specified
        : in order to obtain an ASCII format trajectory file. Note that
        : this is less efficient for disk space usage!
        : e.g. output trajectory ascii alumina
        : Furthermore, the sub-option "equil" may be added to force writing
        : during the equilibration phase of the simulation.
        : The default extension for this file type is .trg
        :
        : history - this is a text file in the DLPOLY HISTORY file format
        : containing the structure and velocities sampled from a MD run.
        : This file can be used for post-MD analysis using the same
        : programs as for DLPOLY such as "After".
        :
        : fdf - this is a text file in the Flexible Data Format of Alberto
        : Garcia and Jose M. Soler. This file can then form the basis of
        : an input deck for the program SIESTA.
        :
        : drv - this is a text file containing the energy and appropriate
        : derivatives calculated by GULP at the last function evaluation.
        : This can be used for QM/MM schemes.
        :
        : frc - this is a text file containing the energy and appropriate
        : force constants for cores only calculated by GULP during a phonon
        : calculation. This can be used for QM/MM schemes, such as in the 
        : program QMPOT. A phonon calculation must be specified otherwise
        : no file will be output.
        :
        : cif - this is only applicable to crystal structures with a
        : single structure per file. Produces a .cif file for input
        : into a variety of programs. If the filename input is
        : not already terminated with ".cif" then this will be added
        : by the program. Note that at present the files are output
        : in P1 regardless of symmetry for simplicity.
        : e.g. output cif alumina   produces   alumina.cif
        :
        : str - this is a file in the CRYSTAL98 format, suitable for
        : reading by DLV. If the filename input is not already
        : terminated with ".str" then this will be added. If multiple
        : structures are specified then the filename will be modified
        : so that a separate file can be written for each structure.
        :
        : phonon -  this option leads to the density of states from a
        : phonon calculation and any dispersion curve points being
        : output to the files <filename>.dens and <filename>.disp,
        : respectively, in a format suitable for input into a curve
        : plotting program.
        :
        : frequency - this option produces a list of frequencies over all
        : k points for use in an analysis program. A typical application
        : might be in the calculation of the Gruneisen parameter by 
        : differencing of the frequencies with respect to the cell volume.
        : The file can either be output in binary format (to maintain
        : precision - the default):
        : e.g. output freq binary <filename>
        : or as ordinary text:
        : e.g. output freq text <filename>
        :
        : pressure - this option outputs a file containing the pressure
        : tensor during a molecular dynamics run, both instanteously and
        : as an average. File is output as <filename>.pre using units of
        : GPa.
        :
        : osc - this is a text file containing the oscillator strengths
        : for the phonon modes so that the frequency dependent data can 
        : be handled in post processing.
        :
        : pdf - this option sets the name for the .wid and .pdf files 
        : created by the pdf keyword. The .wid file can be suppressed by
        : the nowidth keyword.
        :
        : cosmo - this outputs a COSMO file in the Accelrys format for
        : visualisation of information relating to solvation an the 
        : solvent accessible surface
        :
        : lammps_pots - this outputs a LAMMPS file containing a tabulation
        : of any twobody potentials. There are 3 addition pieces of information
        : that can be provided which are the start of the range, r0, the end
        : of the range, rend, and the number of points, np.
        : e.g. output lammps_pots 0.1 9.0 1000 myfile
        : This would create a table from 0.1 to 9.0 Angstroms with 1000 points
        : and write it to a file called myfile.
        :
        : cml - this is a Chemical Markup Language output file which
        : contains all the important information about the calculation
        : in an XML format. This output is suitable for various database
        : tools and for data transfer between CML-enabled applications.
        :
        : qbo - this file contains the charges and bond orders, as appropriate,
        : for a potential model. 
        : e.g. output qbo myfile
        : The above command would produce a file myfile.qbo containing the
        : charges and bond orders for the final configuration. If the 
        : values for all structures are required then the sub-option "append"
        : can be used:
        : e.g. output qbo append myfile
        :
        : dcd - this file contains the coordinates from an MD trajectory and
        : can be used by programs such as VMD for analysis and visualisation.
        :
See also: marvin, dump
@@rspeed
Topic   : rspeed
Type    : Option
Format  : rspeed rspeed_value
Default : 1.0 
Use     : Relative speed for reciprocal and real space terms to be calculated.
        : Formulae for determining optimum eta value assume rspeed=1.0. However,
        : calculations can be speeded up by using larger values for small
        : systems (e.g. 2.0) or small values for large systems (0.25)
        : as reciprocal space calculation is generally faster. 
See also: noexclude, qwolf, ewaldrealradius, accuracy
@@ewaldrealradius
Topic   : ewaldrealradius
Type    : Option
Format  : ewaldrealradius value
Default : none
Use     : Normally the Ewald sum real and reciprocal space radii are chosen
        : automatically to minimise the number of terms, subject to the value
        : of the rspeed parameter. However, when using the spatial algorithm
        : it is advantageous to control the real space extent of the Ewald
        : sum to ensure that the system can be decomposed into sufficent regions.
        : The value specified fixes the real space cut-off and the reciprocal
        : space cut-off is calculated in order to achieve the target accuracy
        : given by the accuracy option.
See also: noexclude, qwolf, rspeed, accuracy
@@compare
Topic   : compare
Type    : Keyword
Default : no comparison
Use     : Causes a table comparing the initial and final structures to be printed 
        : out both for bulk and defects.
@@torsion
Topic   : torsion
Type    : Option / Keywrd
Format  : torsion <intra/inter> <bond> <esff> <dreiding> <kcal/kjmol> <type_of_bond>
        : atom1 atom2 atom3 atom4 k <+/->n <phi0> rmax(1-2) rmax(2-3)
        : rmax(3-4) rmax(4-1) <1 x flag>
        :
        : or if esff option is specified
        :
        : atom1 atom2 atom3 atom4 k1 k2 <+/->n rmax(1-2) rmax(2-3)
        : rmax(3-4) rmax(4-1) <2 x flags>
Eqn     : Normal :
        :
        :   E = k*(1+isign*cos(n*phi-phi0))
        :
        : ESFF :
        : 
        :   E = k1*(sin1**2)*(sin2**2)+isign*k2*(sin1**n)*(sin2**n)*cos(n*phi)
        : 
Units   : k/k1/k2 in eV, isign is +1 or -1 according to the sign of n,
        : rmax in Angstroms, phi0 in degrees
Default : if phi0 is not given it is assumed to be zero
Use     : Torsional potential about atoms 2 and 3. k is half the barrier
        : and nphase is the periodicity. The optional flag is for fitting of k.
        : If rmax(4-1) is input as zero then rmax(4-1) is set to infinity.
        : Note that when rmax(4-1) is not zero then atoms 1 and 4 cannot be
        : the same atom for a valid torsional term.
        : When used as a keyword, torsion causes a list of valid torsion terms
        : to be output before and after any optimisation/calculation.
        : See also Ryckaert for an alternative form of torsion potential.
        : four is an alternative valid name for this potential type.
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then no cutoffs are required as the potential
        : will act only when i-j, j-k and k-l are bonded.
        :
        : if the option esff is specified after torsion then the potential takes
        : the ESFF form. Here the potential becomes dependent on the two angles
        : involved in the torsional angle so that it smoothly goes to zero when
        : the torsional angle becomes indeterminate. Strictly the two coefficients
        : k1 and k2 should be related by :
        :
        : k1 = K / (sin10**2.sin20**2)  k2 = K / (sin10**n.sin20**n) 
        :
        : where sin10 and sin20 are the sines of the equilibrium values of angles
        : 1 and 2 respectively. Here they are just input as coefficients for
        : generality.
        :
        : If the sub-option dreiding is specified then the force constant is divided
        : by the number of torsional interactions for each central j-k pair to 
        : ensure a constant torsional barrier for the j-k bond.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: ryckaert, outofplane, torexp, tortaper, torangle, uff4
@@tortaper
Topic   : tortaper
Type    : Option
Format  : tortaper <bond/intra/inter> <kcal/kjmol> <esff> <dreiding> <type_of_bond>
        : atom1 atom2 atom3 atom4 k <+/->nphase <phi0> rtaper rmax(1-2) 
        : rmax(2-3) rmax(3-4) rmax(4-1) <1 x flags>
        :
        : or if esff option is specified
        :
        : atom1 atom2 atom3 atom4 k1 k2 <+/->nphase rtaper rmax(1-2) rmax(2-3)
        : rmax(3-4) rmax(4-1) <2 x flags>
Units   : k/k1/k2 in eV, isign is +1 or -1 according to the sign of nphase,
        : rtaper and rmax in Angstroms, phi0 in degrees
Default : if phi0 is not given it is assumed to be zero
Use     : Specifies a torsional potential with tapering of the cut-offs over rtaper of the form:
        :
        :   E = k*(1+isign*cos(nphase*phi-phi0))*f(r12)*f(r23)*f(r34)
        : 
        : ESFF :
        : 
        :   E = [k1*(sin1**2)*(sin2**2)+isign*k2*(sin1**n)*(sin2**n)*cos(n*phi)]
        :        *f(r12)*f(r23)*f(r34)
        :
        : where f(r) is a cosine tapering function.
        : If the sub-option dreiding is specified then the force constant is divided
        : by the number of torsional interactions for each central j-k pair to 
        : ensure a constant torsional barrier for the j-k bond.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, torharm, outofplane, torexp, torangle, uff4
@@torexp
Topic   : torexp
Type    : Option
Format  : torexp <bond/intra/inter> <kcal/kjmol> <esff> <dreiding> <type_of_bond>
        : atom1 atom2 atom3 atom4 k <+/->nphase <phi0> rho12 rho23 rho34 rmax(1-2) 
        : rmax(2-3) rmax(3-4) rmax(4-1) <4 x flags>
        :
        : or if esff option is specified
        :
        : atom1 atom2 atom3 atom4 k1 k2 <+/->nphase rho12 rho23 rho34 rmax(1-2) rmax(2-3)
        : rmax(3-4) rmax(4-1) <5 x flags>
Units   : k/k1/k2 in eV, isign is +1 or -1 according to the sign of nphase,
        : rho12/23/34 and rmax in Angstroms, phi0 in degrees
Default : if phi0 is not given it is assumed to be zero
Use     : Specifies an exponentially decaying torsional potential of the form:
        :
        :   E = k*(1+isign*cos(nphase*phi-phi0))*exp(-r12/rho12)*exp(-r23/rho23)*exp(-r34/rho34)
        : 
        : ESFF :
        : 
        :   E = [k1*(sin1**2)*(sin2**2)+isign*k2*(sin1**n)*(sin2**n)*cos(n*phi)]*
        :        *exp(-r12/rho12)*exp(-r23/rho23)*exp(-r34/rho34)
        :
        : If the sub-option dreiding is specified then the force constant is divided
        : by the number of torsional interactions for each central j-k pair to 
        : ensure a constant torsional barrier for the j-k bond.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, torharm, outofplane, torexp, uff4
@@torharm
Topic   : torharm
Type    : Option
Format  : torharm <intra/inter/bond> <kcal/kjmol> <dreiding> <type_of_bond>
        : atom1 atom2 atom3 atom4 K <phi0> rmax(1-2) rmax(2-3) rmax(3-4) <2 x flags>
Units   : K in eV/rad**2, phi0 in degrees
Default : none, phi0 = 0 if omitted
Use     : Specifies a harmonic torsional potential. Note that this is not a sensible
        : choice for a convenientional torsional potential, but is used by some
        : forcefields for an improper torsional angle. The form of the potential is:
        :
        : E = 1/2 K(phi - phi0)**2
        :
        : If the sub-option dreiding is specified then the force constant is divided
        : by the number of torsional interactions for each central j-k pair to
        : ensure a constant torsional barrier for the j-k bond.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, torangle, torexp, outofplane, uff4
@@uff4
Topic   : uff4
Type    : Option
Format  : uff4 <intra/inter/bond> <kcal/kjmol> <dreiding> <type_of_bond>
        : atom1 atom2 atom3 atom4 K n <phi0> rmax(1-2) rmax(2-3) rmax(3-4) rmax(4-1) <1 x flag>
Units   : K in eV, phi0 in degrees
Default : none, phi0 = 0 if omitted
Use     : Specifies a torsional potential of the UFF form: 
        :
        : E = 1/2 K*(1 - cos(n.phi0)*cos(n.phi))
        :
        : n is an integer and there is only a flag for K
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, torangle, torexp, outofplane, torharm
@@torangle
Topic   : torangle
Type    : Option
Format  : torangle <intra/bond> <kcal/kjmol> <dreiding> <type_of_bond>
        : atom1 atom2 atom3 atom4 K theta0 theta0' rmax(1-2) rmax(2-3) rmax(3-4) <3 x flags>
Units   : K in eV/rad**2, theta0 & theta0' in degrees
Default : none
Use     : Specifies a torsional - angle cross potential. The form of the potential is:
        : 
        : E = K.cos(phi).(theta - theta0).(theta' - theta0')
        : 
        : where theta is the angle between 1-2-3 & theta' is between 2-3-4 
        : 
        : If the sub-option dreiding is specified then the force constant is divided
        : by the number of torsional interactions for each central j-k pair to 
        : ensure a constant torsional barrier for the j-k bond.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, torharm, torexp, outofplane, uff4, torcosangle
@@torcosangle
Topic   : torcosangle
Type    : Option
Format  : torcosangle <intra/bond> <kcal/kjmol> <dreiding> <type_of_bond>
        : atom1 atom2 atom3 atom4 K theta0 theta0' rmax(1-2) rmax(2-3) rmax(3-4) <3 x flags>
Units   : K in eV/rad**2, theta0 & theta0' in degrees
Default : none
Use     : Specifies a torsional - cosine angle cross potential. The form of the potential is:
        :
        : E = K.cos(phi).(cos(theta) - cos(theta0)).(cos(theta') - cos(theta0'))
        :
        : where theta is the angle between 1-2-3 & theta' is between 2-3-4
        :
        : If the sub-option dreiding is specified then the force constant is divided
        : by the number of torsional interactions for each central j-k pair to
        : ensure a constant torsional barrier for the j-k bond.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        :
See also: torsion, torharm, torexp, outofplane, uff4, torangle
@@ryckaert
Topic   : ryckaert 
Type    : Option
Format  : ryckaert (or torsion ryck) norder <type_of_bond>
        : atom1 atom2 atom3 atom4 k0 rmax(1-2) rmax(2-3) rmax(3-4) rmax(1-4) <flags*n+1>
        : norder*coefficients
Units   : k0 in eV, rmax in Angstroms, coefficients in eV
Default : none
Use     : Torsional potential about atoms 2 and 3. Polynomial expansion in 
        : cos(phi) up to fifth order maximum. 
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the torsion will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, outofplane, torangle, torharm, torexp, uff4
@@inversion
Topic   : inversion 
Type    : Option
Format  : inversion <squared> <intra/inter/bond/mol> <only3> <kcal/kjmol> 
        : atom1 atom2 atom3 atom4 k <k0> rmax(1-2) rmax(1-3) rmax(1-4) <1 x flag>
Units   : k in eV, k0 in degrees
Default : none
Use     : Out of plane energy - energy penalty for atom 1 lying
        : out of the plane of atoms 2, 3 and 4. This form uses the
        : Dreiding planar expression:
        : 
        : E = k.(1 - cos(phi))
        : 
        : where phi is the angle between the plane of the centre atom and two
        : others with the bond from the centre atom to the third atom. 
        : Note that because phi depends on which of the 3 different angles is
        : chosen, GULP computes the contribution for all 3 cases and takes the
        : average.
        : If the sub-option "squared" is specified then the modified form given
        : below is used:
        : 
        : E = 1/2 (k/sin(k0)**2).(cos(phi) - cos(k0))**2
        : 
        : and k0 must be input.
        : If the only3 sub-option is specified then the potential applies where 
        : an atom has exactly 3 bonds present.
See also: torsion, ryckaert, torangle, torharm, torexp, xoutofplane, outofplane
@@outofplane
Topic   : outofplane
Type    : Option
Format  : outofplane <inter/intra> <bond> <only3> <kcal/kjmol>
        : atom1 atom2 atom3 atom4 k <k4> <rmin(1-2)> rmax(1-2) <rmin(1-3)> rmax(1-3) <rmin(1-4)> rmax(1-4) <1-2 x flag>
Units   : k in eV*Angs**-2, k4 in eV*Angs**-4
Default : rmin values = 0, k4 = 0
Use     : Out of plane energy - harmonic energy penalty for atom 1 lying
        : out of the plane of atoms 2, 3 and 4. Used for ring systems
        : which should be planar:
        : 
        :	E = k.d**2 + k4.d**4, where d=distance to the plane
        : 
        : If the only3 sub-option is specified then the potential applies where an atom has exactly
        : 3 bonds present.
See also: torsion, ryckaert, torangle, torharm, torexp, xoutofplane, inversion, xangleangle
@@xoutofplane
Topic   : xoutofplane
Type    : Option
Format  : xoutofplane <intra/inter/bond/mol> <kcal/kjmol> <type_of_bond>
        : atom1 atom2 atom3 atom4 atom5 atom6 k rmax(1-2) rmax(1-3) rmax(1-4) rmax(2-5) rmax(2-6) <1 x flag>
Units   : k in eV*Angs**-2
Default : none
Use     : Specifies an cross - out of plane potential of form:
        :
        : E = k.d1.d2
        :
        : where d1 is the out of plane distance of atom 1 from the plane of atoms 2/3/4
        : and d2 is the out of plane distance of atom 2 from the plane of atoms 1/5/6. This
        : functional form is used in the CVFF forcefield. This is a six-body potential.
        :
        : The type of bond sub-option can be used to control which bonded atoms the
        : potential applies to. If specified, the central bond of the six-body term will 
        : be checked for type before applying the potential. Valid type of bond
        : options are: single, double, triple, quadruple, resonant, amide. In
        : addition a bond may specified as regular (default), cyclic or exocyclic.
        : 
See also: torsion, ryckaert, torangle, torharm, torexp, outofplane, uffoop
@@xangleangle
Topic   : xangleangle
Type    : Option
Format  : xangleangle <inter/intra> <bond> <kcal/kjmol>
        : atom1 atom2 atom3 atom4 k(213/4) k(312/4) k(412/3) theta0(213) theta0(214) theta0(314) &
        :   rmax(1-2) rmax(1-3) rmax(1-4) <6 x flag>
Units   : All k in eV*rad**-2 and all theta0 in degrees
Default : none
Use     : Angle-angle cross potential for all angles about a central atom, atom 1: 
        : 
        :	E = k(213/4)*(theta(213) - theta0(213))*(theta(214) - theta0(214)) +
        :	    k(312/4)*(theta(312) - theta0(312))*(theta(314) - theta0(314)) +
        :	    k(412/3)*(theta(412) - theta0(412))*(theta(413) - theta0(413))
        : 
See also: torsion, ryckaert, torangle, torharm, torexp, xoutofplane, inversion, outofplane
        : uffoop, xcosangleangle
@@xcosangleangle
Topic   : xcosangleangle
Type    : Option
Format  : xcosangleangle <inter/intra> <bond> <kcal/kjmol>
        : atom1 atom2 atom3 atom4 k(213/4) k(312/4) k(412/3) theta0(213) theta0(214) theta0(314) &
        :   rmax(1-2) rmax(1-3) rmax(1-4) <6 x flag>
Units   : All k in eV and all theta0 in degrees
Default : none
Use     : Angle cosine - angle cosine cross potential for all angles about a central atom, atom 1: 
        : 
        :	E = k(213/4)*(cos(theta(213)) - cos(theta0(213)))*(cos(theta(214)) - cos(theta0(214))) +
        :	    k(312/4)*(cos(theta(312)) - cos(theta0(312)))*(cos(theta(314)) - cos(theta0(314))) +
        :	    k(412/3)*(cos(theta(412)) - cos(theta0(412)))*(cos(theta(413)) - cos(theta0(413)))
        : 
See also: torsion, ryckaert, torangle, torharm, torexp, xoutofplane, inversion, outofplane
        : uffoop, xangleangle
@@uffoop
Topic   : uffoop
Type    : Option
Format  : uffoop <intra/inter/bond/mol> <only3> <kcal/kjmol>
        : atom1 atom2 atom3 atom4 k C0 C1 C2 rmax(1-2) rmax(1-3) rmax(1-4) <4 x flags>
Units   : k in eV, C0, C1, C2 are unitless
Default : none
Use     : Out of plane energy - energy penalty for atom 1 lying
        : out of the plane of atoms 2, 3 and 4. This form uses the
        : Universal Force Field expression:
        :
        : E = k.(C0 + C1*cos(phi) + C2*cos(2*phi))
        :
        : where phi is the angle between the plane of the centre atom and two
        : others with the bond from the centre atom to the third atom.
        : Note that because phi depends on which of the 3 different angles is
        : chosen, GULP computes the contribution for all 3 cases and takes the
        : average.
        : If the only3 sub-option is specified then the potential applies where 
        : an atom has exactly 3 bonds present.
See also: torsion, ryckaert, torangle, torharm, torexp, xoutofplane, inversion, outofplane
@@update
Topic   : update
Type    : Option
Format  : integer number
Default : 10
Use     : Changes the maximum number of cycles of Hessian updating before exact
        : calculation is performed. Number may appear on same line as command 
        : or the following line.
@@line
Topic   : line
Type    : Option
Format  : integer number
Default : 10
Use     : Changes the maximum number of points in the line minimisation.
        : Number may appear on same line as command or the following line.
@@unit
Topic   : unit
Type    : Keyword
Use     : Use unit diagonal matrix as starting point for Hessian.
        : Can be useful when exact Hessian is ill-conditioned.
See also: numdiag, dfp, positive, conjugate, lbfgs
@@lbfgs
Topic   : lbfgs
Type    : Keyword
Use     : Use limited memory BFGS for optimisation. This is useful where
        : a system is too large to allow the storage of the full Hessian
        : matrix and so a limited part of it is stored instead. The size
        : of the memory used depends on the value of lbfgs_order which
        : is set as an option.
See also: numdiag, dfp, positive, conjugate, unit, lbfgs_order
@@lbfgs_order
Topic   : lbfgs_order
Type    : Option
Format  : lbfgs_order <integer_value>
Units   : None
Default : 10
Use     : Specifies the order of the limited memory BFGS algorithm. The
        : larger the value the more memory will be used, but the more
        : rapid the convergence will be. Designed for use with large
        : systems where the full Hessian cannot be stored.
See also: numdiag, dfp, positive, conjugate, unit, lbfgs
@@numdiag
Topic   : numdiag
Type    : Keyword
Use     : Use numerical estimates of the diagonal elements as a starting point
        : for the Hessian. Can be useful when exact Hessian is ill-conditioned.
See also: unit, dfp, positive, conjugate, lbfgs
@@dfp
Topic   : dfp
Type    : Keyword
Use     : Use the Davidon-Fletcher-Powell updating formula instead of BFGS.
See also: unit, numdiag, positive, conjugate, lbfgs
@@positive
Topic   : positive
Type    : Keyword
Use     : Ensure that the Hessian always behaves as positive definite during
        : Newton-Raphson by ensuring the search vector has the same sign as
        : as the gradient vector.
See also: unit, numdiag, dfp, conjugate, lbfgs
@@conjugate
Topic   : conjugate
Type    : Keyword
Use     : Use conjugate gradients to optimise geometry, instead of second
        : derivative based methods.
See also: dfp, numdiag, unit, positive, lbfgs

and

Topic   : conjugate
Type    : Option
Format  : conjugate n
Default : never
Use     : Part of genetic section. After n iterations the odd top 5
        : configurations are minimised locally using a method of conjugate
        : gradients.
@@hessian
Topic   : hessian
Type    : Keyword
Use     : Causes details of the Hessian matrix to be output. For calculations
        : employing the RFO method then the eigenvalues, eigenvectors and the
        : gradients transformed into the local modes are output for every cycle.
        : For Newton-Raphson calculations, the inverse Hessian is output after
        : each exact recalculation, but not after updating.
@@spring
Topic   : spring
Type    : Option
Format  : spring <kcal/kjmol>
        : atom1 k2 <k4> <flags>
Eqn     : E = (1/2)*k2*r**2 + (1/24)*k4*r**4
Units   : k2 in eV/Angs*2, k4 in eV/Angs**4 
Default : k4 = 0.0
Use     : Core-shell spring potential - optimisation flags for fitting.
        : Spring potential does not need cutoffs as the maximum is set by cuts
        : and the minimum is zero.
        : Only atom1 needs to be specified as this potential is specifically
        : for core shell pairs. Atom1 can be given either by atomic number 
        : or symbol which in the latter case can be followed by a species 
        : type. If no species type is given then type is assumed to be core.
See also: cosh-spring
@@cosh-spring
Topic   : cosh-spring
Type    : Option
Format  : cosh-spring <kcal/kjmol>
        : atom1 k2 d <2 x flags>
Eqn     : E = k2*d**2*(cosh(r/d) - 1)
Units   : k2 in eV/Angs*2, d in Angs
Default : None
Use     : Core-shell spring potential with cosh functional form.
        : Cosh-spring potential does not need cutoffs as the maximum is set by cuts
        : and the minimum is zero.
        : Only atom1 needs to be specified as this potential is specifically
        : for core shell pairs. Atom1 can be given either by atomic number 
        : or symbol which in the latter case can be followed by a species 
        : type. If no species type is given then type is assumed to be core.
See also: spring
@@coulomb
Topic   : coulomb
Type    : Option
Format  : coulomb <intra/inter> <bond/x12/x13/o14> <scale14>
        : atom1 atom2 <scale> <rmin> rmax <flag>
Units   : rmin and rmax in Angs, scale in fractional
Default : scale = 1.0
Use     : Coulomb subtraction potential only
        : Coulomb potential does not need Coulomb offset
        : when acting as a core-shell spring, see cuts
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If 
        : no species type is given then type is assumed to be core.
        :
        : E = - scale*qi.qj/rij
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction - this can also be achieved through the command molmec.
        : o14 => only act between atoms which are 1-4, i.e. separated by
        : 3 bonds
        : When specified as bonded potential cutoffs are omitted from input.
        :
See also: molmec, 3coulomb
@@gcoulomb
Topic   : gcoulomb
Type    : Option
Format  : gcoulomb <intra/inter> <bond/x12/x13/o14> <scale14>
        : atom1 atom2 A gamma <rmin> rmax <flag>
Units   : A in a.u., gamma in Ang**3, distances in Angstroms
Default : rmin = 0.0
Use     : Coulomb subtraction potential of ReaxFF form with gamma. This
        : potential is useful when mixing fixed charges in a ReaxFF calculation
        : with a molecular mechanics force field between the fixed charges
        : since it allows the ReaxFF charge term to be removed.
        :
        : E = - A/(rij**3 + gamma)**(1/3)
        :
        : Here the term gamma represents 1/(gammai*gammaj)**3 where the gammai
        : and gammaj are terms from the ReaxFF force field. The A term is the
        : product of the two charges, A = q1*q2, in atomic units. The whole 
        : term is then converted internally from units of e2/Ang to eV.
        :
        : atom1 and atom2 may be specified either by atomic number or symbol
        : which in the latter case can be followed by a species type. If
        : no species type is given then type is assumed to be core.
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given then potential will only act between bonded
        : atoms. x12 => exclude 1-2 interaction and x13 => exclude 1-2 and 1-3
        : interaction - this can also be achieved through the command molmec.
        : o14 => only act between atoms which are 1-4, i.e. separated by
        : 3 bonds
        : When specified as bonded potential cutoffs are omitted from input.
        :
See also: molmec, g3coulomb
@@g3coulomb
Topic   : g3coulomb
Type    : Option
Format  : g3coulomb <intra/inter> <bond> <nbeq/nbne nbond>
        : atom1 atom2 atom3 A gamma <rmin12> rmax12 <rmin13> rmax13 <rmin23> rmax23 &
        :   <2 x flags>
Units   : A in a.u., gamma in Ang**3, distances in Angstroms
Default : rmin12 = rmin13 = rmin23 = 0.0
Use     : Coulomb subtraction between atoms that are connected by a three-body term:
        :
        : E(three) = - A/(rij**3 + gamma)**(1/3)
        :
        : This potential is useful when subtracting the Coulomb term used in 
        : ReaxFF between fixed charges in order to mix a molecular mechanics
        : force field with this form of reactive model.
        : Here the term gamma represents 1/(gammai*gammaj)**3 where the gammai
        : and gammaj are terms from the ReaxFF force field. The A term is the
        : product of the two charges, A = q1*q2, in atomic units. The whole 
        : term is then converted internally from units of e2/Ang to eV.
        :
        : intra/inter can also be specified for molecular calculations, as can
        : bond. If bond is given no cutoff is required as the potential will
        : only act between species where 1-2 and 1-3 are bonded.
        :
See also: gcoulomb, 3coulomb
@@delf
Topic   : delf
Type    : Option
Format  : delf energy_change
Units   : eV
Default : none
Use     : Maximum change per step of minimisation of the function before
        : Hessian is recalculated.
@@marvin
Topic   : marvin
Type    : Option
Use     : Allows a section of text to be inserted into a marvin input file
        : by surrounding text by "marvin" before the first line and "end"
        : after the last line.
See also: output
@@nosderv
Topic   : nosderv
Type    : Keyword
Use     : Stops the use of symmetry in calculating the first derivatives, but
        : not the energy during line searches. This causes the program to 
        : revert to behaving like GULP0.4 and earlier versions. The user should
        : never need to use this option as it will slow down the code and is
        : only useful for algorithm checking purposes.
@@nobond
Topic   : nobond
Type    : Option
Format  : nobond species1 species2
Use     : Excludes bond formation between two species during molecule search.
See also: molecule, molq, molmec, bond and connect
@@connect
Topic   : connect
Type    : Option
Format  : connect atom1 atom2 <type_of_bond> <imageX> <imageY> <imageZ>
Default : If imageX, imageY, imageZ are not specified then take the nearest
        : image.
Use     : Forces a bond to be formed between atom1 and atom2 where atom1 and
        : atom2 are the numbers of atoms in the full unit cell. Requires one
        : of the molecule keywords to be included to have any affect. The
        : parameters imageX, imageY and imageZ specify which translational
        : image of atom 2 should be used. Valid values are usually -1, 0, 1, 
        : where 0 means the image in the central cell, -1 means the image in 
        : the negative direction and +1 in the positive one.
        :
        : e.g.
        : connect 1 2 1 0 -1
        : 
        : Optionally, the type of bond can be specified and this information
        : can be used in applying the correct force field terms where applicable.
        : Valid bond types are: single, double, triple, quadruple, resonant, 
        : amide, cyclic and exocyclic. For example, an exocyclic double bond
        : can be specified as:
        : 
        : connect 1 2 double exocyclic 1 0 -1
        : 
        : If not specified, the bonds are assumed to be single bonds.
        : 
        : NB: For the connect information to be used one of the molecule 
        : keywords must be specified.
See also: molecule, molq, molmec, nobond, bond, noautobond
@@start
Topic   : start
Type    : Option
Use     : Causes program to skip the rest of the input file and begin execution.
@@stop
Topic   : stop
Type    : Option
Use     : Causes program to stop execution at that point in the input file. Use
        : is mainly for locating problems in input files.
@@molq
Topic   : molq
Type    : Keyword
Default : no molecules
Use     : Program locates molecules based on either an input connectivity or
        : by automatically locating bonds based on covalent radii, but retains the
        : Coulombic interactions within the molecule. See "molecule" if you wish
        : to remove the Coulomb terms. This option allows intra- and inter-
        : molecular potentials to be specified. Works for isolated molecules
        : and 1, 2 and 3-D periodic molecules provided repeat directions 
        : lie parallel to crystallographic axes, where appropriate.
See also: molecule, molmec, rtol, fix_molecule, nobond, inter, intra, both
        : 14_scale, noautobond
@@molmec
Topic   : molmec
Type    : Keyword
Default : no molecules
Use     : Program locates molecules based on either an input connectivity or
        : by automatically locating bonds based on covalent radii and subtracts 
        : Coulomb terms between bonded atoms and between atoms bonded to
        : a common third atom. This option is needed when using molecular
        : mechanics potentials, such as in the CVFF forcefield. Works for
        : isolated molecules and 1,2 and 3-D periodic molecules provided
        : repeat directions lie parallel to crystallographic axes, where
        : appropriate.
See also: molq, molecule, rtol, fix_molecule, nobond, inter, intra, both
        : 14_scale, noautobond
@@noautobond
Topic   : noautobond
Type    : Keyword
Default : Automatically locate bonds in molecules based on covalent radii
Use     : Specifies that GULP should not try to automatically locate bonds
        : based on the sum of covalent radii. Bonds are then completely
        : controlled by the "connectivity" option.
See also: molecule, molq, rtol, fix_molecule, nobond, inter, intra, both,
        : 14_scale, molmec
@@14_scale
Topic   : 14_scale
Type    : Information
Info    : Many organic forcefields require the scaling of 1-4 two body
        : interactions. Typically a factor of a 1/2 is used. This can
        : be achieved in GULP. Nearly all two-body potentials allow a
        : scale factor to be specified on the same line as the potential
        : option word which has this effect. Similarly Coulomb interactions
        : can be scaled by using the Coulomb subtract potential which
        : already has a coefficient and can be specified to act only for
        : 1-4 interactions.
@@relax
Topic   : relax
Type    : Keyword
Default : no relaxation during fitting
Use     : Invokes fitting to structural displacements on relaxation rather than
        : to the derivatives. This also means any observables are fitted at the
        : optimised rather than experimental structure. There is no need to give
        : "simul" as an option if relax fitting. This method should only be used
        : once a reasonable set of potentials have been obtained by conventional
        : fitting, otherwise the optimisations may fail. It is also an order of
        : magnitude more expensive in cputime!
See also: fit, simultaneous
@@supercell
Topic   : supercell
Type    : Option
Format  : supercell (ncells in x) (ncells in y) (ncells in z)
Default : 1 1 1 (i.e. no supercell)
Use     : Expands the input unit cell by the three factors given to create a
        : supercell. This implies that symmetry is removed from the structure
        : at the moment.
@@phonon
Topic   : phonon
Type    : Keyword
Use     : Causes the phonon frequencies to be calculated for each structure
        : with k points specified at the end of each run. If no k points are
        : explicitly given the phonons are calculated at the gamma point.
        : Note: For materials with charges it is important to consider the
        : effect of the LO/TO splitting.
See also: kpoints, dispersion, shrink, eigenvectors, lower_symmetry,
        : project_dos, output, nozeropt, gamma_direction_of_approach, omega,
        : dynamical_matrix, meanke, frequencies
@@dynamical_matrix
Topic   : dynamical_matrix
Type    : Keyword
Use     : Causes GULP to output the dynamical matrix from a phonon calculation.
See also: phonon
@@eigenvectors
Topic   : eigenvectors
Type    : Keyword
Use     : Generate eigenvectors as well as eigenvalues during a phonon
        : calculation. This option is automatically implied when projected
        : phonon densities of states are required. The maximum
        : number of atoms is reduced by 7/10 when generating eigenvectors.
        : Both real and imaginary components of the eigenvectors are 
        : output, but remember that when two or more frequencies are
        : degenerate there are an infinite number of possible vectors
        : that can be created by taking linear combinations.
        : All eigenvectors output are orthonormal.
See also: phonon, lower symmetry, project_dos and intensity.
@@lower_symmetry
Topic   : lower_symmetry
Type    : Keyword
Use     : Use imaginary phonon modes to lower the symmetry of a structure.
        : This is particularly useful when an optimised structure has
        : imaginary frequencies and help is needed as to how to distort the
        : geometry to obtain the true minimum. This keyword requires a
        : phonon run to be performed and the keyword "eigenvectors" is
        : implicit.
See also: phonon, eigenvectors, slower
@@meanke
Topic   : meanke
Type    : Keyword
Use     : Requests that GULP prints out a decomposition of the mean kinetic
        : energy of vibration projected onto each lattice site. Note that
        : this keyword requires that a phonon calculation be specified and
        : that the temperature is non-zero. Furthermore, this will only 
        : currently work for a single temperature rather than a temperature
        : range. 
See also: phonon, eigenvector
@@slower
Topic   : slower
Type    : Option
Format  : slower <value>
Units   : None
Default : 0.001
Use     : This is the scale factor by which the eigenvectors will be
        : multiplied when attempting to lower the symmetry along an
        : imaginary mode direction.
See also: lower_symmetry
@@intensity
Topic   : intensity
Type    : Information
Info    : Infra-red phonon intensities are output when the eigenvectors
        : have been calculated using "eigen". Intensities are in nominal
        : units of charge**2. Raman intensities are also now output.
        : However, it should be noted that they are approximate and only
        : valid for systems with a single type of bond in (such as a
        : silicate).
@@project_dos
Topic   : project_dos
Type    : Option
Format  : project_dos <n>
        : For each <n> there should be a line listing the atoms in the
        : asymmetric unit onto which to project the density of states, or
        : alternatively atomic symbols and types may be given.
Use     : Projects the phonon density of states onto given sets of atoms.
        : Note that this requires the explicit calculation of the eigenvectors
        : for each k point. Atoms for projection must be cores and not
        : shells as the shells have no component in the DOS. Projections
        : will also be output to the .dens file if requested.
        :
        : Examples:
        :
        : To project on to atoms 4, 7 and 10:
        :
        : project_dos 1
        : 4 7 10
        :
        : To project on to all species C1 and O3: 
        :
        : project_dos 1
        : C1 O3
        :
See also: phonon, eigenvectors, output
@@kpoints
Topic   : kpoints <no. of k points, default=1>
Type    : Option
Format  : x y z <weight>
Units   : x,y,z are fractions of reciprocal lattice vectors
Default : weight=1.0
Use     : Specifies the k points to be used in the phonon calculation / free
        : energy calculation explicitly.
See also: phonon, dispersion, shrink, kfull
@@nokpoints
Topic   : nokpoints
Type    : Keyword
Use     : Prevents output of list of k points for each configuration.
@@dispersion
Topic   : dispersion
Type    : Option
Format  : dispersion <no. of lines, default=1> <no. of k points per line>
        : x1 y1 z1 to x2 y2 z2 <to x3 y3 z3 .....>
Units   : x, y and z are fractions of reciprocal lattice vectors
Default : none
Use     : Specifies the start and end points of lines through k space
        : along which the phonon dispersion will be calculated.
        : 
        : Examples:
        :
        : dispersion 2 20
        : 0.0 0.0 0.0 to 0.5 0.5 0.5 to 0.5 0.0 0.0
        : 0.5 0.0 0.0 to 0.5 0.5 0.0
        :
        : This would produce two plots, the first containing two parts
        : and the second only one. Both plots would contain a total of
        : 20 k points.
        :
See also: phonon, shrink, kpoints, box, kfull
@@kfull
Topic   : kfull
Type    : Keyword
Use     : When the unit cell is centred, the K points specified are taken
        : as being for the primitive cell by default. When this keyword
        : is specified, the K points given by the kpoints and dispersion
        : options are taken to be for the full centred cell instead. Note
        : the calculation is still performed using the primitive cell, but
        : at the points in reciprocal space that relate to the full cell.
See also: kpoints, dispersion
@@shrink
Topic   : shrink 
Type    : Option
Format  : shrink ix <iy> <iz>
Units   : ix, iy and iz are dimensionless integers
Default : 1 1 1
Use     : Specifies the shrinking factors in reciprocal space. The higher the
        : shrinking factor the more extensively k space is sampled. One value
        : may be given, in which case the shrinking factor is used isotropically
        : or three anisotropic values can be given. 
        : In theory an isotropic shrinking factor n will generate n**3 k points.
        : However, GULP by default uses some of the symmetry of the Patterson
        : group to reduce this number. This can be turned off using "noksym".
        : Remember that if anisotropic values are given that do not conform 
        : to the symmetry of the unit cell then the symmetry adapted sampling 
        : will give slightly different results to the P -1 sampling - beware!
        : N.B. If phonon properties are required the user must make sure that
        : convergence has been achieved with respect to the number of k points.
See also: phonon, dispersion, kpoints, noksym
@@box
Topic   : box
Type    : Option
Format  : box <dispersion/density> <size/number> value
Units   : size in cm-1
Default : number for dispersion = 25
        : number for density    = 64
Use     : Allows the user to change the box size or number of boxes used for
        : outputting the phonon density of states or/and phonon dispersion
        : curves.
See also: phonon, dispersion, shrink
@@origin
Topic   : origin
Type    : Option
Format  : origin 1/2 or x y z or ix iy iz
Units   : none
Default : origin 1
Use     : Allows the space group origin to be changed, either by selecting the
        : second setting in international tables by giving 2 on it's own, or
        : specifying the desired origin shift either as three fractional
        : coordinates or as three integers which represent 24 times the shift
        : - e.g. a shift of 1/3 1/3 2/3 would be 8 8 16 thus avoiding precision
        : problems with recurring decimals.
@@nofrequency
Topic   : nofrequency
Type    : Keyword
Use     : Causes the frequencies not to be output after a phonon calculation.
        : This is useful when calculating phonon dispersion curves which can
        : involve large numbers of k points and frequencies.
See also: kpoints, dispersion, shrink, phonon
@@temperature
Topic   : temperature
Type    : Option
Format  : temperature value_of_temperature <C/F/K> <step> <no. of steps> <step0>
Units   : Kelvin (or Centigrade if C added, or Fahrenheit if F added)
Default : 0 K, no steps (for phonons) 100 K for simulated annealing.
Use     : Specifies temperature of a structure for use in the calculation of
        : phonon properties, such as the entropy, free energy and heat capacity.
        : Also specifies the temperature for molecular dynamics and Monte Carlo
        : runs, including annealing.
        :
        : Temperature can optionally be followed by an increment, a number of steps,
        : (and a first step for MD). 
        :
        : Phonons 
        :
        : If a range is given, then the phonon properties will be calculated at each
        : temperature value over the range. Note that if present during a free energy
        : calculation this will result in the last temperature being used for the
        : run. For CPU time reasons a range should not be used during a free energy
        : minimisation.
        :
        : Molecular dynamics / Monte Carlo
        :
        : Here the option is used to set the temperature of the run or the schedule
        : of temperatures for an anneal. For example, if the initial temperature is
        : to be 298 K for the first 300 steps and then is to increase to 398 K over
        : a 1000 steps, the input would look like:
        :
        : temperature 298 0.1 1000 300
        :
See also: phonon, free, predict, anneal, ftol, factor and ttol.
@@pressure
Topic   : pressure
Type    : Option
Format  : pressure value_of_pressure <GPa/kPa/Pa/atm/Nm-2/kbar>
Units   : Gigapascals, kilopascals, pascals, atmospheres, kbar (Default = GPa)
Default : 0 GPa
Use     : Specifies pressure to be applied to structure. Causes energy to be
        : replaced by enthalpy in calculations.
@@full
Topic   : full
Type    : Keyword
Use     : Causes the nosymmetry option to produce the full, instead of the
        : primitive, unit cell.
See also: nosymmetry
@@noksymmetry
Topic   : noksymmetry
Type    : Keyword
Use     : Turns off the use of Brillouin zone symmetry to reduce the number of
        : k points associated with a given shrinking factor. Generally there is
        : never any reason to do this, except for checking purposes.
See also: phonon, shrink
@@average
Topic   : average
Type    : Keyword
Use     : Causes the average bond lengths between pairs of species to be printed
        : out after a bond length analysis.
See also: bond, distance
@@norecip
Topic   : norecip
Type    : Keyword
Use     : Do not calculate reciprocal space contributions to the energy and
        : derivatives.
See also: noreal
@@noreal
Topic   : noreal
Type    : Keyword
Use     : Do not calculate real space contributions to the energy and
        : derivatives.
See also: norecip
@@noexclude
Topic   : noexclude
Type    : Keyword
Use     : Do not freeze out atoms with no degrees of freedom from first and
        : and second derivative calculations during optimisation. For systems
        : where the number of frozen atoms is small then turning off this
        : option may increase the performance of the program as it allows
        : variable tuning of eta for each level of derivatives to be used.
See also: unfreeze
@@storevectors
Topic   : storevectors
Type    : Keyword
Use     : Use algorithms, where possible, that involve storing a table of
        : interatomic vectors that lie within the cutoff distance. Currently
        : this applies only to molecular dynamics. The idea is that by reducing
        : the frequency with which the vectors are searched for, the calculation
        : will be considerably speeded up in return for a small loss of precision.
        : The frequency of updating, controlled by the "resetvectors" option,
        : should be tested for the particular system of study. 
See also: resetvectors, extracutoff
@@resetvectors
Topic   : resetvectors
Type    : Option
Format  : resetvectors no_of_steps 
Units   : None 
Default : 1 
Use     : Specifies the frequency with which the interatomic vector table is
        : updated if using the storevectors keyword.
See also: storevectors, extracutoff
@@extracutoff
Topic   : extracutoff
Type    : Option
Format  : extracutoff value
Units   : Angstroms
Default : 0.0
Use     : When using the storevectors algorithm, this option specifies the extra
        : amount to be added to the global cutoff when deciding which vectors to
        : store. It allows for atoms to move across the boundary between updates.
See also: storevectors, resetvectors
@@operators
Topic   : operators
Type    : Keyword
Use     : Causes the program to print out the rotation matrix and shifts for
        : all bulk symmetry operators. Primarily a debugging keyword.
@@symmetry_cell
Topic   : symmetry_cell
Type    : Option
Format  : symmetry_cell <cell_type>
Default : Triclinic
Use     : When specifying the symmetry manually, this allows the user to set the
        : cell type. Allowed values are triclinic, monoclinic, orthorhombic,
        : tetragonal, hexagonal, rhombohedral and cubic.
See also: symmetry_operator
@@symmetry_operator
Topic   : symmetry_operator
Type    : Option
Format  : symmetry_operator 
        : r(1,1) r(1,2) r(1,3) t(1)
        : r(2,1) r(2,2) r(2,3) t(2)
        : r(3,1) r(3,2) r(3,3) t(3)
Units   : None / Fractional
Use     : Specifies the symmetry operators for a 3-D system manually. The
        : matrix r specifies the rotational matrix and the vector t specifies
        : the translational component of the roto-translational operator. Note
        : that the identity operator is always present and should not be given
        : again. If specified, this option causes any spacegroup specified to 
        : be ignored.
See also: spacegroup, origin, symmetry_cell
@@predict
Topic   : predict
Type    : Keyword
Use     : General Algorithm for Structure Prediction Pre-gulp routine.
        : Given contents of unit cell atomic coordinates are found using a
        : global optimiser (simulated annealing or genetic algorithm).
See also: genetic, anneal, contents, global and cost

and

Topic   : predict
Type    : Option
Use     : Start of global optimiser options section, closed by "end"
See also: minimum, maximum, discrete, configurations, conjugate,
        : tournament, crossover, mutation, seed, grid.
@@anneal
Topic   : anneal
Type    : Keyword
Use     : Given contents of unit cell find possible atomic coordinates
        : by implementing an algorithm which simulates annealing.
        : Generally a local minimisation is performed on the best configuration.
See also: predict, cost, global, and temperature.
@@contents
Topic   : contents
Type    : Option
Format  : contents
        : at no. <x> <y> <z> charge <coordination>
        : at.sym. <species_type> <x> <y> <z> charge <coordination>
Units   : Fractional, electrons and dimensionless
Use     : Internal contents of the first atom, charges and coordination
        : numbers for all species in the unit cell. Either the atomic
        : number or the symbol may be supplied, followed by the species
        : type. For now the species type can only be a core. Individual
        : charges and coodination number may be supplied for each ion or
        : for each type of species given using the species option. The
        : average observed coodination numbers are used as default.
        : Can only be used when keyword predict included or when a single
        : calculation required and all coordinates are known/supplied.
@@global
Topic   : global
Type    : Keyword
Use     : After finding possible crystal coordinates (because keyword
        : predict specified) dump out restart files before performing local
        : minimisation of the best structures.
See also: predict, genetic and anneal.
@@grid
Genetic
Topic   : grid
Type    : Genetic Option
Format  : grid min <max> <iter>
Default : 64 by 64 by 64 fixed grid (i.e. min=max=6).
Use     : Part of ga options section. Allows the grid size to change after
        : iter (default=20) iterations from (2^min)^3 to (2^min+1)^3 to a
        : maximum number of grid points of (2^max)^3.
        : Note that when optimisation stuck within a local minimum and this
        : option word is used then grid size will begin changing again.
See also: discrete.
@@seed
Topic   : seed
Type    : Option
Format  : seed q
Default : -1.0
Use     : Initial pointer used in random number generation wherever random numbers are used.
@@tpxo
Topic   : Two Point Crossover
Type    : Genetic Option
Default : One Point Crossover
Use     : Part of ga options section.
See also: crossover.
@@gexp
Topic   : Exponential Weights
Type    : Genetic Option
Default : Use tournament probability.
Use     : Part of ga options section. If specified then probability of
        : success for a given configuration is weighted exponentially
        : with respect to how good the configuration is compared with the
        : other configurations within the present population.
See also: tournament.
@@ttol
Topic   : Minimum Temperature
Type    : Option
Format  : ttol Tmin
Default : Tmin=0.01
Use     : Temperature tolerence for simulated annealing routine.
@@factor
Topic   : Temperature factor
Type    : Option
Format  : factor theta
Default : theta=0.9
Use     : Temperature reduction factor. A larger factor implies a faster
        : decay of simulated temperature.
@@cost
Topic   : Cost Function
Type    : Keyword
Use     : Calculate the cost function rather than energy during global
        : optimisation. If no other potential form given then use cost
        : function for local minisation as well.
        : For a single point run calculate cost function as well as
        : energy.
See also: predict, genetic and anneal.

and

Topic   : Cost Function
Type    : Genetic Option
Format  : cost <kb value_kb> <kc value_kc> <kq value_kq> <ks value_ks>
Default : kb=1.0 kc=1.0 kq=1.0 ks=0.0
Use     : Specify a weighting factor for the various components of the cost
        : function, where kb represent the bond valence contribution, kc
        : the coordination contribution, kq the Coulombic repulsion between
        : like charged ions and ks a sort of bond valence term between like
        : charged ions.
@@bbar
Topic   : bbar 
Type    : Option 
Format  : bbar at.no. <bbar> 
Units   : Angstrom 
Use     : Used within ‘element’ option input block, overwrites the default neutron 
        : scattering length for a specified element. (at. no. or symbol may be used) 
See also: coreinfo, element, siginc 
@@coreinfo
Topic   : coreinfo 
Type    : Keyword 
Use     : Outputs atomic information on all atoms (cores, not shells, if using shell model) 
        : used in phonon calculations. Details given for each core in the primitive cell. 
        : Lists species mass, neutron scattering length (bbar), incoherent and coherent 
        : neutron scattering area, and atomic position in both Cartesian and Fractional 
        : coordinates. This option is purely for information, and does not change the 
        : behaviour of GULP. Where partial occupancies used, output is for the mean- 
        : field atom on each site. 
See also: Keywords: makeEigenArrays
@@makeEigenArrays
Topic   : makeEigenArrays 
Type    : Keyword 
Use     : Stores phonon information (frequencies and eigenvectors) in internal arrays for 
        : further calculations. This information is generated by “phonon” and “eigen” 
        : keywords (automatically called if “makeEigenArrays” is set). This keyword 
        : should not need to be explicitly set unless testing. 
See also: pdf, nowidth, nofreq 
@@pdf
Topic   : pdf
Type    : Keyword
Use     : Calculate the Pair Distribution Function up to a given maximum radius (rmax)
        : by summing peak widths calculated for each atomic pair. Makes use of the
        : theory of Chung and Thorpe for calculating PDFs from phonon information
        : Phonon information will be generated according to a full Monkhorst-Pack grid,
        : with a specified density (using the shrink option). It is essential that all 
        : k-points are evaluated within a single gamma-centred Brillouin Zone; this 
        : is automatically enforced through the use of the "shift" keyword.
See Also: PDFcut, PDFkeep, nowidth, nofreq, opti, rmax, rbins, shrink

and

Topic   : pdf
Type    : Option 
Format  : pdf <all> 
        : … <further options> 
        : end 
Use     : Opens pdf input block. This is used for the input of options used by pdf
        : calculations. Specifically, it should be used for the pdf options 
        : rmax, rbins, wmax, wmin, units. 
        : The block is opened with the word pdf and all further options read are 
        : treated as pdf-related until the word end.  
        : When working with multiple configurations, one pdf input block is needed 
        : per configuration, unless the option all is given, when the options act on all 
        : configurations. This allows PDF output to be comparable between configurations. 
See also: PDFcut, PDFkeep, nowidth, nofreq, rmax, rbins, wmax, wmin, units
@@nopartial
Topic   : nopartial 
Type    : Keyword 
Use     : Used in conjuction with PDF keywords, suppresses output of partial pair 
        : distributions. 
See also: PDFcut, PDFkeep, nowidth 
@@nowidth
Topic   : nowidth 
Type    : Keyword 
Use     : Used in conjunction with PDF keywords, prevents output of individual 
        : pairs’ contributions to the PDF peak widths in a .wid file 
See also: PDFcut, PDFkeep, nowidth, nofreq 
@@PDFcut
Topic   : PDFcut 
Type    : Keyword 
Use     : As "PDF", but 'cut off' (ignore) all phonon contributions greater than 
        : a given "wmax" ("pdf "block input option) or less than a given "wmin" 
        : ("pdf" block input option).
See also: PDFkeep, pdf, nowidth, nofreq, rmax, rbins, wmin, wmax, units
@@PDFkeep
Topic   : PDFkeep 
Type    : Keyword 
Use     : As "PDFcut", but 'keep' all phonon contributions greater than a given 
        : "wmax" (pdf block input option) or less than a given "wmin" (pdf block 
        : input option) by setting w=wmax or w = wmin respectively.
See also: PDFcut, pdf, nowidth, nofreq, rmax, rbins, wmin, wmax, units
@@rephase
Topic   : rephase 
Type    : Keyword 
Use     : Changes the eigenvector phases so the component with the largest magnitude is 
        : all real for all eigenvectors, and renormalizes to unity. This makes visualisation 
        : of eigenvectors simpler. Called as a dependent keyword by other keywords, for 
        : example PDF. 
See also: PDF
@@rmax
Topic   : rmax 
Type    : Option 
Format  : rmax <n> 
Units   : Angstroms
Default : 5.0
Use     : Used within the pdf input block for PDF calculations. 
        : Sets the maximum radius for atomic pairs to be generated. 
See also: PDF* 
@@rbins
Topic   : rbins 
Type    : Option 
Format  : rbins <n> 
Default : 100 
Use     : Used within the pdf input block for PDF calculations. 
        : Sets the number of bins to be used for PDF correlation function output  
See also: PDF* 
@@siginc
Topic   : siginc 
Type    : Option 
Format  : siginc at.no. <siginc> 
Units   : Angstrom2 (=108 Barns) 
Use     : Used within ‘element’ option input block, overwrites the default bound 
        : incoherent neutron scattering cross-section (siginc) for a specified element. 
        : (at. no. or symbol may be used) 
See also: coreinfo, element, bbar 
@@wmax
Topic   : wmax 
Type    : Option 
Format  : wmax <n> 
Units   : THz
Default : None: must be specified. 
Use     : Used within the "pdf" input block for "PDFcut" or "PDFkeep" calculations.
        : Sets the maximum phonon frequency to be used in calculating PDFs.
        : Units can be changed using 'unit freq'
See also: PDF*, units, wmin 
@@wmin
Topic   : wmin 
Type    : Option 
Format  : wmin <n> 
Units   : THz
Default : None: must be specified. 
Use     : Used within the "pdf" input block for "PDFcut" or "PDFkeep" calculations.
        : Sets the minimum phonon frequency to be used in calculating PDFs. 
        : Units can be changed using 'unit freq'
See also: PDF*, units, wmax 
@@units
Topic   : units freq 
Type    : Option 
Format  : units freq [rad/Thz/cm/wav/meV] 
Default : Default units for frequency are THz 
Use     : Used within the pdf input block for PDF calculations. 
        : Options are Radians, THz, waveumber and meV. 
        : Changes the default input/output units for frequencies. 
        : (cm or wav can be used for wavenumbers) 
See also: PDF*, wmin, wmax

@@valid_spacegroups

Valid space groups for GULP:

_______________________________________________________________________________

  Number	Label		Number	Label		Number	Label
_______________________________________________________________________________

  1	P 1             2	P -1		3	P 2
  4	P 21		5	C 2		6	P M
  7	P C		8	C M		9	C C
  10	P 2/M		11	P 21/M		12	C 2/M
  13	P 2/C		14	P 21/C		15	C 2/C
  16	P 2 2 2		17	P 2 2 21	18	P 21 21 2
  19	P 21 21 21	20	C 2 2 21	21	C 2 2 2
  22	F 2 2 2		23	I 2 2 2		24	I 21 21 21
  25	P M M 2		26	P M C 21	27	P C C 2
  28	P M A 2		29	P C A 21	30	P N C 2
  31	P M N 21	32	P B A 2		33	P N A 21
  34	P N N 2		35	C M M 2		36	C M C 21
  37	C C C 2		38	A M M 2		39	A B M 2
  40	A M A 2		41	A B A 2		42	F M M 2
  43	F D D 2		44	I M M 2		45	I B A 2
  46	I M A 2		47	P M M M		48	P N N N
  49	P C C M		50	P B A N		51	P M M A
  52	P N N A		53	P M N A		54	P C C A
  55	P B A M		56	P C C N		57	P B C M
  58	P N N M		59	P M M N		60	P B C N
  61	P B C A		62	P N M A		63	C M C M
  64	C M C A		65	C M M M		66	C C C M
  67	C M M A		68	C C C A		69	F M M M
  70	F D D D		71	I M M M		72	I B A M
  73	I B C A		74	I M M A		75	P 4
  76	P 41		77	P 42		78	P 43
  79	I 4		80	I 41		81	P -4
  82	I -4		83	P 4/M		84	P 42/M
  85	P 4/N		86	P 42/N		87	I 4/M
  88	I 41/A		89	P 4 2 2		90	P 4 21 2
  91	P 41 2 2	92	P 41 21 2	93	P 42 2 2
  94	P 42 21 2	95	P 43 2 2	96	P 43 21 2
  97	I 4 2 2		98	I 41 2 2	99	P 4 M M
  100	P 4 B M		101	P 42 C M	102	P 42 N M
  103	P 4 C C		104	P 4 N C		105	P 42 M C
  106	P 42 B C	107	I 4 M M		108	I 4 C M
  109	I 41 M D	110	I 41 C D	111	P -4 2 M
  112	P -4 2 C	113	P -4 21 M	114	P -4 21 C
  115	P -4 M 2	116	P -4 C 2	117	P -4 B 2
  118	P -4 N 2	119	I -4 M 2	120	I -4 C 2
  121	I -4 2 M	122	I -4 2 D	123	P 4/M M M
  124	P 4/M C C	125	P 4/N B M       126	P 4/N N C
  127	P 4/M B M       128	P 4/M N C	129	P 4/N M M
  130	P 4/N C C       131	P 42/M M C      132	P 42/M C M
  133	P 42/N B C      134	P 42/N N M      135	P 42/M B C
  136	P 42/M N M      137	P 42/N M C      138	P 42/N C M
  139	I 4/M M M       140	I 4/M C M       141	I 41/A M D
  142	I 41/A C D      143	P 3             144	P 31
  145	P 32            146	R 3             147	P -3
  148	R -3            149	P 3 1 2         150	P 3 2 1
  151	P 31 1 2        152	P 31 2 1        153	P 32 1 2
  154	P 32 2 1        155	R 3 2           156	P 3 M 1
  157	P 3 1 M         158	P 3 C 1         159	P 3 1 C
  160	R 3 M           161	R 3 C           162	P -3 1 M
  163	P -3 1 C        164	P -3 M 1        165	P -3 C 1
  166	R -3 M          167	R -3 C          168	P 6
  169	P 61            170	P 65            171	P 62
  172	P 64            173	P 63            174	P -6
  175	P 6/M           176	P 63/M          177	P 6 2 2
  178	P 61 2 2	179	P 65 2 2	180	P 62 2 2
  181	P 64 2 2	182	P 63 2 2	183	P 6 M M
  184	P 6 C C		185	P 63 C M	186	P 63 M C
  187	P -6 M 2	188	P -6 C 2	189	P -6 2 M
  190	P -6 2 C	191	P 6/M M M	192	P 6/M C C
  193	P 63/M C M	194	P 63/M M C	195	P 2 3
  196	F 2 3		197	I 2 3		198	P 21 3
  199	I 21 3		200	P M 3 (P M -3)	201	P N 3 (P N -3)
  202	F M 3 (F M -3)	203	F D 3 (F D -3)	204	I M 3 (I M -3)
  205	P A 3 (P A -3)	206	I A 3 (I A -3)	207	P 4 3 2
  208	P 42 3 2	209	F 4 3 2		210	F 41 3 2
  211	I 4 3 2		212	P 43 3 2	213	P 41 3 2
  214	I 41 3 2	215	P -4 3 M	216	F -4 3 M
  217	I -4 3 M	218	P -4 3 N	219	F -4 3 C
  220	I -4 3 D	221	P M 3 M		222	P N 3 N
  223	P M 3 N		224	P N 3 M		225	F M 3 M
  226	F M 3 C		227	F D 3 M		228	F D 3 C
  229	I M 3 M		230	I A 3 D

Non-standard space groups:

  C 1 / C -1

Alternative settings of the above space groups should also be valid
_______________________________________________________________________________
